import {
  q,
  r
} from "./chunk-F6LUTOTK.js";

// node_modules/@mappedin/mappedin-js/lib/esm/chunk-J3F43M4Z.js
q();
var No = "162";
var fv = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
var lf = 0;
var sh = 1;
var hf = 2;
var Ld = 1;
var uf = 2;
var ln = 3;
var Cn = 0;
var Pe = 1;
var un = 2;
var An = 0;
var wi = 1;
var rh = 2;
var ah = 3;
var oh = 4;
var df = 5;
var Xn = 100;
var ff = 101;
var pf = 102;
var ch = 103;
var lh = 104;
var mf = 200;
var gf = 201;
var _f = 202;
var xf = 203;
var Oa = 204;
var Fa = 205;
var vf = 206;
var yf = 207;
var Mf = 208;
var Sf = 209;
var bf = 210;
var Ef = 211;
var wf = 212;
var Af = 213;
var Tf = 214;
var Rf = 0;
var Cf = 1;
var Pf = 2;
var Js = 3;
var If = 4;
var Lf = 5;
var Uf = 6;
var Df = 7;
var Oo = 0;
var Nf = 1;
var Of = 2;
var Tn = 0;
var Ff = 1;
var Bf = 2;
var zf = 3;
var kf = 4;
var Vf = 5;
var Hf = 6;
var Gf = 7;
var hh = "attached";
var Wf = "detached";
var Ud = 300;
var Ci = 301;
var Pi = 302;
var Ba = 303;
var za = 304;
var kr = 306;
var ka = 1e3;
var Ye = 1001;
var Va = 1002;
var ge = 1003;
var uh = 1004;
var Vi = 1005;
var Ce = 1006;
var Zr = 1007;
var Yn = 1008;
var Rn = 1009;
var Xf = 1010;
var qf = 1011;
var Fo = 1012;
var Dd = 1013;
var En = 1014;
var ke = 1015;
var ns = 1016;
var Nd = 1017;
var Od = 1018;
var Jn = 1020;
var Yf = 1021;
var Oe = 1023;
var Zf = 1024;
var Jf = 1025;
var $n = 1026;
var Ii = 1027;
var Fd = 1028;
var Bd = 1029;
var $f = 1030;
var zd = 1031;
var kd = 1033;
var Jr = 33776;
var $r = 33777;
var Kr = 33778;
var Qr = 33779;
var dh = 35840;
var fh = 35841;
var ph = 35842;
var mh = 35843;
var Vd = 36196;
var gh = 37492;
var _h = 37496;
var xh = 37808;
var vh = 37809;
var yh = 37810;
var Mh = 37811;
var Sh = 37812;
var bh = 37813;
var Eh = 37814;
var wh = 37815;
var Ah = 37816;
var Th = 37817;
var Rh = 37818;
var Ch = 37819;
var Ph = 37820;
var Ih = 37821;
var jr = 36492;
var Lh = 36494;
var Uh = 36495;
var Kf = 36283;
var Dh = 36284;
var Nh = 36285;
var Oh = 36286;
var $s = 2300;
var Ks = 2301;
var ta = 2302;
var Fh = 2400;
var Bh = 2401;
var zh = 2402;
var Qf = 2500;
var pv = 0;
var mv = 1;
var gv = 2;
var jf = 3200;
var tp = 3201;
var Bo = 0;
var ep = 1;
var bn = "";
var Ke = "srgb";
var Dn = "srgb-linear";
var zo = "display-p3";
var Vr = "display-p3-linear";
var Qs = "linear";
var jt = "srgb";
var js = "rec709";
var tr = "p3";
var ei = 7680;
var kh = 519;
var np = 512;
var ip = 513;
var sp = 514;
var Hd = 515;
var rp = 516;
var ap = 517;
var op = 518;
var cp = 519;
var Ha = 35044;
var Vh = "300 es";
var Ga = 1035;
var dn = 2e3;
var er = 2001;
var Xo = class Xo2 {
  addEventListener(t, e) {
    this._listeners === void 0 && (this._listeners = {});
    let n = this._listeners;
    n[t] === void 0 && (n[t] = []), n[t].indexOf(e) === -1 && n[t].push(e);
  }
  hasEventListener(t, e) {
    if (this._listeners === void 0) return false;
    let n = this._listeners;
    return n[t] !== void 0 && n[t].indexOf(e) !== -1;
  }
  removeEventListener(t, e) {
    if (this._listeners === void 0) return;
    let i = this._listeners[t];
    if (i !== void 0) {
      let r2 = i.indexOf(e);
      r2 !== -1 && i.splice(r2, 1);
    }
  }
  dispatchEvent(t) {
    if (this._listeners === void 0) return;
    let n = this._listeners[t.type];
    if (n !== void 0) {
      t.target = this;
      let i = n.slice(0);
      for (let r2 = 0, o = i.length; r2 < o; r2++) i[r2].call(this, t);
      t.target = null;
    }
  }
};
r(Xo, "EventDispatcher");
var Pn = Xo;
var xe = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
var Hh = 1234567;
var Ai = Math.PI / 180;
var Li = 180 / Math.PI;
function Ve() {
  let s = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0;
  return (xe[s & 255] + xe[s >> 8 & 255] + xe[s >> 16 & 255] + xe[s >> 24 & 255] + "-" + xe[t & 255] + xe[t >> 8 & 255] + "-" + xe[t >> 16 & 15 | 64] + xe[t >> 24 & 255] + "-" + xe[e & 63 | 128] + xe[e >> 8 & 255] + "-" + xe[e >> 16 & 255] + xe[e >> 24 & 255] + xe[n & 255] + xe[n >> 8 & 255] + xe[n >> 16 & 255] + xe[n >> 24 & 255]).toLowerCase();
}
r(Ve, "generateUUID");
function pe(s, t, e) {
  return Math.max(t, Math.min(e, s));
}
r(pe, "clamp");
function ko(s, t) {
  return (s % t + t) % t;
}
r(ko, "euclideanModulo");
function lp(s, t, e, n, i) {
  return n + (s - t) * (i - n) / (e - t);
}
r(lp, "mapLinear");
function hp(s, t, e) {
  return s !== t ? (e - s) / (t - s) : 0;
}
r(hp, "inverseLerp");
function $i(s, t, e) {
  return (1 - e) * s + e * t;
}
r($i, "lerp");
function up(s, t, e, n) {
  return $i(s, t, 1 - Math.exp(-e * n));
}
r(up, "damp");
function dp(s, t = 1) {
  return t - Math.abs(ko(s, t * 2) - t);
}
r(dp, "pingpong");
function fp(s, t, e) {
  return s <= t ? 0 : s >= e ? 1 : (s = (s - t) / (e - t), s * s * (3 - 2 * s));
}
r(fp, "smoothstep");
function pp(s, t, e) {
  return s <= t ? 0 : s >= e ? 1 : (s = (s - t) / (e - t), s * s * s * (s * (s * 6 - 15) + 10));
}
r(pp, "smootherstep");
function mp(s, t) {
  return s + Math.floor(Math.random() * (t - s + 1));
}
r(mp, "randInt");
function gp(s, t) {
  return s + Math.random() * (t - s);
}
r(gp, "randFloat");
function _p(s) {
  return s * (0.5 - Math.random());
}
r(_p, "randFloatSpread");
function xp(s) {
  s !== void 0 && (Hh = s);
  let t = Hh += 1831565813;
  return t = Math.imul(t ^ t >>> 15, t | 1), t ^= t + Math.imul(t ^ t >>> 7, t | 61), ((t ^ t >>> 14) >>> 0) / 4294967296;
}
r(xp, "seededRandom");
function vp(s) {
  return s * Ai;
}
r(vp, "degToRad");
function yp(s) {
  return s * Li;
}
r(yp, "radToDeg");
function Wa(s) {
  return (s & s - 1) === 0 && s !== 0;
}
r(Wa, "isPowerOfTwo");
function Mp(s) {
  return Math.pow(2, Math.ceil(Math.log(s) / Math.LN2));
}
r(Mp, "ceilPowerOfTwo");
function nr(s) {
  return Math.pow(2, Math.floor(Math.log(s) / Math.LN2));
}
r(nr, "floorPowerOfTwo");
function Sp(s, t, e, n, i) {
  let r2 = Math.cos, o = Math.sin, a = r2(e / 2), c = o(e / 2), l = r2((t + n) / 2), h = o((t + n) / 2), d = r2((t - n) / 2), f = o((t - n) / 2), g = r2((n - t) / 2), _ = o((n - t) / 2);
  switch (i) {
    case "XYX":
      s.set(a * h, c * d, c * f, a * l);
      break;
    case "YZY":
      s.set(c * f, a * h, c * d, a * l);
      break;
    case "ZXZ":
      s.set(c * d, c * f, a * h, a * l);
      break;
    case "XZX":
      s.set(a * h, c * _, c * g, a * l);
      break;
    case "YXY":
      s.set(c * g, a * h, c * _, a * l);
      break;
    case "ZYZ":
      s.set(c * _, c * g, a * h, a * l);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + i);
  }
}
r(Sp, "setQuaternionFromProperEuler");
function Ze(s, t) {
  switch (t.constructor) {
    case Float32Array:
      return s;
    case Uint32Array:
      return s / 4294967295;
    case Uint16Array:
      return s / 65535;
    case Uint8Array:
      return s / 255;
    case Int32Array:
      return Math.max(s / 2147483647, -1);
    case Int16Array:
      return Math.max(s / 32767, -1);
    case Int8Array:
      return Math.max(s / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
r(Ze, "denormalize");
function Zt(s, t) {
  switch (t.constructor) {
    case Float32Array:
      return s;
    case Uint32Array:
      return Math.round(s * 4294967295);
    case Uint16Array:
      return Math.round(s * 65535);
    case Uint8Array:
      return Math.round(s * 255);
    case Int32Array:
      return Math.round(s * 2147483647);
    case Int16Array:
      return Math.round(s * 32767);
    case Int8Array:
      return Math.round(s * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
r(Zt, "normalize");
var _v = { DEG2RAD: Ai, RAD2DEG: Li, generateUUID: Ve, clamp: pe, euclideanModulo: ko, mapLinear: lp, inverseLerp: hp, lerp: $i, damp: up, pingpong: dp, smoothstep: fp, smootherstep: pp, randInt: mp, randFloat: gp, randFloatSpread: _p, seededRandom: xp, degToRad: vp, radToDeg: yp, isPowerOfTwo: Wa, ceilPowerOfTwo: Mp, floorPowerOfTwo: nr, setQuaternionFromProperEuler: Sp, normalize: Zt, denormalize: Ze };
var wr = class wr2 {
  constructor(t = 0, e = 0) {
    wr2.prototype.isVector2 = true, this.x = t, this.y = e;
  }
  get width() {
    return this.x;
  }
  set width(t) {
    this.x = t;
  }
  get height() {
    return this.y;
  }
  set height(t) {
    this.y = t;
  }
  set(t, e) {
    return this.x = t, this.y = e, this;
  }
  setScalar(t) {
    return this.x = t, this.y = t, this;
  }
  setX(t) {
    return this.x = t, this;
  }
  setY(t) {
    return this.y = t, this;
  }
  setComponent(t, e) {
    switch (t) {
      case 0:
        this.x = e;
        break;
      case 1:
        this.y = e;
        break;
      default:
        throw new Error("index is out of range: " + t);
    }
    return this;
  }
  getComponent(t) {
    switch (t) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + t);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(t) {
    return this.x = t.x, this.y = t.y, this;
  }
  add(t) {
    return this.x += t.x, this.y += t.y, this;
  }
  addScalar(t) {
    return this.x += t, this.y += t, this;
  }
  addVectors(t, e) {
    return this.x = t.x + e.x, this.y = t.y + e.y, this;
  }
  addScaledVector(t, e) {
    return this.x += t.x * e, this.y += t.y * e, this;
  }
  sub(t) {
    return this.x -= t.x, this.y -= t.y, this;
  }
  subScalar(t) {
    return this.x -= t, this.y -= t, this;
  }
  subVectors(t, e) {
    return this.x = t.x - e.x, this.y = t.y - e.y, this;
  }
  multiply(t) {
    return this.x *= t.x, this.y *= t.y, this;
  }
  multiplyScalar(t) {
    return this.x *= t, this.y *= t, this;
  }
  divide(t) {
    return this.x /= t.x, this.y /= t.y, this;
  }
  divideScalar(t) {
    return this.multiplyScalar(1 / t);
  }
  applyMatrix3(t) {
    let e = this.x, n = this.y, i = t.elements;
    return this.x = i[0] * e + i[3] * n + i[6], this.y = i[1] * e + i[4] * n + i[7], this;
  }
  min(t) {
    return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this;
  }
  max(t) {
    return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this;
  }
  clamp(t, e) {
    return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this;
  }
  clampScalar(t, e) {
    return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this;
  }
  clampLength(t, e) {
    let n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  dot(t) {
    return this.x * t.x + this.y * t.y;
  }
  cross(t) {
    return this.x * t.y - this.y * t.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  angleTo(t) {
    let e = Math.sqrt(this.lengthSq() * t.lengthSq());
    if (e === 0) return Math.PI / 2;
    let n = this.dot(t) / e;
    return Math.acos(pe(n, -1, 1));
  }
  distanceTo(t) {
    return Math.sqrt(this.distanceToSquared(t));
  }
  distanceToSquared(t) {
    let e = this.x - t.x, n = this.y - t.y;
    return e * e + n * n;
  }
  manhattanDistanceTo(t) {
    return Math.abs(this.x - t.x) + Math.abs(this.y - t.y);
  }
  setLength(t) {
    return this.normalize().multiplyScalar(t);
  }
  lerp(t, e) {
    return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this;
  }
  lerpVectors(t, e, n) {
    return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this;
  }
  equals(t) {
    return t.x === this.x && t.y === this.y;
  }
  fromArray(t, e = 0) {
    return this.x = t[e], this.y = t[e + 1], this;
  }
  toArray(t = [], e = 0) {
    return t[e] = this.x, t[e + 1] = this.y, t;
  }
  fromBufferAttribute(t, e) {
    return this.x = t.getX(e), this.y = t.getY(e), this;
  }
  rotateAround(t, e) {
    let n = Math.cos(e), i = Math.sin(e), r2 = this.x - t.x, o = this.y - t.y;
    return this.x = r2 * n - o * i + t.x, this.y = r2 * i + o * n + t.y, this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
};
r(wr, "Vector2");
var lt = wr;
var Ar = class Ar2 {
  constructor(t, e, n, i, r2, o, a, c, l) {
    Ar2.prototype.isMatrix3 = true, this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1], t !== void 0 && this.set(t, e, n, i, r2, o, a, c, l);
  }
  set(t, e, n, i, r2, o, a, c, l) {
    let h = this.elements;
    return h[0] = t, h[1] = i, h[2] = a, h[3] = e, h[4] = r2, h[5] = c, h[6] = n, h[7] = o, h[8] = l, this;
  }
  identity() {
    return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
  }
  copy(t) {
    let e = this.elements, n = t.elements;
    return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], this;
  }
  extractBasis(t, e, n) {
    return t.setFromMatrix3Column(this, 0), e.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
  }
  setFromMatrix4(t) {
    let e = t.elements;
    return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]), this;
  }
  multiply(t) {
    return this.multiplyMatrices(this, t);
  }
  premultiply(t) {
    return this.multiplyMatrices(t, this);
  }
  multiplyMatrices(t, e) {
    let n = t.elements, i = e.elements, r2 = this.elements, o = n[0], a = n[3], c = n[6], l = n[1], h = n[4], d = n[7], f = n[2], g = n[5], _ = n[8], v = i[0], m = i[3], p = i[6], w = i[1], x = i[4], b = i[7], L = i[2], C = i[5], R = i[8];
    return r2[0] = o * v + a * w + c * L, r2[3] = o * m + a * x + c * C, r2[6] = o * p + a * b + c * R, r2[1] = l * v + h * w + d * L, r2[4] = l * m + h * x + d * C, r2[7] = l * p + h * b + d * R, r2[2] = f * v + g * w + _ * L, r2[5] = f * m + g * x + _ * C, r2[8] = f * p + g * b + _ * R, this;
  }
  multiplyScalar(t) {
    let e = this.elements;
    return e[0] *= t, e[3] *= t, e[6] *= t, e[1] *= t, e[4] *= t, e[7] *= t, e[2] *= t, e[5] *= t, e[8] *= t, this;
  }
  determinant() {
    let t = this.elements, e = t[0], n = t[1], i = t[2], r2 = t[3], o = t[4], a = t[5], c = t[6], l = t[7], h = t[8];
    return e * o * h - e * a * l - n * r2 * h + n * a * c + i * r2 * l - i * o * c;
  }
  invert() {
    let t = this.elements, e = t[0], n = t[1], i = t[2], r2 = t[3], o = t[4], a = t[5], c = t[6], l = t[7], h = t[8], d = h * o - a * l, f = a * c - h * r2, g = l * r2 - o * c, _ = e * d + n * f + i * g;
    if (_ === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    let v = 1 / _;
    return t[0] = d * v, t[1] = (i * l - h * n) * v, t[2] = (a * n - i * o) * v, t[3] = f * v, t[4] = (h * e - i * c) * v, t[5] = (i * r2 - a * e) * v, t[6] = g * v, t[7] = (n * c - l * e) * v, t[8] = (o * e - n * r2) * v, this;
  }
  transpose() {
    let t, e = this.elements;
    return t = e[1], e[1] = e[3], e[3] = t, t = e[2], e[2] = e[6], e[6] = t, t = e[5], e[5] = e[7], e[7] = t, this;
  }
  getNormalMatrix(t) {
    return this.setFromMatrix4(t).invert().transpose();
  }
  transposeIntoArray(t) {
    let e = this.elements;
    return t[0] = e[0], t[1] = e[3], t[2] = e[6], t[3] = e[1], t[4] = e[4], t[5] = e[7], t[6] = e[2], t[7] = e[5], t[8] = e[8], this;
  }
  setUvTransform(t, e, n, i, r2, o, a) {
    let c = Math.cos(r2), l = Math.sin(r2);
    return this.set(n * c, n * l, -n * (c * o + l * a) + o + t, -i * l, i * c, -i * (-l * o + c * a) + a + e, 0, 0, 1), this;
  }
  scale(t, e) {
    return this.premultiply(ea.makeScale(t, e)), this;
  }
  rotate(t) {
    return this.premultiply(ea.makeRotation(-t)), this;
  }
  translate(t, e) {
    return this.premultiply(ea.makeTranslation(t, e)), this;
  }
  makeTranslation(t, e) {
    return t.isVector2 ? this.set(1, 0, t.x, 0, 1, t.y, 0, 0, 1) : this.set(1, 0, t, 0, 1, e, 0, 0, 1), this;
  }
  makeRotation(t) {
    let e = Math.cos(t), n = Math.sin(t);
    return this.set(e, -n, 0, n, e, 0, 0, 0, 1), this;
  }
  makeScale(t, e) {
    return this.set(t, 0, 0, 0, e, 0, 0, 0, 1), this;
  }
  equals(t) {
    let e = this.elements, n = t.elements;
    for (let i = 0; i < 9; i++) if (e[i] !== n[i]) return false;
    return true;
  }
  fromArray(t, e = 0) {
    for (let n = 0; n < 9; n++) this.elements[n] = t[n + e];
    return this;
  }
  toArray(t = [], e = 0) {
    let n = this.elements;
    return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
};
r(Ar, "Matrix3");
var kt = Ar;
var ea = new kt();
function Gd(s) {
  for (let t = s.length - 1; t >= 0; --t) if (s[t] >= 65535) return true;
  return false;
}
r(Gd, "arrayNeedsUint32");
function is(s) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", s);
}
r(is, "createElementNS");
function bp() {
  let s = is("canvas");
  return s.style.display = "block", s;
}
r(bp, "createCanvasElement");
var Gh = {};
function Wd(s) {
  s in Gh || (Gh[s] = true, console.warn(s));
}
r(Wd, "warnOnce");
var Wh = new kt().set(0.8224621, 0.177538, 0, 0.0331941, 0.9668058, 0, 0.0170827, 0.0723974, 0.9105199);
var Xh = new kt().set(1.2249401, -0.2249404, 0, -0.0420569, 1.0420571, 0, -0.0196376, -0.0786361, 1.0982735);
var ps = { [Dn]: { transfer: Qs, primaries: js, toReference: (s) => s, fromReference: (s) => s }, [Ke]: { transfer: jt, primaries: js, toReference: (s) => s.convertSRGBToLinear(), fromReference: (s) => s.convertLinearToSRGB() }, [Vr]: { transfer: Qs, primaries: tr, toReference: (s) => s.applyMatrix3(Xh), fromReference: (s) => s.applyMatrix3(Wh) }, [zo]: { transfer: jt, primaries: tr, toReference: (s) => s.convertSRGBToLinear().applyMatrix3(Xh), fromReference: (s) => s.applyMatrix3(Wh).convertLinearToSRGB() } };
var Ep = /* @__PURE__ */ new Set([Dn, Vr]);
var Jt = { enabled: true, _workingColorSpace: Dn, get workingColorSpace() {
  return this._workingColorSpace;
}, set workingColorSpace(s) {
  if (!Ep.has(s)) throw new Error(`Unsupported working color space, "${s}".`);
  this._workingColorSpace = s;
}, convert: function(s, t, e) {
  if (this.enabled === false || t === e || !t || !e) return s;
  let n = ps[t].toReference, i = ps[e].fromReference;
  return i(n(s));
}, fromWorkingColorSpace: function(s, t) {
  return this.convert(s, this._workingColorSpace, t);
}, toWorkingColorSpace: function(s, t) {
  return this.convert(s, t, this._workingColorSpace);
}, getPrimaries: function(s) {
  return ps[s].primaries;
}, getTransfer: function(s) {
  return s === bn ? Qs : ps[s].transfer;
} };
function Ti(s) {
  return s < 0.04045 ? s * 0.0773993808 : Math.pow(s * 0.9478672986 + 0.0521327014, 2.4);
}
r(Ti, "SRGBToLinear");
function na(s) {
  return s < 31308e-7 ? s * 12.92 : 1.055 * Math.pow(s, 0.41666) - 0.055;
}
r(na, "LinearToSRGB");
var ni;
var qo = class qo2 {
  static getDataURL(t) {
    if (/^data:/i.test(t.src) || typeof HTMLCanvasElement > "u") return t.src;
    let e;
    if (t instanceof HTMLCanvasElement) e = t;
    else {
      ni === void 0 && (ni = is("canvas")), ni.width = t.width, ni.height = t.height;
      let n = ni.getContext("2d");
      t instanceof ImageData ? n.putImageData(t, 0, 0) : n.drawImage(t, 0, 0, t.width, t.height), e = ni;
    }
    return e.width > 2048 || e.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", t), e.toDataURL("image/jpeg", 0.6)) : e.toDataURL("image/png");
  }
  static sRGBToLinear(t) {
    if (typeof HTMLImageElement < "u" && t instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && t instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && t instanceof ImageBitmap) {
      let e = is("canvas");
      e.width = t.width, e.height = t.height;
      let n = e.getContext("2d");
      n.drawImage(t, 0, 0, t.width, t.height);
      let i = n.getImageData(0, 0, t.width, t.height), r2 = i.data;
      for (let o = 0; o < r2.length; o++) r2[o] = Ti(r2[o] / 255) * 255;
      return n.putImageData(i, 0, 0), e;
    } else if (t.data) {
      let e = t.data.slice(0);
      for (let n = 0; n < e.length; n++) e instanceof Uint8Array || e instanceof Uint8ClampedArray ? e[n] = Math.floor(Ti(e[n] / 255) * 255) : e[n] = Ti(e[n]);
      return { data: e, width: t.width, height: t.height };
    } else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), t;
  }
};
r(qo, "ImageUtils");
var ir = qo;
var wp = 0;
var Yo = class Yo2 {
  constructor(t = null) {
    this.isSource = true, Object.defineProperty(this, "id", { value: wp++ }), this.uuid = Ve(), this.data = t, this.dataReady = true, this.version = 0;
  }
  set needsUpdate(t) {
    t === true && this.version++;
  }
  toJSON(t) {
    let e = t === void 0 || typeof t == "string";
    if (!e && t.images[this.uuid] !== void 0) return t.images[this.uuid];
    let n = { uuid: this.uuid, url: "" }, i = this.data;
    if (i !== null) {
      let r2;
      if (Array.isArray(i)) {
        r2 = [];
        for (let o = 0, a = i.length; o < a; o++) i[o].isDataTexture ? r2.push(ia(i[o].image)) : r2.push(ia(i[o]));
      } else r2 = ia(i);
      n.url = r2;
    }
    return e || (t.images[this.uuid] = n), n;
  }
};
r(Yo, "Source");
var sr = Yo;
function ia(s) {
  return typeof HTMLImageElement < "u" && s instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && s instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && s instanceof ImageBitmap ? ir.getDataURL(s) : s.data ? { data: Array.from(s.data), width: s.width, height: s.height, type: s.data.constructor.name } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
r(ia, "serializeImage");
var Ap = 0;
var bi = class bi2 extends Pn {
  constructor(t = bi2.DEFAULT_IMAGE, e = bi2.DEFAULT_MAPPING, n = Ye, i = Ye, r2 = Ce, o = Yn, a = Oe, c = Rn, l = bi2.DEFAULT_ANISOTROPY, h = bn) {
    super(), this.isTexture = true, Object.defineProperty(this, "id", { value: Ap++ }), this.uuid = Ve(), this.name = "", this.source = new sr(t), this.mipmaps = [], this.mapping = e, this.channel = 0, this.wrapS = n, this.wrapT = i, this.magFilter = r2, this.minFilter = o, this.anisotropy = l, this.format = a, this.internalFormat = null, this.type = c, this.offset = new lt(0, 0), this.repeat = new lt(1, 1), this.center = new lt(0, 0), this.rotation = 0, this.matrixAutoUpdate = true, this.matrix = new kt(), this.generateMipmaps = true, this.premultiplyAlpha = false, this.flipY = true, this.unpackAlignment = 4, this.colorSpace = h, this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = false, this.needsPMREMUpdate = false;
  }
  get image() {
    return this.source.data;
  }
  set image(t = null) {
    this.source.data = t;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(t) {
    return this.name = t.name, this.source = t.source, this.mipmaps = t.mipmaps.slice(0), this.mapping = t.mapping, this.channel = t.channel, this.wrapS = t.wrapS, this.wrapT = t.wrapT, this.magFilter = t.magFilter, this.minFilter = t.minFilter, this.anisotropy = t.anisotropy, this.format = t.format, this.internalFormat = t.internalFormat, this.type = t.type, this.offset.copy(t.offset), this.repeat.copy(t.repeat), this.center.copy(t.center), this.rotation = t.rotation, this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrix.copy(t.matrix), this.generateMipmaps = t.generateMipmaps, this.premultiplyAlpha = t.premultiplyAlpha, this.flipY = t.flipY, this.unpackAlignment = t.unpackAlignment, this.colorSpace = t.colorSpace, this.userData = JSON.parse(JSON.stringify(t.userData)), this.needsUpdate = true, this;
  }
  toJSON(t) {
    let e = t === void 0 || typeof t == "string";
    if (!e && t.textures[this.uuid] !== void 0) return t.textures[this.uuid];
    let n = { metadata: { version: 4.6, type: "Texture", generator: "Texture.toJSON" }, uuid: this.uuid, name: this.name, image: this.source.toJSON(t).uuid, mapping: this.mapping, channel: this.channel, repeat: [this.repeat.x, this.repeat.y], offset: [this.offset.x, this.offset.y], center: [this.center.x, this.center.y], rotation: this.rotation, wrap: [this.wrapS, this.wrapT], format: this.format, internalFormat: this.internalFormat, type: this.type, colorSpace: this.colorSpace, minFilter: this.minFilter, magFilter: this.magFilter, anisotropy: this.anisotropy, flipY: this.flipY, generateMipmaps: this.generateMipmaps, premultiplyAlpha: this.premultiplyAlpha, unpackAlignment: this.unpackAlignment };
    return Object.keys(this.userData).length > 0 && (n.userData = this.userData), e || (t.textures[this.uuid] = n), n;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(t) {
    if (this.mapping !== Ud) return t;
    if (t.applyMatrix3(this.matrix), t.x < 0 || t.x > 1) switch (this.wrapS) {
      case ka:
        t.x = t.x - Math.floor(t.x);
        break;
      case Ye:
        t.x = t.x < 0 ? 0 : 1;
        break;
      case Va:
        Math.abs(Math.floor(t.x) % 2) === 1 ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x);
        break;
    }
    if (t.y < 0 || t.y > 1) switch (this.wrapT) {
      case ka:
        t.y = t.y - Math.floor(t.y);
        break;
      case Ye:
        t.y = t.y < 0 ? 0 : 1;
        break;
      case Va:
        Math.abs(Math.floor(t.y) % 2) === 1 ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y);
        break;
    }
    return this.flipY && (t.y = 1 - t.y), t;
  }
  set needsUpdate(t) {
    t === true && (this.version++, this.source.needsUpdate = true);
  }
};
r(bi, "Texture");
var be = bi;
be.DEFAULT_IMAGE = null;
be.DEFAULT_MAPPING = Ud;
be.DEFAULT_ANISOTROPY = 1;
var Tr = class Tr2 {
  constructor(t = 0, e = 0, n = 0, i = 1) {
    Tr2.prototype.isVector4 = true, this.x = t, this.y = e, this.z = n, this.w = i;
  }
  get width() {
    return this.z;
  }
  set width(t) {
    this.z = t;
  }
  get height() {
    return this.w;
  }
  set height(t) {
    this.w = t;
  }
  set(t, e, n, i) {
    return this.x = t, this.y = e, this.z = n, this.w = i, this;
  }
  setScalar(t) {
    return this.x = t, this.y = t, this.z = t, this.w = t, this;
  }
  setX(t) {
    return this.x = t, this;
  }
  setY(t) {
    return this.y = t, this;
  }
  setZ(t) {
    return this.z = t, this;
  }
  setW(t) {
    return this.w = t, this;
  }
  setComponent(t, e) {
    switch (t) {
      case 0:
        this.x = e;
        break;
      case 1:
        this.y = e;
        break;
      case 2:
        this.z = e;
        break;
      case 3:
        this.w = e;
        break;
      default:
        throw new Error("index is out of range: " + t);
    }
    return this;
  }
  getComponent(t) {
    switch (t) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + t);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(t) {
    return this.x = t.x, this.y = t.y, this.z = t.z, this.w = t.w !== void 0 ? t.w : 1, this;
  }
  add(t) {
    return this.x += t.x, this.y += t.y, this.z += t.z, this.w += t.w, this;
  }
  addScalar(t) {
    return this.x += t, this.y += t, this.z += t, this.w += t, this;
  }
  addVectors(t, e) {
    return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this.w = t.w + e.w, this;
  }
  addScaledVector(t, e) {
    return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this.w += t.w * e, this;
  }
  sub(t) {
    return this.x -= t.x, this.y -= t.y, this.z -= t.z, this.w -= t.w, this;
  }
  subScalar(t) {
    return this.x -= t, this.y -= t, this.z -= t, this.w -= t, this;
  }
  subVectors(t, e) {
    return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this.w = t.w - e.w, this;
  }
  multiply(t) {
    return this.x *= t.x, this.y *= t.y, this.z *= t.z, this.w *= t.w, this;
  }
  multiplyScalar(t) {
    return this.x *= t, this.y *= t, this.z *= t, this.w *= t, this;
  }
  applyMatrix4(t) {
    let e = this.x, n = this.y, i = this.z, r2 = this.w, o = t.elements;
    return this.x = o[0] * e + o[4] * n + o[8] * i + o[12] * r2, this.y = o[1] * e + o[5] * n + o[9] * i + o[13] * r2, this.z = o[2] * e + o[6] * n + o[10] * i + o[14] * r2, this.w = o[3] * e + o[7] * n + o[11] * i + o[15] * r2, this;
  }
  divideScalar(t) {
    return this.multiplyScalar(1 / t);
  }
  setAxisAngleFromQuaternion(t) {
    this.w = 2 * Math.acos(t.w);
    let e = Math.sqrt(1 - t.w * t.w);
    return e < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = t.x / e, this.y = t.y / e, this.z = t.z / e), this;
  }
  setAxisAngleFromRotationMatrix(t) {
    let e, n, i, r2, c = t.elements, l = c[0], h = c[4], d = c[8], f = c[1], g = c[5], _ = c[9], v = c[2], m = c[6], p = c[10];
    if (Math.abs(h - f) < 0.01 && Math.abs(d - v) < 0.01 && Math.abs(_ - m) < 0.01) {
      if (Math.abs(h + f) < 0.1 && Math.abs(d + v) < 0.1 && Math.abs(_ + m) < 0.1 && Math.abs(l + g + p - 3) < 0.1) return this.set(1, 0, 0, 0), this;
      e = Math.PI;
      let x = (l + 1) / 2, b = (g + 1) / 2, L = (p + 1) / 2, C = (h + f) / 4, R = (d + v) / 4, D = (_ + m) / 4;
      return x > b && x > L ? x < 0.01 ? (n = 0, i = 0.707106781, r2 = 0.707106781) : (n = Math.sqrt(x), i = C / n, r2 = R / n) : b > L ? b < 0.01 ? (n = 0.707106781, i = 0, r2 = 0.707106781) : (i = Math.sqrt(b), n = C / i, r2 = D / i) : L < 0.01 ? (n = 0.707106781, i = 0.707106781, r2 = 0) : (r2 = Math.sqrt(L), n = R / r2, i = D / r2), this.set(n, i, r2, e), this;
    }
    let w = Math.sqrt((m - _) * (m - _) + (d - v) * (d - v) + (f - h) * (f - h));
    return Math.abs(w) < 1e-3 && (w = 1), this.x = (m - _) / w, this.y = (d - v) / w, this.z = (f - h) / w, this.w = Math.acos((l + g + p - 1) / 2), this;
  }
  min(t) {
    return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this.w = Math.min(this.w, t.w), this;
  }
  max(t) {
    return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this.w = Math.max(this.w, t.w), this;
  }
  clamp(t, e) {
    return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this.z = Math.max(t.z, Math.min(e.z, this.z)), this.w = Math.max(t.w, Math.min(e.w, this.w)), this;
  }
  clampScalar(t, e) {
    return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this.z = Math.max(t, Math.min(e, this.z)), this.w = Math.max(t, Math.min(e, this.w)), this;
  }
  clampLength(t, e) {
    let n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  dot(t) {
    return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(t) {
    return this.normalize().multiplyScalar(t);
  }
  lerp(t, e) {
    return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this.w += (t.w - this.w) * e, this;
  }
  lerpVectors(t, e, n) {
    return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this.z = t.z + (e.z - t.z) * n, this.w = t.w + (e.w - t.w) * n, this;
  }
  equals(t) {
    return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w;
  }
  fromArray(t, e = 0) {
    return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this.w = t[e + 3], this;
  }
  toArray(t = [], e = 0) {
    return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t[e + 3] = this.w, t;
  }
  fromBufferAttribute(t, e) {
    return this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this.w = t.getW(e), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
};
r(Tr, "Vector4");
var $t = Tr;
var Zo = class Zo2 extends Pn {
  constructor(t = 1, e = 1, n = {}) {
    super(), this.isRenderTarget = true, this.width = t, this.height = e, this.depth = 1, this.scissor = new $t(0, 0, t, e), this.scissorTest = false, this.viewport = new $t(0, 0, t, e);
    let i = { width: t, height: e, depth: 1 };
    n = Object.assign({ generateMipmaps: false, internalFormat: null, minFilter: Ce, depthBuffer: true, stencilBuffer: false, depthTexture: null, samples: 0, count: 1 }, n);
    let r2 = new be(i, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.colorSpace);
    r2.flipY = false, r2.generateMipmaps = n.generateMipmaps, r2.internalFormat = n.internalFormat, this.textures = [];
    let o = n.count;
    for (let a = 0; a < o; a++) this.textures[a] = r2.clone(), this.textures[a].isRenderTargetTexture = true;
    this.depthBuffer = n.depthBuffer, this.stencilBuffer = n.stencilBuffer, this.depthTexture = n.depthTexture, this.samples = n.samples;
  }
  get texture() {
    return this.textures[0];
  }
  set texture(t) {
    this.textures[0] = t;
  }
  setSize(t, e, n = 1) {
    if (this.width !== t || this.height !== e || this.depth !== n) {
      this.width = t, this.height = e, this.depth = n;
      for (let i = 0, r2 = this.textures.length; i < r2; i++) this.textures[i].image.width = t, this.textures[i].image.height = e, this.textures[i].image.depth = n;
      this.dispose();
    }
    this.viewport.set(0, 0, t, e), this.scissor.set(0, 0, t, e);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(t) {
    this.width = t.width, this.height = t.height, this.depth = t.depth, this.scissor.copy(t.scissor), this.scissorTest = t.scissorTest, this.viewport.copy(t.viewport), this.textures.length = 0;
    for (let n = 0, i = t.textures.length; n < i; n++) this.textures[n] = t.textures[n].clone(), this.textures[n].isRenderTargetTexture = true;
    let e = Object.assign({}, t.texture.image);
    return this.texture.source = new sr(e), this.depthBuffer = t.depthBuffer, this.stencilBuffer = t.stencilBuffer, t.depthTexture !== null && (this.depthTexture = t.depthTexture.clone()), this.samples = t.samples, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
};
r(Zo, "RenderTarget");
var Xa = Zo;
var Jo = class Jo2 extends Xa {
  constructor(t = 1, e = 1, n = {}) {
    super(t, e, n), this.isWebGLRenderTarget = true;
  }
};
r(Jo, "WebGLRenderTarget");
var fn = Jo;
var $o = class $o2 extends be {
  constructor(t = null, e = 1, n = 1, i = 1) {
    super(null), this.isDataArrayTexture = true, this.image = { data: t, width: e, height: n, depth: i }, this.magFilter = ge, this.minFilter = ge, this.wrapR = Ye, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1;
  }
};
r($o, "DataArrayTexture");
var rr = $o;
var Ko = class Ko2 extends be {
  constructor(t = null, e = 1, n = 1, i = 1) {
    super(null), this.isData3DTexture = true, this.image = { data: t, width: e, height: n, depth: i }, this.magFilter = ge, this.minFilter = ge, this.wrapR = Ye, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1;
  }
};
r(Ko, "Data3DTexture");
var qa = Ko;
var Qo = class Qo2 {
  constructor(t = 0, e = 0, n = 0, i = 1) {
    this.isQuaternion = true, this._x = t, this._y = e, this._z = n, this._w = i;
  }
  static slerpFlat(t, e, n, i, r2, o, a) {
    let c = n[i + 0], l = n[i + 1], h = n[i + 2], d = n[i + 3], f = r2[o + 0], g = r2[o + 1], _ = r2[o + 2], v = r2[o + 3];
    if (a === 0) {
      t[e + 0] = c, t[e + 1] = l, t[e + 2] = h, t[e + 3] = d;
      return;
    }
    if (a === 1) {
      t[e + 0] = f, t[e + 1] = g, t[e + 2] = _, t[e + 3] = v;
      return;
    }
    if (d !== v || c !== f || l !== g || h !== _) {
      let m = 1 - a, p = c * f + l * g + h * _ + d * v, w = p >= 0 ? 1 : -1, x = 1 - p * p;
      if (x > Number.EPSILON) {
        let L = Math.sqrt(x), C = Math.atan2(L, p * w);
        m = Math.sin(m * C) / L, a = Math.sin(a * C) / L;
      }
      let b = a * w;
      if (c = c * m + f * b, l = l * m + g * b, h = h * m + _ * b, d = d * m + v * b, m === 1 - a) {
        let L = 1 / Math.sqrt(c * c + l * l + h * h + d * d);
        c *= L, l *= L, h *= L, d *= L;
      }
    }
    t[e] = c, t[e + 1] = l, t[e + 2] = h, t[e + 3] = d;
  }
  static multiplyQuaternionsFlat(t, e, n, i, r2, o) {
    let a = n[i], c = n[i + 1], l = n[i + 2], h = n[i + 3], d = r2[o], f = r2[o + 1], g = r2[o + 2], _ = r2[o + 3];
    return t[e] = a * _ + h * d + c * g - l * f, t[e + 1] = c * _ + h * f + l * d - a * g, t[e + 2] = l * _ + h * g + a * f - c * d, t[e + 3] = h * _ - a * d - c * f - l * g, t;
  }
  get x() {
    return this._x;
  }
  set x(t) {
    this._x = t, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(t) {
    this._y = t, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(t) {
    this._z = t, this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(t) {
    this._w = t, this._onChangeCallback();
  }
  set(t, e, n, i) {
    return this._x = t, this._y = e, this._z = n, this._w = i, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(t) {
    return this._x = t.x, this._y = t.y, this._z = t.z, this._w = t.w, this._onChangeCallback(), this;
  }
  setFromEuler(t, e = true) {
    let n = t._x, i = t._y, r2 = t._z, o = t._order, a = Math.cos, c = Math.sin, l = a(n / 2), h = a(i / 2), d = a(r2 / 2), f = c(n / 2), g = c(i / 2), _ = c(r2 / 2);
    switch (o) {
      case "XYZ":
        this._x = f * h * d + l * g * _, this._y = l * g * d - f * h * _, this._z = l * h * _ + f * g * d, this._w = l * h * d - f * g * _;
        break;
      case "YXZ":
        this._x = f * h * d + l * g * _, this._y = l * g * d - f * h * _, this._z = l * h * _ - f * g * d, this._w = l * h * d + f * g * _;
        break;
      case "ZXY":
        this._x = f * h * d - l * g * _, this._y = l * g * d + f * h * _, this._z = l * h * _ + f * g * d, this._w = l * h * d - f * g * _;
        break;
      case "ZYX":
        this._x = f * h * d - l * g * _, this._y = l * g * d + f * h * _, this._z = l * h * _ - f * g * d, this._w = l * h * d + f * g * _;
        break;
      case "YZX":
        this._x = f * h * d + l * g * _, this._y = l * g * d + f * h * _, this._z = l * h * _ - f * g * d, this._w = l * h * d - f * g * _;
        break;
      case "XZY":
        this._x = f * h * d - l * g * _, this._y = l * g * d - f * h * _, this._z = l * h * _ + f * g * d, this._w = l * h * d + f * g * _;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + o);
    }
    return e === true && this._onChangeCallback(), this;
  }
  setFromAxisAngle(t, e) {
    let n = e / 2, i = Math.sin(n);
    return this._x = t.x * i, this._y = t.y * i, this._z = t.z * i, this._w = Math.cos(n), this._onChangeCallback(), this;
  }
  setFromRotationMatrix(t) {
    let e = t.elements, n = e[0], i = e[4], r2 = e[8], o = e[1], a = e[5], c = e[9], l = e[2], h = e[6], d = e[10], f = n + a + d;
    if (f > 0) {
      let g = 0.5 / Math.sqrt(f + 1);
      this._w = 0.25 / g, this._x = (h - c) * g, this._y = (r2 - l) * g, this._z = (o - i) * g;
    } else if (n > a && n > d) {
      let g = 2 * Math.sqrt(1 + n - a - d);
      this._w = (h - c) / g, this._x = 0.25 * g, this._y = (i + o) / g, this._z = (r2 + l) / g;
    } else if (a > d) {
      let g = 2 * Math.sqrt(1 + a - n - d);
      this._w = (r2 - l) / g, this._x = (i + o) / g, this._y = 0.25 * g, this._z = (c + h) / g;
    } else {
      let g = 2 * Math.sqrt(1 + d - n - a);
      this._w = (o - i) / g, this._x = (r2 + l) / g, this._y = (c + h) / g, this._z = 0.25 * g;
    }
    return this._onChangeCallback(), this;
  }
  setFromUnitVectors(t, e) {
    let n = t.dot(e) + 1;
    return n < Number.EPSILON ? (n = 0, Math.abs(t.x) > Math.abs(t.z) ? (this._x = -t.y, this._y = t.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -t.z, this._z = t.y, this._w = n)) : (this._x = t.y * e.z - t.z * e.y, this._y = t.z * e.x - t.x * e.z, this._z = t.x * e.y - t.y * e.x, this._w = n), this.normalize();
  }
  angleTo(t) {
    return 2 * Math.acos(Math.abs(pe(this.dot(t), -1, 1)));
  }
  rotateTowards(t, e) {
    let n = this.angleTo(t);
    if (n === 0) return this;
    let i = Math.min(1, e / n);
    return this.slerp(t, i), this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  dot(t) {
    return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let t = this.length();
    return t === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (t = 1 / t, this._x = this._x * t, this._y = this._y * t, this._z = this._z * t, this._w = this._w * t), this._onChangeCallback(), this;
  }
  multiply(t) {
    return this.multiplyQuaternions(this, t);
  }
  premultiply(t) {
    return this.multiplyQuaternions(t, this);
  }
  multiplyQuaternions(t, e) {
    let n = t._x, i = t._y, r2 = t._z, o = t._w, a = e._x, c = e._y, l = e._z, h = e._w;
    return this._x = n * h + o * a + i * l - r2 * c, this._y = i * h + o * c + r2 * a - n * l, this._z = r2 * h + o * l + n * c - i * a, this._w = o * h - n * a - i * c - r2 * l, this._onChangeCallback(), this;
  }
  slerp(t, e) {
    if (e === 0) return this;
    if (e === 1) return this.copy(t);
    let n = this._x, i = this._y, r2 = this._z, o = this._w, a = o * t._w + n * t._x + i * t._y + r2 * t._z;
    if (a < 0 ? (this._w = -t._w, this._x = -t._x, this._y = -t._y, this._z = -t._z, a = -a) : this.copy(t), a >= 1) return this._w = o, this._x = n, this._y = i, this._z = r2, this;
    let c = 1 - a * a;
    if (c <= Number.EPSILON) {
      let g = 1 - e;
      return this._w = g * o + e * this._w, this._x = g * n + e * this._x, this._y = g * i + e * this._y, this._z = g * r2 + e * this._z, this.normalize(), this;
    }
    let l = Math.sqrt(c), h = Math.atan2(l, a), d = Math.sin((1 - e) * h) / l, f = Math.sin(e * h) / l;
    return this._w = o * d + this._w * f, this._x = n * d + this._x * f, this._y = i * d + this._y * f, this._z = r2 * d + this._z * f, this._onChangeCallback(), this;
  }
  slerpQuaternions(t, e, n) {
    return this.copy(t).slerp(e, n);
  }
  random() {
    let t = 2 * Math.PI * Math.random(), e = 2 * Math.PI * Math.random(), n = Math.random(), i = Math.sqrt(1 - n), r2 = Math.sqrt(n);
    return this.set(i * Math.sin(t), i * Math.cos(t), r2 * Math.sin(e), r2 * Math.cos(e));
  }
  equals(t) {
    return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w;
  }
  fromArray(t, e = 0) {
    return this._x = t[e], this._y = t[e + 1], this._z = t[e + 2], this._w = t[e + 3], this._onChangeCallback(), this;
  }
  toArray(t = [], e = 0) {
    return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._w, t;
  }
  fromBufferAttribute(t, e) {
    return this._x = t.getX(e), this._y = t.getY(e), this._z = t.getZ(e), this._w = t.getW(e), this._onChangeCallback(), this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(t) {
    return this._onChangeCallback = t, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
};
r(Qo, "Quaternion");
var In = Qo;
var Rr = class Rr2 {
  constructor(t = 0, e = 0, n = 0) {
    Rr2.prototype.isVector3 = true, this.x = t, this.y = e, this.z = n;
  }
  set(t, e, n) {
    return n === void 0 && (n = this.z), this.x = t, this.y = e, this.z = n, this;
  }
  setScalar(t) {
    return this.x = t, this.y = t, this.z = t, this;
  }
  setX(t) {
    return this.x = t, this;
  }
  setY(t) {
    return this.y = t, this;
  }
  setZ(t) {
    return this.z = t, this;
  }
  setComponent(t, e) {
    switch (t) {
      case 0:
        this.x = e;
        break;
      case 1:
        this.y = e;
        break;
      case 2:
        this.z = e;
        break;
      default:
        throw new Error("index is out of range: " + t);
    }
    return this;
  }
  getComponent(t) {
    switch (t) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + t);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(t) {
    return this.x = t.x, this.y = t.y, this.z = t.z, this;
  }
  add(t) {
    return this.x += t.x, this.y += t.y, this.z += t.z, this;
  }
  addScalar(t) {
    return this.x += t, this.y += t, this.z += t, this;
  }
  addVectors(t, e) {
    return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this;
  }
  addScaledVector(t, e) {
    return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this;
  }
  sub(t) {
    return this.x -= t.x, this.y -= t.y, this.z -= t.z, this;
  }
  subScalar(t) {
    return this.x -= t, this.y -= t, this.z -= t, this;
  }
  subVectors(t, e) {
    return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this;
  }
  multiply(t) {
    return this.x *= t.x, this.y *= t.y, this.z *= t.z, this;
  }
  multiplyScalar(t) {
    return this.x *= t, this.y *= t, this.z *= t, this;
  }
  multiplyVectors(t, e) {
    return this.x = t.x * e.x, this.y = t.y * e.y, this.z = t.z * e.z, this;
  }
  applyEuler(t) {
    return this.applyQuaternion(qh.setFromEuler(t));
  }
  applyAxisAngle(t, e) {
    return this.applyQuaternion(qh.setFromAxisAngle(t, e));
  }
  applyMatrix3(t) {
    let e = this.x, n = this.y, i = this.z, r2 = t.elements;
    return this.x = r2[0] * e + r2[3] * n + r2[6] * i, this.y = r2[1] * e + r2[4] * n + r2[7] * i, this.z = r2[2] * e + r2[5] * n + r2[8] * i, this;
  }
  applyNormalMatrix(t) {
    return this.applyMatrix3(t).normalize();
  }
  applyMatrix4(t) {
    let e = this.x, n = this.y, i = this.z, r2 = t.elements, o = 1 / (r2[3] * e + r2[7] * n + r2[11] * i + r2[15]);
    return this.x = (r2[0] * e + r2[4] * n + r2[8] * i + r2[12]) * o, this.y = (r2[1] * e + r2[5] * n + r2[9] * i + r2[13]) * o, this.z = (r2[2] * e + r2[6] * n + r2[10] * i + r2[14]) * o, this;
  }
  applyQuaternion(t) {
    let e = this.x, n = this.y, i = this.z, r2 = t.x, o = t.y, a = t.z, c = t.w, l = 2 * (o * i - a * n), h = 2 * (a * e - r2 * i), d = 2 * (r2 * n - o * e);
    return this.x = e + c * l + o * d - a * h, this.y = n + c * h + a * l - r2 * d, this.z = i + c * d + r2 * h - o * l, this;
  }
  project(t) {
    return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix);
  }
  unproject(t) {
    return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld);
  }
  transformDirection(t) {
    let e = this.x, n = this.y, i = this.z, r2 = t.elements;
    return this.x = r2[0] * e + r2[4] * n + r2[8] * i, this.y = r2[1] * e + r2[5] * n + r2[9] * i, this.z = r2[2] * e + r2[6] * n + r2[10] * i, this.normalize();
  }
  divide(t) {
    return this.x /= t.x, this.y /= t.y, this.z /= t.z, this;
  }
  divideScalar(t) {
    return this.multiplyScalar(1 / t);
  }
  min(t) {
    return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this;
  }
  max(t) {
    return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this;
  }
  clamp(t, e) {
    return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this.z = Math.max(t.z, Math.min(e.z, this.z)), this;
  }
  clampScalar(t, e) {
    return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this.z = Math.max(t, Math.min(e, this.z)), this;
  }
  clampLength(t, e) {
    let n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  dot(t) {
    return this.x * t.x + this.y * t.y + this.z * t.z;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(t) {
    return this.normalize().multiplyScalar(t);
  }
  lerp(t, e) {
    return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this;
  }
  lerpVectors(t, e, n) {
    return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this.z = t.z + (e.z - t.z) * n, this;
  }
  cross(t) {
    return this.crossVectors(this, t);
  }
  crossVectors(t, e) {
    let n = t.x, i = t.y, r2 = t.z, o = e.x, a = e.y, c = e.z;
    return this.x = i * c - r2 * a, this.y = r2 * o - n * c, this.z = n * a - i * o, this;
  }
  projectOnVector(t) {
    let e = t.lengthSq();
    if (e === 0) return this.set(0, 0, 0);
    let n = t.dot(this) / e;
    return this.copy(t).multiplyScalar(n);
  }
  projectOnPlane(t) {
    return sa.copy(this).projectOnVector(t), this.sub(sa);
  }
  reflect(t) {
    return this.sub(sa.copy(t).multiplyScalar(2 * this.dot(t)));
  }
  angleTo(t) {
    let e = Math.sqrt(this.lengthSq() * t.lengthSq());
    if (e === 0) return Math.PI / 2;
    let n = this.dot(t) / e;
    return Math.acos(pe(n, -1, 1));
  }
  distanceTo(t) {
    return Math.sqrt(this.distanceToSquared(t));
  }
  distanceToSquared(t) {
    let e = this.x - t.x, n = this.y - t.y, i = this.z - t.z;
    return e * e + n * n + i * i;
  }
  manhattanDistanceTo(t) {
    return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z);
  }
  setFromSpherical(t) {
    return this.setFromSphericalCoords(t.radius, t.phi, t.theta);
  }
  setFromSphericalCoords(t, e, n) {
    let i = Math.sin(e) * t;
    return this.x = i * Math.sin(n), this.y = Math.cos(e) * t, this.z = i * Math.cos(n), this;
  }
  setFromCylindrical(t) {
    return this.setFromCylindricalCoords(t.radius, t.theta, t.y);
  }
  setFromCylindricalCoords(t, e, n) {
    return this.x = t * Math.sin(e), this.y = n, this.z = t * Math.cos(e), this;
  }
  setFromMatrixPosition(t) {
    let e = t.elements;
    return this.x = e[12], this.y = e[13], this.z = e[14], this;
  }
  setFromMatrixScale(t) {
    let e = this.setFromMatrixColumn(t, 0).length(), n = this.setFromMatrixColumn(t, 1).length(), i = this.setFromMatrixColumn(t, 2).length();
    return this.x = e, this.y = n, this.z = i, this;
  }
  setFromMatrixColumn(t, e) {
    return this.fromArray(t.elements, e * 4);
  }
  setFromMatrix3Column(t, e) {
    return this.fromArray(t.elements, e * 3);
  }
  setFromEuler(t) {
    return this.x = t._x, this.y = t._y, this.z = t._z, this;
  }
  setFromColor(t) {
    return this.x = t.r, this.y = t.g, this.z = t.b, this;
  }
  equals(t) {
    return t.x === this.x && t.y === this.y && t.z === this.z;
  }
  fromArray(t, e = 0) {
    return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this;
  }
  toArray(t = [], e = 0) {
    return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t;
  }
  fromBufferAttribute(t, e) {
    return this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  randomDirection() {
    let t = Math.random() * Math.PI * 2, e = Math.random() * 2 - 1, n = Math.sqrt(1 - e * e);
    return this.x = n * Math.cos(t), this.y = e, this.z = n * Math.sin(t), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
};
r(Rr, "Vector3");
var P = Rr;
var sa = new P();
var qh = new In();
var jo = class jo2 {
  constructor(t = new P(1 / 0, 1 / 0, 1 / 0), e = new P(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = true, this.min = t, this.max = e;
  }
  set(t, e) {
    return this.min.copy(t), this.max.copy(e), this;
  }
  setFromArray(t) {
    this.makeEmpty();
    for (let e = 0, n = t.length; e < n; e += 3) this.expandByPoint(We.fromArray(t, e));
    return this;
  }
  setFromBufferAttribute(t) {
    this.makeEmpty();
    for (let e = 0, n = t.count; e < n; e++) this.expandByPoint(We.fromBufferAttribute(t, e));
    return this;
  }
  setFromPoints(t) {
    this.makeEmpty();
    for (let e = 0, n = t.length; e < n; e++) this.expandByPoint(t[e]);
    return this;
  }
  setFromCenterAndSize(t, e) {
    let n = We.copy(e).multiplyScalar(0.5);
    return this.min.copy(t).sub(n), this.max.copy(t).add(n), this;
  }
  setFromObject(t, e = false) {
    return this.makeEmpty(), this.expandByObject(t, e);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(t) {
    return this.min.copy(t.min), this.max.copy(t.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(t) {
    return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(t) {
    return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min);
  }
  expandByPoint(t) {
    return this.min.min(t), this.max.max(t), this;
  }
  expandByVector(t) {
    return this.min.sub(t), this.max.add(t), this;
  }
  expandByScalar(t) {
    return this.min.addScalar(-t), this.max.addScalar(t), this;
  }
  expandByObject(t, e = false) {
    t.updateWorldMatrix(false, false);
    let n = t.geometry;
    if (n !== void 0) {
      let r2 = n.getAttribute("position");
      if (e === true && r2 !== void 0 && t.isInstancedMesh !== true) for (let o = 0, a = r2.count; o < a; o++) t.isMesh === true ? t.getVertexPosition(o, We) : We.fromBufferAttribute(r2, o), We.applyMatrix4(t.matrixWorld), this.expandByPoint(We);
      else t.boundingBox !== void 0 ? (t.boundingBox === null && t.computeBoundingBox(), ms.copy(t.boundingBox)) : (n.boundingBox === null && n.computeBoundingBox(), ms.copy(n.boundingBox)), ms.applyMatrix4(t.matrixWorld), this.union(ms);
    }
    let i = t.children;
    for (let r2 = 0, o = i.length; r2 < o; r2++) this.expandByObject(i[r2], e);
    return this;
  }
  containsPoint(t) {
    return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z);
  }
  containsBox(t) {
    return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z;
  }
  getParameter(t, e) {
    return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z));
  }
  intersectsBox(t) {
    return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z);
  }
  intersectsSphere(t) {
    return this.clampPoint(t.center, We), We.distanceToSquared(t.center) <= t.radius * t.radius;
  }
  intersectsPlane(t) {
    let e, n;
    return t.normal.x > 0 ? (e = t.normal.x * this.min.x, n = t.normal.x * this.max.x) : (e = t.normal.x * this.max.x, n = t.normal.x * this.min.x), t.normal.y > 0 ? (e += t.normal.y * this.min.y, n += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y, n += t.normal.y * this.min.y), t.normal.z > 0 ? (e += t.normal.z * this.min.z, n += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z, n += t.normal.z * this.min.z), e <= -t.constant && n >= -t.constant;
  }
  intersectsTriangle(t) {
    if (this.isEmpty()) return false;
    this.getCenter(Hi), gs.subVectors(this.max, Hi), ii.subVectors(t.a, Hi), si.subVectors(t.b, Hi), ri.subVectors(t.c, Hi), pn.subVectors(si, ii), mn.subVectors(ri, si), Fn.subVectors(ii, ri);
    let e = [0, -pn.z, pn.y, 0, -mn.z, mn.y, 0, -Fn.z, Fn.y, pn.z, 0, -pn.x, mn.z, 0, -mn.x, Fn.z, 0, -Fn.x, -pn.y, pn.x, 0, -mn.y, mn.x, 0, -Fn.y, Fn.x, 0];
    return !ra(e, ii, si, ri, gs) || (e = [1, 0, 0, 0, 1, 0, 0, 0, 1], !ra(e, ii, si, ri, gs)) ? false : (_s.crossVectors(pn, mn), e = [_s.x, _s.y, _s.z], ra(e, ii, si, ri, gs));
  }
  clampPoint(t, e) {
    return e.copy(t).clamp(this.min, this.max);
  }
  distanceToPoint(t) {
    return this.clampPoint(t, We).distanceTo(t);
  }
  getBoundingSphere(t) {
    return this.isEmpty() ? t.makeEmpty() : (this.getCenter(t.center), t.radius = this.getSize(We).length() * 0.5), t;
  }
  intersect(t) {
    return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(t) {
    return this.min.min(t.min), this.max.max(t.max), this;
  }
  applyMatrix4(t) {
    return this.isEmpty() ? this : (nn[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t), nn[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t), nn[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t), nn[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t), nn[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t), nn[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t), nn[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t), nn[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t), this.setFromPoints(nn), this);
  }
  translate(t) {
    return this.min.add(t), this.max.add(t), this;
  }
  equals(t) {
    return t.min.equals(this.min) && t.max.equals(this.max);
  }
};
r(jo, "Box3");
var Ie = jo;
var nn = [new P(), new P(), new P(), new P(), new P(), new P(), new P(), new P()];
var We = new P();
var ms = new Ie();
var ii = new P();
var si = new P();
var ri = new P();
var pn = new P();
var mn = new P();
var Fn = new P();
var Hi = new P();
var gs = new P();
var _s = new P();
var Bn = new P();
function ra(s, t, e, n, i) {
  for (let r2 = 0, o = s.length - 3; r2 <= o; r2 += 3) {
    Bn.fromArray(s, r2);
    let a = i.x * Math.abs(Bn.x) + i.y * Math.abs(Bn.y) + i.z * Math.abs(Bn.z), c = t.dot(Bn), l = e.dot(Bn), h = n.dot(Bn);
    if (Math.max(-Math.max(c, l, h), Math.min(c, l, h)) > a) return false;
  }
  return true;
}
r(ra, "satForAxes");
var Tp = new Ie();
var Gi = new P();
var aa = new P();
var tc = class tc2 {
  constructor(t = new P(), e = -1) {
    this.isSphere = true, this.center = t, this.radius = e;
  }
  set(t, e) {
    return this.center.copy(t), this.radius = e, this;
  }
  setFromPoints(t, e) {
    let n = this.center;
    e !== void 0 ? n.copy(e) : Tp.setFromPoints(t).getCenter(n);
    let i = 0;
    for (let r2 = 0, o = t.length; r2 < o; r2++) i = Math.max(i, n.distanceToSquared(t[r2]));
    return this.radius = Math.sqrt(i), this;
  }
  copy(t) {
    return this.center.copy(t.center), this.radius = t.radius, this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  containsPoint(t) {
    return t.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(t) {
    return t.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(t) {
    let e = this.radius + t.radius;
    return t.center.distanceToSquared(this.center) <= e * e;
  }
  intersectsBox(t) {
    return t.intersectsSphere(this);
  }
  intersectsPlane(t) {
    return Math.abs(t.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(t, e) {
    let n = this.center.distanceToSquared(t);
    return e.copy(t), n > this.radius * this.radius && (e.sub(this.center).normalize(), e.multiplyScalar(this.radius).add(this.center)), e;
  }
  getBoundingBox(t) {
    return this.isEmpty() ? (t.makeEmpty(), t) : (t.set(this.center, this.center), t.expandByScalar(this.radius), t);
  }
  applyMatrix4(t) {
    return this.center.applyMatrix4(t), this.radius = this.radius * t.getMaxScaleOnAxis(), this;
  }
  translate(t) {
    return this.center.add(t), this;
  }
  expandByPoint(t) {
    if (this.isEmpty()) return this.center.copy(t), this.radius = 0, this;
    Gi.subVectors(t, this.center);
    let e = Gi.lengthSq();
    if (e > this.radius * this.radius) {
      let n = Math.sqrt(e), i = (n - this.radius) * 0.5;
      this.center.addScaledVector(Gi, i / n), this.radius += i;
    }
    return this;
  }
  union(t) {
    return t.isEmpty() ? this : this.isEmpty() ? (this.copy(t), this) : (this.center.equals(t.center) === true ? this.radius = Math.max(this.radius, t.radius) : (aa.subVectors(t.center, this.center).setLength(t.radius), this.expandByPoint(Gi.copy(t.center).add(aa)), this.expandByPoint(Gi.copy(t.center).sub(aa))), this);
  }
  equals(t) {
    return t.center.equals(this.center) && t.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
r(tc, "Sphere");
var Re = tc;
var sn = new P();
var oa = new P();
var xs = new P();
var gn = new P();
var ca = new P();
var vs = new P();
var la = new P();
var ec = class ec2 {
  constructor(t = new P(), e = new P(0, 0, -1)) {
    this.origin = t, this.direction = e;
  }
  set(t, e) {
    return this.origin.copy(t), this.direction.copy(e), this;
  }
  copy(t) {
    return this.origin.copy(t.origin), this.direction.copy(t.direction), this;
  }
  at(t, e) {
    return e.copy(this.origin).addScaledVector(this.direction, t);
  }
  lookAt(t) {
    return this.direction.copy(t).sub(this.origin).normalize(), this;
  }
  recast(t) {
    return this.origin.copy(this.at(t, sn)), this;
  }
  closestPointToPoint(t, e) {
    e.subVectors(t, this.origin);
    let n = e.dot(this.direction);
    return n < 0 ? e.copy(this.origin) : e.copy(this.origin).addScaledVector(this.direction, n);
  }
  distanceToPoint(t) {
    return Math.sqrt(this.distanceSqToPoint(t));
  }
  distanceSqToPoint(t) {
    let e = sn.subVectors(t, this.origin).dot(this.direction);
    return e < 0 ? this.origin.distanceToSquared(t) : (sn.copy(this.origin).addScaledVector(this.direction, e), sn.distanceToSquared(t));
  }
  distanceSqToSegment(t, e, n, i) {
    oa.copy(t).add(e).multiplyScalar(0.5), xs.copy(e).sub(t).normalize(), gn.copy(this.origin).sub(oa);
    let r2 = t.distanceTo(e) * 0.5, o = -this.direction.dot(xs), a = gn.dot(this.direction), c = -gn.dot(xs), l = gn.lengthSq(), h = Math.abs(1 - o * o), d, f, g, _;
    if (h > 0) if (d = o * c - a, f = o * a - c, _ = r2 * h, d >= 0) if (f >= -_) if (f <= _) {
      let v = 1 / h;
      d *= v, f *= v, g = d * (d + o * f + 2 * a) + f * (o * d + f + 2 * c) + l;
    } else f = r2, d = Math.max(0, -(o * f + a)), g = -d * d + f * (f + 2 * c) + l;
    else f = -r2, d = Math.max(0, -(o * f + a)), g = -d * d + f * (f + 2 * c) + l;
    else f <= -_ ? (d = Math.max(0, -(-o * r2 + a)), f = d > 0 ? -r2 : Math.min(Math.max(-r2, -c), r2), g = -d * d + f * (f + 2 * c) + l) : f <= _ ? (d = 0, f = Math.min(Math.max(-r2, -c), r2), g = f * (f + 2 * c) + l) : (d = Math.max(0, -(o * r2 + a)), f = d > 0 ? r2 : Math.min(Math.max(-r2, -c), r2), g = -d * d + f * (f + 2 * c) + l);
    else f = o > 0 ? -r2 : r2, d = Math.max(0, -(o * f + a)), g = -d * d + f * (f + 2 * c) + l;
    return n && n.copy(this.origin).addScaledVector(this.direction, d), i && i.copy(oa).addScaledVector(xs, f), g;
  }
  intersectSphere(t, e) {
    sn.subVectors(t.center, this.origin);
    let n = sn.dot(this.direction), i = sn.dot(sn) - n * n, r2 = t.radius * t.radius;
    if (i > r2) return null;
    let o = Math.sqrt(r2 - i), a = n - o, c = n + o;
    return c < 0 ? null : a < 0 ? this.at(c, e) : this.at(a, e);
  }
  intersectsSphere(t) {
    return this.distanceSqToPoint(t.center) <= t.radius * t.radius;
  }
  distanceToPlane(t) {
    let e = t.normal.dot(this.direction);
    if (e === 0) return t.distanceToPoint(this.origin) === 0 ? 0 : null;
    let n = -(this.origin.dot(t.normal) + t.constant) / e;
    return n >= 0 ? n : null;
  }
  intersectPlane(t, e) {
    let n = this.distanceToPlane(t);
    return n === null ? null : this.at(n, e);
  }
  intersectsPlane(t) {
    let e = t.distanceToPoint(this.origin);
    return e === 0 || t.normal.dot(this.direction) * e < 0;
  }
  intersectBox(t, e) {
    let n, i, r2, o, a, c, l = 1 / this.direction.x, h = 1 / this.direction.y, d = 1 / this.direction.z, f = this.origin;
    return l >= 0 ? (n = (t.min.x - f.x) * l, i = (t.max.x - f.x) * l) : (n = (t.max.x - f.x) * l, i = (t.min.x - f.x) * l), h >= 0 ? (r2 = (t.min.y - f.y) * h, o = (t.max.y - f.y) * h) : (r2 = (t.max.y - f.y) * h, o = (t.min.y - f.y) * h), n > o || r2 > i || ((r2 > n || isNaN(n)) && (n = r2), (o < i || isNaN(i)) && (i = o), d >= 0 ? (a = (t.min.z - f.z) * d, c = (t.max.z - f.z) * d) : (a = (t.max.z - f.z) * d, c = (t.min.z - f.z) * d), n > c || a > i) || ((a > n || n !== n) && (n = a), (c < i || i !== i) && (i = c), i < 0) ? null : this.at(n >= 0 ? n : i, e);
  }
  intersectsBox(t) {
    return this.intersectBox(t, sn) !== null;
  }
  intersectTriangle(t, e, n, i, r2) {
    ca.subVectors(e, t), vs.subVectors(n, t), la.crossVectors(ca, vs);
    let o = this.direction.dot(la), a;
    if (o > 0) {
      if (i) return null;
      a = 1;
    } else if (o < 0) a = -1, o = -o;
    else return null;
    gn.subVectors(this.origin, t);
    let c = a * this.direction.dot(vs.crossVectors(gn, vs));
    if (c < 0) return null;
    let l = a * this.direction.dot(ca.cross(gn));
    if (l < 0 || c + l > o) return null;
    let h = -a * gn.dot(la);
    return h < 0 ? null : this.at(h / o, r2);
  }
  applyMatrix4(t) {
    return this.origin.applyMatrix4(t), this.direction.transformDirection(t), this;
  }
  equals(t) {
    return t.origin.equals(this.origin) && t.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
r(ec, "Ray");
var Kn = ec;
var es = class es2 {
  constructor(t, e, n, i, r2, o, a, c, l, h, d, f, g, _, v, m) {
    es2.prototype.isMatrix4 = true, this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], t !== void 0 && this.set(t, e, n, i, r2, o, a, c, l, h, d, f, g, _, v, m);
  }
  set(t, e, n, i, r2, o, a, c, l, h, d, f, g, _, v, m) {
    let p = this.elements;
    return p[0] = t, p[4] = e, p[8] = n, p[12] = i, p[1] = r2, p[5] = o, p[9] = a, p[13] = c, p[2] = l, p[6] = h, p[10] = d, p[14] = f, p[3] = g, p[7] = _, p[11] = v, p[15] = m, this;
  }
  identity() {
    return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
  }
  clone() {
    return new es2().fromArray(this.elements);
  }
  copy(t) {
    let e = this.elements, n = t.elements;
    return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], e[9] = n[9], e[10] = n[10], e[11] = n[11], e[12] = n[12], e[13] = n[13], e[14] = n[14], e[15] = n[15], this;
  }
  copyPosition(t) {
    let e = this.elements, n = t.elements;
    return e[12] = n[12], e[13] = n[13], e[14] = n[14], this;
  }
  setFromMatrix3(t) {
    let e = t.elements;
    return this.set(e[0], e[3], e[6], 0, e[1], e[4], e[7], 0, e[2], e[5], e[8], 0, 0, 0, 0, 1), this;
  }
  extractBasis(t, e, n) {
    return t.setFromMatrixColumn(this, 0), e.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
  }
  makeBasis(t, e, n) {
    return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1), this;
  }
  extractRotation(t) {
    let e = this.elements, n = t.elements, i = 1 / ai.setFromMatrixColumn(t, 0).length(), r2 = 1 / ai.setFromMatrixColumn(t, 1).length(), o = 1 / ai.setFromMatrixColumn(t, 2).length();
    return e[0] = n[0] * i, e[1] = n[1] * i, e[2] = n[2] * i, e[3] = 0, e[4] = n[4] * r2, e[5] = n[5] * r2, e[6] = n[6] * r2, e[7] = 0, e[8] = n[8] * o, e[9] = n[9] * o, e[10] = n[10] * o, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this;
  }
  makeRotationFromEuler(t) {
    let e = this.elements, n = t.x, i = t.y, r2 = t.z, o = Math.cos(n), a = Math.sin(n), c = Math.cos(i), l = Math.sin(i), h = Math.cos(r2), d = Math.sin(r2);
    if (t.order === "XYZ") {
      let f = o * h, g = o * d, _ = a * h, v = a * d;
      e[0] = c * h, e[4] = -c * d, e[8] = l, e[1] = g + _ * l, e[5] = f - v * l, e[9] = -a * c, e[2] = v - f * l, e[6] = _ + g * l, e[10] = o * c;
    } else if (t.order === "YXZ") {
      let f = c * h, g = c * d, _ = l * h, v = l * d;
      e[0] = f + v * a, e[4] = _ * a - g, e[8] = o * l, e[1] = o * d, e[5] = o * h, e[9] = -a, e[2] = g * a - _, e[6] = v + f * a, e[10] = o * c;
    } else if (t.order === "ZXY") {
      let f = c * h, g = c * d, _ = l * h, v = l * d;
      e[0] = f - v * a, e[4] = -o * d, e[8] = _ + g * a, e[1] = g + _ * a, e[5] = o * h, e[9] = v - f * a, e[2] = -o * l, e[6] = a, e[10] = o * c;
    } else if (t.order === "ZYX") {
      let f = o * h, g = o * d, _ = a * h, v = a * d;
      e[0] = c * h, e[4] = _ * l - g, e[8] = f * l + v, e[1] = c * d, e[5] = v * l + f, e[9] = g * l - _, e[2] = -l, e[6] = a * c, e[10] = o * c;
    } else if (t.order === "YZX") {
      let f = o * c, g = o * l, _ = a * c, v = a * l;
      e[0] = c * h, e[4] = v - f * d, e[8] = _ * d + g, e[1] = d, e[5] = o * h, e[9] = -a * h, e[2] = -l * h, e[6] = g * d + _, e[10] = f - v * d;
    } else if (t.order === "XZY") {
      let f = o * c, g = o * l, _ = a * c, v = a * l;
      e[0] = c * h, e[4] = -d, e[8] = l * h, e[1] = f * d + v, e[5] = o * h, e[9] = g * d - _, e[2] = _ * d - g, e[6] = a * h, e[10] = v * d + f;
    }
    return e[3] = 0, e[7] = 0, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this;
  }
  makeRotationFromQuaternion(t) {
    return this.compose(Rp, t, Cp);
  }
  lookAt(t, e, n) {
    let i = this.elements;
    return De.subVectors(t, e), De.lengthSq() === 0 && (De.z = 1), De.normalize(), _n.crossVectors(n, De), _n.lengthSq() === 0 && (Math.abs(n.z) === 1 ? De.x += 1e-4 : De.z += 1e-4, De.normalize(), _n.crossVectors(n, De)), _n.normalize(), ys.crossVectors(De, _n), i[0] = _n.x, i[4] = ys.x, i[8] = De.x, i[1] = _n.y, i[5] = ys.y, i[9] = De.y, i[2] = _n.z, i[6] = ys.z, i[10] = De.z, this;
  }
  multiply(t) {
    return this.multiplyMatrices(this, t);
  }
  premultiply(t) {
    return this.multiplyMatrices(t, this);
  }
  multiplyMatrices(t, e) {
    let n = t.elements, i = e.elements, r2 = this.elements, o = n[0], a = n[4], c = n[8], l = n[12], h = n[1], d = n[5], f = n[9], g = n[13], _ = n[2], v = n[6], m = n[10], p = n[14], w = n[3], x = n[7], b = n[11], L = n[15], C = i[0], R = i[4], D = i[8], X = i[12], M = i[1], A = i[5], Q = i[9], $ = i[13], I = i[2], G = i[6], k = i[10], J = i[14], q2 = i[3], Y = i[7], it = i[11], nt = i[15];
    return r2[0] = o * C + a * M + c * I + l * q2, r2[4] = o * R + a * A + c * G + l * Y, r2[8] = o * D + a * Q + c * k + l * it, r2[12] = o * X + a * $ + c * J + l * nt, r2[1] = h * C + d * M + f * I + g * q2, r2[5] = h * R + d * A + f * G + g * Y, r2[9] = h * D + d * Q + f * k + g * it, r2[13] = h * X + d * $ + f * J + g * nt, r2[2] = _ * C + v * M + m * I + p * q2, r2[6] = _ * R + v * A + m * G + p * Y, r2[10] = _ * D + v * Q + m * k + p * it, r2[14] = _ * X + v * $ + m * J + p * nt, r2[3] = w * C + x * M + b * I + L * q2, r2[7] = w * R + x * A + b * G + L * Y, r2[11] = w * D + x * Q + b * k + L * it, r2[15] = w * X + x * $ + b * J + L * nt, this;
  }
  multiplyScalar(t) {
    let e = this.elements;
    return e[0] *= t, e[4] *= t, e[8] *= t, e[12] *= t, e[1] *= t, e[5] *= t, e[9] *= t, e[13] *= t, e[2] *= t, e[6] *= t, e[10] *= t, e[14] *= t, e[3] *= t, e[7] *= t, e[11] *= t, e[15] *= t, this;
  }
  determinant() {
    let t = this.elements, e = t[0], n = t[4], i = t[8], r2 = t[12], o = t[1], a = t[5], c = t[9], l = t[13], h = t[2], d = t[6], f = t[10], g = t[14], _ = t[3], v = t[7], m = t[11], p = t[15];
    return _ * (+r2 * c * d - i * l * d - r2 * a * f + n * l * f + i * a * g - n * c * g) + v * (+e * c * g - e * l * f + r2 * o * f - i * o * g + i * l * h - r2 * c * h) + m * (+e * l * d - e * a * g - r2 * o * d + n * o * g + r2 * a * h - n * l * h) + p * (-i * a * h - e * c * d + e * a * f + i * o * d - n * o * f + n * c * h);
  }
  transpose() {
    let t = this.elements, e;
    return e = t[1], t[1] = t[4], t[4] = e, e = t[2], t[2] = t[8], t[8] = e, e = t[6], t[6] = t[9], t[9] = e, e = t[3], t[3] = t[12], t[12] = e, e = t[7], t[7] = t[13], t[13] = e, e = t[11], t[11] = t[14], t[14] = e, this;
  }
  setPosition(t, e, n) {
    let i = this.elements;
    return t.isVector3 ? (i[12] = t.x, i[13] = t.y, i[14] = t.z) : (i[12] = t, i[13] = e, i[14] = n), this;
  }
  invert() {
    let t = this.elements, e = t[0], n = t[1], i = t[2], r2 = t[3], o = t[4], a = t[5], c = t[6], l = t[7], h = t[8], d = t[9], f = t[10], g = t[11], _ = t[12], v = t[13], m = t[14], p = t[15], w = d * m * l - v * f * l + v * c * g - a * m * g - d * c * p + a * f * p, x = _ * f * l - h * m * l - _ * c * g + o * m * g + h * c * p - o * f * p, b = h * v * l - _ * d * l + _ * a * g - o * v * g - h * a * p + o * d * p, L = _ * d * c - h * v * c - _ * a * f + o * v * f + h * a * m - o * d * m, C = e * w + n * x + i * b + r2 * L;
    if (C === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    let R = 1 / C;
    return t[0] = w * R, t[1] = (v * f * r2 - d * m * r2 - v * i * g + n * m * g + d * i * p - n * f * p) * R, t[2] = (a * m * r2 - v * c * r2 + v * i * l - n * m * l - a * i * p + n * c * p) * R, t[3] = (d * c * r2 - a * f * r2 - d * i * l + n * f * l + a * i * g - n * c * g) * R, t[4] = x * R, t[5] = (h * m * r2 - _ * f * r2 + _ * i * g - e * m * g - h * i * p + e * f * p) * R, t[6] = (_ * c * r2 - o * m * r2 - _ * i * l + e * m * l + o * i * p - e * c * p) * R, t[7] = (o * f * r2 - h * c * r2 + h * i * l - e * f * l - o * i * g + e * c * g) * R, t[8] = b * R, t[9] = (_ * d * r2 - h * v * r2 - _ * n * g + e * v * g + h * n * p - e * d * p) * R, t[10] = (o * v * r2 - _ * a * r2 + _ * n * l - e * v * l - o * n * p + e * a * p) * R, t[11] = (h * a * r2 - o * d * r2 - h * n * l + e * d * l + o * n * g - e * a * g) * R, t[12] = L * R, t[13] = (h * v * i - _ * d * i + _ * n * f - e * v * f - h * n * m + e * d * m) * R, t[14] = (_ * a * i - o * v * i - _ * n * c + e * v * c + o * n * m - e * a * m) * R, t[15] = (o * d * i - h * a * i + h * n * c - e * d * c - o * n * f + e * a * f) * R, this;
  }
  scale(t) {
    let e = this.elements, n = t.x, i = t.y, r2 = t.z;
    return e[0] *= n, e[4] *= i, e[8] *= r2, e[1] *= n, e[5] *= i, e[9] *= r2, e[2] *= n, e[6] *= i, e[10] *= r2, e[3] *= n, e[7] *= i, e[11] *= r2, this;
  }
  getMaxScaleOnAxis() {
    let t = this.elements, e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2], n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6], i = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
    return Math.sqrt(Math.max(e, n, i));
  }
  makeTranslation(t, e, n) {
    return t.isVector3 ? this.set(1, 0, 0, t.x, 0, 1, 0, t.y, 0, 0, 1, t.z, 0, 0, 0, 1) : this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1), this;
  }
  makeRotationX(t) {
    let e = Math.cos(t), n = Math.sin(t);
    return this.set(1, 0, 0, 0, 0, e, -n, 0, 0, n, e, 0, 0, 0, 0, 1), this;
  }
  makeRotationY(t) {
    let e = Math.cos(t), n = Math.sin(t);
    return this.set(e, 0, n, 0, 0, 1, 0, 0, -n, 0, e, 0, 0, 0, 0, 1), this;
  }
  makeRotationZ(t) {
    let e = Math.cos(t), n = Math.sin(t);
    return this.set(e, -n, 0, 0, n, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this;
  }
  makeRotationAxis(t, e) {
    let n = Math.cos(e), i = Math.sin(e), r2 = 1 - n, o = t.x, a = t.y, c = t.z, l = r2 * o, h = r2 * a;
    return this.set(l * o + n, l * a - i * c, l * c + i * a, 0, l * a + i * c, h * a + n, h * c - i * o, 0, l * c - i * a, h * c + i * o, r2 * c * c + n, 0, 0, 0, 0, 1), this;
  }
  makeScale(t, e, n) {
    return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this;
  }
  makeShear(t, e, n, i, r2, o) {
    return this.set(1, n, r2, 0, t, 1, o, 0, e, i, 1, 0, 0, 0, 0, 1), this;
  }
  compose(t, e, n) {
    let i = this.elements, r2 = e._x, o = e._y, a = e._z, c = e._w, l = r2 + r2, h = o + o, d = a + a, f = r2 * l, g = r2 * h, _ = r2 * d, v = o * h, m = o * d, p = a * d, w = c * l, x = c * h, b = c * d, L = n.x, C = n.y, R = n.z;
    return i[0] = (1 - (v + p)) * L, i[1] = (g + b) * L, i[2] = (_ - x) * L, i[3] = 0, i[4] = (g - b) * C, i[5] = (1 - (f + p)) * C, i[6] = (m + w) * C, i[7] = 0, i[8] = (_ + x) * R, i[9] = (m - w) * R, i[10] = (1 - (f + v)) * R, i[11] = 0, i[12] = t.x, i[13] = t.y, i[14] = t.z, i[15] = 1, this;
  }
  decompose(t, e, n) {
    let i = this.elements, r2 = ai.set(i[0], i[1], i[2]).length(), o = ai.set(i[4], i[5], i[6]).length(), a = ai.set(i[8], i[9], i[10]).length();
    this.determinant() < 0 && (r2 = -r2), t.x = i[12], t.y = i[13], t.z = i[14], Xe.copy(this);
    let l = 1 / r2, h = 1 / o, d = 1 / a;
    return Xe.elements[0] *= l, Xe.elements[1] *= l, Xe.elements[2] *= l, Xe.elements[4] *= h, Xe.elements[5] *= h, Xe.elements[6] *= h, Xe.elements[8] *= d, Xe.elements[9] *= d, Xe.elements[10] *= d, e.setFromRotationMatrix(Xe), n.x = r2, n.y = o, n.z = a, this;
  }
  makePerspective(t, e, n, i, r2, o, a = dn) {
    let c = this.elements, l = 2 * r2 / (e - t), h = 2 * r2 / (n - i), d = (e + t) / (e - t), f = (n + i) / (n - i), g, _;
    if (a === dn) g = -(o + r2) / (o - r2), _ = -2 * o * r2 / (o - r2);
    else if (a === er) g = -o / (o - r2), _ = -o * r2 / (o - r2);
    else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + a);
    return c[0] = l, c[4] = 0, c[8] = d, c[12] = 0, c[1] = 0, c[5] = h, c[9] = f, c[13] = 0, c[2] = 0, c[6] = 0, c[10] = g, c[14] = _, c[3] = 0, c[7] = 0, c[11] = -1, c[15] = 0, this;
  }
  makeOrthographic(t, e, n, i, r2, o, a = dn) {
    let c = this.elements, l = 1 / (e - t), h = 1 / (n - i), d = 1 / (o - r2), f = (e + t) * l, g = (n + i) * h, _, v;
    if (a === dn) _ = (o + r2) * d, v = -2 * d;
    else if (a === er) _ = r2 * d, v = -1 * d;
    else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + a);
    return c[0] = 2 * l, c[4] = 0, c[8] = 0, c[12] = -f, c[1] = 0, c[5] = 2 * h, c[9] = 0, c[13] = -g, c[2] = 0, c[6] = 0, c[10] = v, c[14] = -_, c[3] = 0, c[7] = 0, c[11] = 0, c[15] = 1, this;
  }
  equals(t) {
    let e = this.elements, n = t.elements;
    for (let i = 0; i < 16; i++) if (e[i] !== n[i]) return false;
    return true;
  }
  fromArray(t, e = 0) {
    for (let n = 0; n < 16; n++) this.elements[n] = t[n + e];
    return this;
  }
  toArray(t = [], e = 0) {
    let n = this.elements;
    return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t[e + 9] = n[9], t[e + 10] = n[10], t[e + 11] = n[11], t[e + 12] = n[12], t[e + 13] = n[13], t[e + 14] = n[14], t[e + 15] = n[15], t;
  }
};
r(es, "Matrix4");
var Ft = es;
var ai = new P();
var Xe = new Ft();
var Rp = new P(0, 0, 0);
var Cp = new P(1, 1, 1);
var _n = new P();
var ys = new P();
var De = new P();
var Yh = new Ft();
var Zh = new In();
var Cr = class Cr2 {
  constructor(t = 0, e = 0, n = 0, i = Cr2.DEFAULT_ORDER) {
    this.isEuler = true, this._x = t, this._y = e, this._z = n, this._order = i;
  }
  get x() {
    return this._x;
  }
  set x(t) {
    this._x = t, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(t) {
    this._y = t, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(t) {
    this._z = t, this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(t) {
    this._order = t, this._onChangeCallback();
  }
  set(t, e, n, i = this._order) {
    return this._x = t, this._y = e, this._z = n, this._order = i, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(t) {
    return this._x = t._x, this._y = t._y, this._z = t._z, this._order = t._order, this._onChangeCallback(), this;
  }
  setFromRotationMatrix(t, e = this._order, n = true) {
    let i = t.elements, r2 = i[0], o = i[4], a = i[8], c = i[1], l = i[5], h = i[9], d = i[2], f = i[6], g = i[10];
    switch (e) {
      case "XYZ":
        this._y = Math.asin(pe(a, -1, 1)), Math.abs(a) < 0.9999999 ? (this._x = Math.atan2(-h, g), this._z = Math.atan2(-o, r2)) : (this._x = Math.atan2(f, l), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-pe(h, -1, 1)), Math.abs(h) < 0.9999999 ? (this._y = Math.atan2(a, g), this._z = Math.atan2(c, l)) : (this._y = Math.atan2(-d, r2), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(pe(f, -1, 1)), Math.abs(f) < 0.9999999 ? (this._y = Math.atan2(-d, g), this._z = Math.atan2(-o, l)) : (this._y = 0, this._z = Math.atan2(c, r2));
        break;
      case "ZYX":
        this._y = Math.asin(-pe(d, -1, 1)), Math.abs(d) < 0.9999999 ? (this._x = Math.atan2(f, g), this._z = Math.atan2(c, r2)) : (this._x = 0, this._z = Math.atan2(-o, l));
        break;
      case "YZX":
        this._z = Math.asin(pe(c, -1, 1)), Math.abs(c) < 0.9999999 ? (this._x = Math.atan2(-h, l), this._y = Math.atan2(-d, r2)) : (this._x = 0, this._y = Math.atan2(a, g));
        break;
      case "XZY":
        this._z = Math.asin(-pe(o, -1, 1)), Math.abs(o) < 0.9999999 ? (this._x = Math.atan2(f, l), this._y = Math.atan2(a, r2)) : (this._x = Math.atan2(-h, g), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + e);
    }
    return this._order = e, n === true && this._onChangeCallback(), this;
  }
  setFromQuaternion(t, e, n) {
    return Yh.makeRotationFromQuaternion(t), this.setFromRotationMatrix(Yh, e, n);
  }
  setFromVector3(t, e = this._order) {
    return this.set(t.x, t.y, t.z, e);
  }
  reorder(t) {
    return Zh.setFromEuler(this), this.setFromQuaternion(Zh, t);
  }
  equals(t) {
    return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order;
  }
  fromArray(t) {
    return this._x = t[0], this._y = t[1], this._z = t[2], t[3] !== void 0 && (this._order = t[3]), this._onChangeCallback(), this;
  }
  toArray(t = [], e = 0) {
    return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._order, t;
  }
  _onChange(t) {
    return this._onChangeCallback = t, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
};
r(Cr, "Euler");
var Je = Cr;
Je.DEFAULT_ORDER = "XYZ";
var nc = class nc2 {
  constructor() {
    this.mask = 1;
  }
  set(t) {
    this.mask = (1 << t | 0) >>> 0;
  }
  enable(t) {
    this.mask |= 1 << t | 0;
  }
  enableAll() {
    this.mask = -1;
  }
  toggle(t) {
    this.mask ^= 1 << t | 0;
  }
  disable(t) {
    this.mask &= ~(1 << t | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(t) {
    return (this.mask & t.mask) !== 0;
  }
  isEnabled(t) {
    return (this.mask & (1 << t | 0)) !== 0;
  }
};
r(nc, "Layers");
var ss = nc;
var Pp = 0;
var Jh = new P();
var oi = new In();
var rn = new Ft();
var Ms = new P();
var Wi = new P();
var Ip = new P();
var Lp = new In();
var $h = new P(1, 0, 0);
var Kh = new P(0, 1, 0);
var Qh = new P(0, 0, 1);
var Up = { type: "added" };
var Dp = { type: "removed" };
var ha = { type: "childadded", child: null };
var ua = { type: "childremoved", child: null };
var Ei = class Ei2 extends Pn {
  constructor() {
    super(), this.isObject3D = true, Object.defineProperty(this, "id", { value: Pp++ }), this.uuid = Ve(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Ei2.DEFAULT_UP.clone();
    let t = new P(), e = new Je(), n = new In(), i = new P(1, 1, 1);
    function r2() {
      n.setFromEuler(e, false);
    }
    r(r2, "onRotationChange");
    function o() {
      e.setFromQuaternion(n, void 0, false);
    }
    r(o, "onQuaternionChange"), e._onChange(r2), n._onChange(o), Object.defineProperties(this, { position: { configurable: true, enumerable: true, value: t }, rotation: { configurable: true, enumerable: true, value: e }, quaternion: { configurable: true, enumerable: true, value: n }, scale: { configurable: true, enumerable: true, value: i }, modelViewMatrix: { value: new Ft() }, normalMatrix: { value: new kt() } }), this.matrix = new Ft(), this.matrixWorld = new Ft(), this.matrixAutoUpdate = Ei2.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldAutoUpdate = Ei2.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.matrixWorldNeedsUpdate = false, this.layers = new ss(), this.visible = true, this.castShadow = false, this.receiveShadow = false, this.frustumCulled = true, this.renderOrder = 0, this.animations = [], this.userData = {};
  }
  onBeforeShadow() {
  }
  onAfterShadow() {
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(t) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(t), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(t) {
    return this.quaternion.premultiply(t), this;
  }
  setRotationFromAxisAngle(t, e) {
    this.quaternion.setFromAxisAngle(t, e);
  }
  setRotationFromEuler(t) {
    this.quaternion.setFromEuler(t, true);
  }
  setRotationFromMatrix(t) {
    this.quaternion.setFromRotationMatrix(t);
  }
  setRotationFromQuaternion(t) {
    this.quaternion.copy(t);
  }
  rotateOnAxis(t, e) {
    return oi.setFromAxisAngle(t, e), this.quaternion.multiply(oi), this;
  }
  rotateOnWorldAxis(t, e) {
    return oi.setFromAxisAngle(t, e), this.quaternion.premultiply(oi), this;
  }
  rotateX(t) {
    return this.rotateOnAxis($h, t);
  }
  rotateY(t) {
    return this.rotateOnAxis(Kh, t);
  }
  rotateZ(t) {
    return this.rotateOnAxis(Qh, t);
  }
  translateOnAxis(t, e) {
    return Jh.copy(t).applyQuaternion(this.quaternion), this.position.add(Jh.multiplyScalar(e)), this;
  }
  translateX(t) {
    return this.translateOnAxis($h, t);
  }
  translateY(t) {
    return this.translateOnAxis(Kh, t);
  }
  translateZ(t) {
    return this.translateOnAxis(Qh, t);
  }
  localToWorld(t) {
    return this.updateWorldMatrix(true, false), t.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(t) {
    return this.updateWorldMatrix(true, false), t.applyMatrix4(rn.copy(this.matrixWorld).invert());
  }
  lookAt(t, e, n) {
    t.isVector3 ? Ms.copy(t) : Ms.set(t, e, n);
    let i = this.parent;
    this.updateWorldMatrix(true, false), Wi.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? rn.lookAt(Wi, Ms, this.up) : rn.lookAt(Ms, Wi, this.up), this.quaternion.setFromRotationMatrix(rn), i && (rn.extractRotation(i.matrixWorld), oi.setFromRotationMatrix(rn), this.quaternion.premultiply(oi.invert()));
  }
  add(t) {
    if (arguments.length > 1) {
      for (let e = 0; e < arguments.length; e++) this.add(arguments[e]);
      return this;
    }
    return t === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t), this) : (t && t.isObject3D ? (t.parent !== null && t.parent.remove(t), t.parent = this, this.children.push(t), t.dispatchEvent(Up), ha.child = t, this.dispatchEvent(ha), ha.child = null) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t), this);
  }
  remove(t) {
    if (arguments.length > 1) {
      for (let n = 0; n < arguments.length; n++) this.remove(arguments[n]);
      return this;
    }
    let e = this.children.indexOf(t);
    return e !== -1 && (t.parent = null, this.children.splice(e, 1), t.dispatchEvent(Dp), ua.child = t, this.dispatchEvent(ua), ua.child = null), this;
  }
  removeFromParent() {
    let t = this.parent;
    return t !== null && t.remove(this), this;
  }
  clear() {
    return this.remove(...this.children);
  }
  attach(t) {
    return this.updateWorldMatrix(true, false), rn.copy(this.matrixWorld).invert(), t.parent !== null && (t.parent.updateWorldMatrix(true, false), rn.multiply(t.parent.matrixWorld)), t.applyMatrix4(rn), this.add(t), t.updateWorldMatrix(false, true), this;
  }
  getObjectById(t) {
    return this.getObjectByProperty("id", t);
  }
  getObjectByName(t) {
    return this.getObjectByProperty("name", t);
  }
  getObjectByProperty(t, e) {
    if (this[t] === e) return this;
    for (let n = 0, i = this.children.length; n < i; n++) {
      let o = this.children[n].getObjectByProperty(t, e);
      if (o !== void 0) return o;
    }
  }
  getObjectsByProperty(t, e, n = []) {
    this[t] === e && n.push(this);
    let i = this.children;
    for (let r2 = 0, o = i.length; r2 < o; r2++) i[r2].getObjectsByProperty(t, e, n);
    return n;
  }
  getWorldPosition(t) {
    return this.updateWorldMatrix(true, false), t.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(t) {
    return this.updateWorldMatrix(true, false), this.matrixWorld.decompose(Wi, t, Ip), t;
  }
  getWorldScale(t) {
    return this.updateWorldMatrix(true, false), this.matrixWorld.decompose(Wi, Lp, t), t;
  }
  getWorldDirection(t) {
    this.updateWorldMatrix(true, false);
    let e = this.matrixWorld.elements;
    return t.set(e[8], e[9], e[10]).normalize();
  }
  raycast() {
  }
  traverse(t) {
    t(this);
    let e = this.children;
    for (let n = 0, i = e.length; n < i; n++) e[n].traverse(t);
  }
  traverseVisible(t) {
    if (this.visible === false) return;
    t(this);
    let e = this.children;
    for (let n = 0, i = e.length; n < i; n++) e[n].traverseVisible(t);
  }
  traverseAncestors(t) {
    let e = this.parent;
    e !== null && (t(e), e.traverseAncestors(t));
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = true;
  }
  updateMatrixWorld(t) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || t) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = false, t = true);
    let e = this.children;
    for (let n = 0, i = e.length; n < i; n++) {
      let r2 = e[n];
      (r2.matrixWorldAutoUpdate === true || t === true) && r2.updateMatrixWorld(t);
    }
  }
  updateWorldMatrix(t, e) {
    let n = this.parent;
    if (t === true && n !== null && n.matrixWorldAutoUpdate === true && n.updateWorldMatrix(true, false), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), e === true) {
      let i = this.children;
      for (let r2 = 0, o = i.length; r2 < o; r2++) {
        let a = i[r2];
        a.matrixWorldAutoUpdate === true && a.updateWorldMatrix(false, true);
      }
    }
  }
  toJSON(t) {
    let e = t === void 0 || typeof t == "string", n = {};
    e && (t = { geometries: {}, materials: {}, textures: {}, images: {}, shapes: {}, skeletons: {}, animations: {}, nodes: {} }, n.metadata = { version: 4.6, type: "Object", generator: "Object3D.toJSON" });
    let i = {};
    i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.castShadow === true && (i.castShadow = true), this.receiveShadow === true && (i.receiveShadow = true), this.visible === false && (i.visible = false), this.frustumCulled === false && (i.frustumCulled = false), this.renderOrder !== 0 && (i.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (i.userData = this.userData), i.layers = this.layers.mask, i.matrix = this.matrix.toArray(), i.up = this.up.toArray(), this.matrixAutoUpdate === false && (i.matrixAutoUpdate = false), this.isInstancedMesh && (i.type = "InstancedMesh", i.count = this.count, i.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (i.instanceColor = this.instanceColor.toJSON())), this.isBatchedMesh && (i.type = "BatchedMesh", i.perObjectFrustumCulled = this.perObjectFrustumCulled, i.sortObjects = this.sortObjects, i.drawRanges = this._drawRanges, i.reservedRanges = this._reservedRanges, i.visibility = this._visibility, i.active = this._active, i.bounds = this._bounds.map((a) => ({ boxInitialized: a.boxInitialized, boxMin: a.box.min.toArray(), boxMax: a.box.max.toArray(), sphereInitialized: a.sphereInitialized, sphereRadius: a.sphere.radius, sphereCenter: a.sphere.center.toArray() })), i.maxGeometryCount = this._maxGeometryCount, i.maxVertexCount = this._maxVertexCount, i.maxIndexCount = this._maxIndexCount, i.geometryInitialized = this._geometryInitialized, i.geometryCount = this._geometryCount, i.matricesTexture = this._matricesTexture.toJSON(t), this.boundingSphere !== null && (i.boundingSphere = { center: i.boundingSphere.center.toArray(), radius: i.boundingSphere.radius }), this.boundingBox !== null && (i.boundingBox = { min: i.boundingBox.min.toArray(), max: i.boundingBox.max.toArray() }));
    function r2(a, c) {
      return a[c.uuid] === void 0 && (a[c.uuid] = c.toJSON(t)), c.uuid;
    }
    if (r(r2, "serialize"), this.isScene) this.background && (this.background.isColor ? i.background = this.background.toJSON() : this.background.isTexture && (i.background = this.background.toJSON(t).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true && (i.environment = this.environment.toJSON(t).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      i.geometry = r2(t.geometries, this.geometry);
      let a = this.geometry.parameters;
      if (a !== void 0 && a.shapes !== void 0) {
        let c = a.shapes;
        if (Array.isArray(c)) for (let l = 0, h = c.length; l < h; l++) {
          let d = c[l];
          r2(t.shapes, d);
        }
        else r2(t.shapes, c);
      }
    }
    if (this.isSkinnedMesh && (i.bindMode = this.bindMode, i.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (r2(t.skeletons, this.skeleton), i.skeleton = this.skeleton.uuid)), this.material !== void 0) if (Array.isArray(this.material)) {
      let a = [];
      for (let c = 0, l = this.material.length; c < l; c++) a.push(r2(t.materials, this.material[c]));
      i.material = a;
    } else i.material = r2(t.materials, this.material);
    if (this.children.length > 0) {
      i.children = [];
      for (let a = 0; a < this.children.length; a++) i.children.push(this.children[a].toJSON(t).object);
    }
    if (this.animations.length > 0) {
      i.animations = [];
      for (let a = 0; a < this.animations.length; a++) {
        let c = this.animations[a];
        i.animations.push(r2(t.animations, c));
      }
    }
    if (e) {
      let a = o(t.geometries), c = o(t.materials), l = o(t.textures), h = o(t.images), d = o(t.shapes), f = o(t.skeletons), g = o(t.animations), _ = o(t.nodes);
      a.length > 0 && (n.geometries = a), c.length > 0 && (n.materials = c), l.length > 0 && (n.textures = l), h.length > 0 && (n.images = h), d.length > 0 && (n.shapes = d), f.length > 0 && (n.skeletons = f), g.length > 0 && (n.animations = g), _.length > 0 && (n.nodes = _);
    }
    return n.object = i, n;
    function o(a) {
      let c = [];
      for (let l in a) {
        let h = a[l];
        delete h.metadata, c.push(h);
      }
      return c;
    }
    r(o, "extractFromCache");
  }
  clone(t) {
    return new this.constructor().copy(this, t);
  }
  copy(t, e = true) {
    if (this.name = t.name, this.up.copy(t.up), this.position.copy(t.position), this.rotation.order = t.rotation.order, this.quaternion.copy(t.quaternion), this.scale.copy(t.scale), this.matrix.copy(t.matrix), this.matrixWorld.copy(t.matrixWorld), this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrixWorldAutoUpdate = t.matrixWorldAutoUpdate, this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate, this.layers.mask = t.layers.mask, this.visible = t.visible, this.castShadow = t.castShadow, this.receiveShadow = t.receiveShadow, this.frustumCulled = t.frustumCulled, this.renderOrder = t.renderOrder, this.animations = t.animations.slice(), this.userData = JSON.parse(JSON.stringify(t.userData)), e === true) for (let n = 0; n < t.children.length; n++) {
      let i = t.children[n];
      this.add(i.clone());
    }
    return this;
  }
};
r(Ei, "Object3D");
var le = Ei;
le.DEFAULT_UP = new P(0, 1, 0);
le.DEFAULT_MATRIX_AUTO_UPDATE = true;
le.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
var qe = new P();
var an = new P();
var da = new P();
var on = new P();
var ci = new P();
var li = new P();
var jh = new P();
var fa = new P();
var pa = new P();
var ma = new P();
var Mn = class Mn2 {
  constructor(t = new P(), e = new P(), n = new P()) {
    this.a = t, this.b = e, this.c = n;
  }
  static getNormal(t, e, n, i) {
    i.subVectors(n, e), qe.subVectors(t, e), i.cross(qe);
    let r2 = i.lengthSq();
    return r2 > 0 ? i.multiplyScalar(1 / Math.sqrt(r2)) : i.set(0, 0, 0);
  }
  static getBarycoord(t, e, n, i, r2) {
    qe.subVectors(i, e), an.subVectors(n, e), da.subVectors(t, e);
    let o = qe.dot(qe), a = qe.dot(an), c = qe.dot(da), l = an.dot(an), h = an.dot(da), d = o * l - a * a;
    if (d === 0) return r2.set(0, 0, 0), null;
    let f = 1 / d, g = (l * c - a * h) * f, _ = (o * h - a * c) * f;
    return r2.set(1 - g - _, _, g);
  }
  static containsPoint(t, e, n, i) {
    return this.getBarycoord(t, e, n, i, on) === null ? false : on.x >= 0 && on.y >= 0 && on.x + on.y <= 1;
  }
  static getInterpolation(t, e, n, i, r2, o, a, c) {
    return this.getBarycoord(t, e, n, i, on) === null ? (c.x = 0, c.y = 0, "z" in c && (c.z = 0), "w" in c && (c.w = 0), null) : (c.setScalar(0), c.addScaledVector(r2, on.x), c.addScaledVector(o, on.y), c.addScaledVector(a, on.z), c);
  }
  static isFrontFacing(t, e, n, i) {
    return qe.subVectors(n, e), an.subVectors(t, e), qe.cross(an).dot(i) < 0;
  }
  set(t, e, n) {
    return this.a.copy(t), this.b.copy(e), this.c.copy(n), this;
  }
  setFromPointsAndIndices(t, e, n, i) {
    return this.a.copy(t[e]), this.b.copy(t[n]), this.c.copy(t[i]), this;
  }
  setFromAttributeAndIndices(t, e, n, i) {
    return this.a.fromBufferAttribute(t, e), this.b.fromBufferAttribute(t, n), this.c.fromBufferAttribute(t, i), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(t) {
    return this.a.copy(t.a), this.b.copy(t.b), this.c.copy(t.c), this;
  }
  getArea() {
    return qe.subVectors(this.c, this.b), an.subVectors(this.a, this.b), qe.cross(an).length() * 0.5;
  }
  getMidpoint(t) {
    return t.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(t) {
    return Mn2.getNormal(this.a, this.b, this.c, t);
  }
  getPlane(t) {
    return t.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(t, e) {
    return Mn2.getBarycoord(t, this.a, this.b, this.c, e);
  }
  getInterpolation(t, e, n, i, r2) {
    return Mn2.getInterpolation(t, this.a, this.b, this.c, e, n, i, r2);
  }
  containsPoint(t) {
    return Mn2.containsPoint(t, this.a, this.b, this.c);
  }
  isFrontFacing(t) {
    return Mn2.isFrontFacing(this.a, this.b, this.c, t);
  }
  intersectsBox(t) {
    return t.intersectsTriangle(this);
  }
  closestPointToPoint(t, e) {
    let n = this.a, i = this.b, r2 = this.c, o, a;
    ci.subVectors(i, n), li.subVectors(r2, n), fa.subVectors(t, n);
    let c = ci.dot(fa), l = li.dot(fa);
    if (c <= 0 && l <= 0) return e.copy(n);
    pa.subVectors(t, i);
    let h = ci.dot(pa), d = li.dot(pa);
    if (h >= 0 && d <= h) return e.copy(i);
    let f = c * d - h * l;
    if (f <= 0 && c >= 0 && h <= 0) return o = c / (c - h), e.copy(n).addScaledVector(ci, o);
    ma.subVectors(t, r2);
    let g = ci.dot(ma), _ = li.dot(ma);
    if (_ >= 0 && g <= _) return e.copy(r2);
    let v = g * l - c * _;
    if (v <= 0 && l >= 0 && _ <= 0) return a = l / (l - _), e.copy(n).addScaledVector(li, a);
    let m = h * _ - g * d;
    if (m <= 0 && d - h >= 0 && g - _ >= 0) return jh.subVectors(r2, i), a = (d - h) / (d - h + (g - _)), e.copy(i).addScaledVector(jh, a);
    let p = 1 / (m + v + f);
    return o = v * p, a = f * p, e.copy(n).addScaledVector(ci, o).addScaledVector(li, a);
  }
  equals(t) {
    return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c);
  }
};
r(Mn, "Triangle");
var Zn = Mn;
var Xd = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 };
var xn = { h: 0, s: 0, l: 0 };
var Ss = { h: 0, s: 0, l: 0 };
function ga(s, t, e) {
  return e < 0 && (e += 1), e > 1 && (e -= 1), e < 1 / 6 ? s + (t - s) * 6 * e : e < 1 / 2 ? t : e < 2 / 3 ? s + (t - s) * 6 * (2 / 3 - e) : s;
}
r(ga, "hue2rgb");
var ic = class ic2 {
  constructor(t, e, n) {
    return this.isColor = true, this.r = 1, this.g = 1, this.b = 1, this.set(t, e, n);
  }
  set(t, e, n) {
    if (e === void 0 && n === void 0) {
      let i = t;
      i && i.isColor ? this.copy(i) : typeof i == "number" ? this.setHex(i) : typeof i == "string" && this.setStyle(i);
    } else this.setRGB(t, e, n);
    return this;
  }
  setScalar(t) {
    return this.r = t, this.g = t, this.b = t, this;
  }
  setHex(t, e = Ke) {
    return t = Math.floor(t), this.r = (t >> 16 & 255) / 255, this.g = (t >> 8 & 255) / 255, this.b = (t & 255) / 255, Jt.toWorkingColorSpace(this, e), this;
  }
  setRGB(t, e, n, i = Jt.workingColorSpace) {
    return this.r = t, this.g = e, this.b = n, Jt.toWorkingColorSpace(this, i), this;
  }
  setHSL(t, e, n, i = Jt.workingColorSpace) {
    if (t = ko(t, 1), e = pe(e, 0, 1), n = pe(n, 0, 1), e === 0) this.r = this.g = this.b = n;
    else {
      let r2 = n <= 0.5 ? n * (1 + e) : n + e - n * e, o = 2 * n - r2;
      this.r = ga(o, r2, t + 1 / 3), this.g = ga(o, r2, t), this.b = ga(o, r2, t - 1 / 3);
    }
    return Jt.toWorkingColorSpace(this, i), this;
  }
  setStyle(t, e = Ke) {
    function n(r2) {
      r2 !== void 0 && parseFloat(r2) < 1 && console.warn("THREE.Color: Alpha component of " + t + " will be ignored.");
    }
    r(n, "handleAlpha");
    let i;
    if (i = /^(\w+)\(([^\)]*)\)/.exec(t)) {
      let r2, o = i[1], a = i[2];
      switch (o) {
        case "rgb":
        case "rgba":
          if (r2 = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)) return n(r2[4]), this.setRGB(Math.min(255, parseInt(r2[1], 10)) / 255, Math.min(255, parseInt(r2[2], 10)) / 255, Math.min(255, parseInt(r2[3], 10)) / 255, e);
          if (r2 = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)) return n(r2[4]), this.setRGB(Math.min(100, parseInt(r2[1], 10)) / 100, Math.min(100, parseInt(r2[2], 10)) / 100, Math.min(100, parseInt(r2[3], 10)) / 100, e);
          break;
        case "hsl":
        case "hsla":
          if (r2 = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)) return n(r2[4]), this.setHSL(parseFloat(r2[1]) / 360, parseFloat(r2[2]) / 100, parseFloat(r2[3]) / 100, e);
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + t);
      }
    } else if (i = /^\#([A-Fa-f\d]+)$/.exec(t)) {
      let r2 = i[1], o = r2.length;
      if (o === 3) return this.setRGB(parseInt(r2.charAt(0), 16) / 15, parseInt(r2.charAt(1), 16) / 15, parseInt(r2.charAt(2), 16) / 15, e);
      if (o === 6) return this.setHex(parseInt(r2, 16), e);
      console.warn("THREE.Color: Invalid hex color " + t);
    } else if (t && t.length > 0) return this.setColorName(t, e);
    return this;
  }
  setColorName(t, e = Ke) {
    let n = Xd[t.toLowerCase()];
    return n !== void 0 ? this.setHex(n, e) : console.warn("THREE.Color: Unknown color " + t), this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(t) {
    return this.r = t.r, this.g = t.g, this.b = t.b, this;
  }
  copySRGBToLinear(t) {
    return this.r = Ti(t.r), this.g = Ti(t.g), this.b = Ti(t.b), this;
  }
  copyLinearToSRGB(t) {
    return this.r = na(t.r), this.g = na(t.g), this.b = na(t.b), this;
  }
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  getHex(t = Ke) {
    return Jt.fromWorkingColorSpace(ve.copy(this), t), Math.round(pe(ve.r * 255, 0, 255)) * 65536 + Math.round(pe(ve.g * 255, 0, 255)) * 256 + Math.round(pe(ve.b * 255, 0, 255));
  }
  getHexString(t = Ke) {
    return ("000000" + this.getHex(t).toString(16)).slice(-6);
  }
  getHSL(t, e = Jt.workingColorSpace) {
    Jt.fromWorkingColorSpace(ve.copy(this), e);
    let n = ve.r, i = ve.g, r2 = ve.b, o = Math.max(n, i, r2), a = Math.min(n, i, r2), c, l, h = (a + o) / 2;
    if (a === o) c = 0, l = 0;
    else {
      let d = o - a;
      switch (l = h <= 0.5 ? d / (o + a) : d / (2 - o - a), o) {
        case n:
          c = (i - r2) / d + (i < r2 ? 6 : 0);
          break;
        case i:
          c = (r2 - n) / d + 2;
          break;
        case r2:
          c = (n - i) / d + 4;
          break;
      }
      c /= 6;
    }
    return t.h = c, t.s = l, t.l = h, t;
  }
  getRGB(t, e = Jt.workingColorSpace) {
    return Jt.fromWorkingColorSpace(ve.copy(this), e), t.r = ve.r, t.g = ve.g, t.b = ve.b, t;
  }
  getStyle(t = Ke) {
    Jt.fromWorkingColorSpace(ve.copy(this), t);
    let e = ve.r, n = ve.g, i = ve.b;
    return t !== Ke ? `color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})` : `rgb(${Math.round(e * 255)},${Math.round(n * 255)},${Math.round(i * 255)})`;
  }
  offsetHSL(t, e, n) {
    return this.getHSL(xn), this.setHSL(xn.h + t, xn.s + e, xn.l + n);
  }
  add(t) {
    return this.r += t.r, this.g += t.g, this.b += t.b, this;
  }
  addColors(t, e) {
    return this.r = t.r + e.r, this.g = t.g + e.g, this.b = t.b + e.b, this;
  }
  addScalar(t) {
    return this.r += t, this.g += t, this.b += t, this;
  }
  sub(t) {
    return this.r = Math.max(0, this.r - t.r), this.g = Math.max(0, this.g - t.g), this.b = Math.max(0, this.b - t.b), this;
  }
  multiply(t) {
    return this.r *= t.r, this.g *= t.g, this.b *= t.b, this;
  }
  multiplyScalar(t) {
    return this.r *= t, this.g *= t, this.b *= t, this;
  }
  lerp(t, e) {
    return this.r += (t.r - this.r) * e, this.g += (t.g - this.g) * e, this.b += (t.b - this.b) * e, this;
  }
  lerpColors(t, e, n) {
    return this.r = t.r + (e.r - t.r) * n, this.g = t.g + (e.g - t.g) * n, this.b = t.b + (e.b - t.b) * n, this;
  }
  lerpHSL(t, e) {
    this.getHSL(xn), t.getHSL(Ss);
    let n = $i(xn.h, Ss.h, e), i = $i(xn.s, Ss.s, e), r2 = $i(xn.l, Ss.l, e);
    return this.setHSL(n, i, r2), this;
  }
  setFromVector3(t) {
    return this.r = t.x, this.g = t.y, this.b = t.z, this;
  }
  applyMatrix3(t) {
    let e = this.r, n = this.g, i = this.b, r2 = t.elements;
    return this.r = r2[0] * e + r2[3] * n + r2[6] * i, this.g = r2[1] * e + r2[4] * n + r2[7] * i, this.b = r2[2] * e + r2[5] * n + r2[8] * i, this;
  }
  equals(t) {
    return t.r === this.r && t.g === this.g && t.b === this.b;
  }
  fromArray(t, e = 0) {
    return this.r = t[e], this.g = t[e + 1], this.b = t[e + 2], this;
  }
  toArray(t = [], e = 0) {
    return t[e] = this.r, t[e + 1] = this.g, t[e + 2] = this.b, t;
  }
  fromBufferAttribute(t, e) {
    return this.r = t.getX(e), this.g = t.getY(e), this.b = t.getZ(e), this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
};
r(ic, "Color");
var Vt = ic;
var ve = new Vt();
Vt.NAMES = Xd;
var Np = 0;
var sc = class sc2 extends Pn {
  constructor() {
    super(), this.isMaterial = true, Object.defineProperty(this, "id", { value: Np++ }), this.uuid = Ve(), this.name = "", this.type = "Material", this.blending = wi, this.side = Cn, this.vertexColors = false, this.opacity = 1, this.transparent = false, this.alphaHash = false, this.blendSrc = Oa, this.blendDst = Fa, this.blendEquation = Xn, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.blendColor = new Vt(0, 0, 0), this.blendAlpha = 0, this.depthFunc = Js, this.depthTest = true, this.depthWrite = true, this.stencilWriteMask = 255, this.stencilFunc = kh, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = ei, this.stencilZFail = ei, this.stencilZPass = ei, this.stencilWrite = false, this.clippingPlanes = null, this.clipIntersection = false, this.clipShadows = false, this.shadowSide = null, this.colorWrite = true, this.precision = null, this.polygonOffset = false, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = false, this.alphaToCoverage = false, this.premultipliedAlpha = false, this.forceSinglePass = false, this.visible = true, this.toneMapped = true, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(t) {
    this._alphaTest > 0 != t > 0 && this.version++, this._alphaTest = t;
  }
  onBuild() {
  }
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(t) {
    if (t !== void 0) for (let e in t) {
      let n = t[e];
      if (n === void 0) {
        console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);
        continue;
      }
      let i = this[e];
      if (i === void 0) {
        console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);
        continue;
      }
      i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : this[e] = n;
    }
  }
  toJSON(t) {
    let e = t === void 0 || typeof t == "string";
    e && (t = { textures: {}, images: {} });
    let n = { metadata: { version: 4.6, type: "Material", generator: "Material.toJSON" } };
    n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(t).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(t).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.iridescence !== void 0 && (n.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(t).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(t).uuid), this.anisotropy !== void 0 && (n.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (n.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (n.anisotropyMap = this.anisotropyMap.toJSON(t).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(t).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(t).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(t).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(t).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(t).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(t).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(t).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(t).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(t).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(t).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(t).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(t).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(t).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(t).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapRotation !== void 0 && (n.envMapRotation = this.envMapRotation.toArray()), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(t).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(t).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(t).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== wi && (n.blending = this.blending), this.side !== Cn && (n.side = this.side), this.vertexColors === true && (n.vertexColors = true), this.opacity < 1 && (n.opacity = this.opacity), this.transparent === true && (n.transparent = true), this.blendSrc !== Oa && (n.blendSrc = this.blendSrc), this.blendDst !== Fa && (n.blendDst = this.blendDst), this.blendEquation !== Xn && (n.blendEquation = this.blendEquation), this.blendSrcAlpha !== null && (n.blendSrcAlpha = this.blendSrcAlpha), this.blendDstAlpha !== null && (n.blendDstAlpha = this.blendDstAlpha), this.blendEquationAlpha !== null && (n.blendEquationAlpha = this.blendEquationAlpha), this.blendColor && this.blendColor.isColor && (n.blendColor = this.blendColor.getHex()), this.blendAlpha !== 0 && (n.blendAlpha = this.blendAlpha), this.depthFunc !== Js && (n.depthFunc = this.depthFunc), this.depthTest === false && (n.depthTest = this.depthTest), this.depthWrite === false && (n.depthWrite = this.depthWrite), this.colorWrite === false && (n.colorWrite = this.colorWrite), this.stencilWriteMask !== 255 && (n.stencilWriteMask = this.stencilWriteMask), this.stencilFunc !== kh && (n.stencilFunc = this.stencilFunc), this.stencilRef !== 0 && (n.stencilRef = this.stencilRef), this.stencilFuncMask !== 255 && (n.stencilFuncMask = this.stencilFuncMask), this.stencilFail !== ei && (n.stencilFail = this.stencilFail), this.stencilZFail !== ei && (n.stencilZFail = this.stencilZFail), this.stencilZPass !== ei && (n.stencilZPass = this.stencilZPass), this.stencilWrite === true && (n.stencilWrite = this.stencilWrite), this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === true && (n.polygonOffset = true), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === true && (n.dithering = true), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaHash === true && (n.alphaHash = true), this.alphaToCoverage === true && (n.alphaToCoverage = true), this.premultipliedAlpha === true && (n.premultipliedAlpha = true), this.forceSinglePass === true && (n.forceSinglePass = true), this.wireframe === true && (n.wireframe = true), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === true && (n.flatShading = true), this.visible === false && (n.visible = false), this.toneMapped === false && (n.toneMapped = false), this.fog === false && (n.fog = false), Object.keys(this.userData).length > 0 && (n.userData = this.userData);
    function i(r2) {
      let o = [];
      for (let a in r2) {
        let c = r2[a];
        delete c.metadata, o.push(c);
      }
      return o;
    }
    if (r(i, "extractFromCache"), e) {
      let r2 = i(t.textures), o = i(t.images);
      r2.length > 0 && (n.textures = r2), o.length > 0 && (n.images = o);
    }
    return n;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(t) {
    this.name = t.name, this.blending = t.blending, this.side = t.side, this.vertexColors = t.vertexColors, this.opacity = t.opacity, this.transparent = t.transparent, this.blendSrc = t.blendSrc, this.blendDst = t.blendDst, this.blendEquation = t.blendEquation, this.blendSrcAlpha = t.blendSrcAlpha, this.blendDstAlpha = t.blendDstAlpha, this.blendEquationAlpha = t.blendEquationAlpha, this.blendColor.copy(t.blendColor), this.blendAlpha = t.blendAlpha, this.depthFunc = t.depthFunc, this.depthTest = t.depthTest, this.depthWrite = t.depthWrite, this.stencilWriteMask = t.stencilWriteMask, this.stencilFunc = t.stencilFunc, this.stencilRef = t.stencilRef, this.stencilFuncMask = t.stencilFuncMask, this.stencilFail = t.stencilFail, this.stencilZFail = t.stencilZFail, this.stencilZPass = t.stencilZPass, this.stencilWrite = t.stencilWrite;
    let e = t.clippingPlanes, n = null;
    if (e !== null) {
      let i = e.length;
      n = new Array(i);
      for (let r2 = 0; r2 !== i; ++r2) n[r2] = e[r2].clone();
    }
    return this.clippingPlanes = n, this.clipIntersection = t.clipIntersection, this.clipShadows = t.clipShadows, this.shadowSide = t.shadowSide, this.colorWrite = t.colorWrite, this.precision = t.precision, this.polygonOffset = t.polygonOffset, this.polygonOffsetFactor = t.polygonOffsetFactor, this.polygonOffsetUnits = t.polygonOffsetUnits, this.dithering = t.dithering, this.alphaTest = t.alphaTest, this.alphaHash = t.alphaHash, this.alphaToCoverage = t.alphaToCoverage, this.premultipliedAlpha = t.premultipliedAlpha, this.forceSinglePass = t.forceSinglePass, this.visible = t.visible, this.toneMapped = t.toneMapped, this.userData = JSON.parse(JSON.stringify(t.userData)), this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(t) {
    t === true && this.version++;
  }
};
r(sc, "Material");
var je = sc;
var rc = class rc2 extends je {
  constructor(t) {
    super(), this.isMeshBasicMaterial = true, this.type = "MeshBasicMaterial", this.color = new Vt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Je(), this.combine = Oo, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = true, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapRotation.copy(t.envMapRotation), this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.fog = t.fog, this;
  }
};
r(rc, "MeshBasicMaterial");
var ar = rc;
var oe = new P();
var bs = new lt();
var ac = class ac2 {
  constructor(t, e, n = false) {
    if (Array.isArray(t)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = true, this.name = "", this.array = t, this.itemSize = e, this.count = t !== void 0 ? t.length / e : 0, this.normalized = n, this.usage = Ha, this._updateRange = { offset: 0, count: -1 }, this.updateRanges = [], this.gpuType = ke, this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(t) {
    t === true && this.version++;
  }
  get updateRange() {
    return Wd("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."), this._updateRange;
  }
  setUsage(t) {
    return this.usage = t, this;
  }
  addUpdateRange(t, e) {
    this.updateRanges.push({ start: t, count: e });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(t) {
    return this.name = t.name, this.array = new t.array.constructor(t.array), this.itemSize = t.itemSize, this.count = t.count, this.normalized = t.normalized, this.usage = t.usage, this.gpuType = t.gpuType, this;
  }
  copyAt(t, e, n) {
    t *= this.itemSize, n *= e.itemSize;
    for (let i = 0, r2 = this.itemSize; i < r2; i++) this.array[t + i] = e.array[n + i];
    return this;
  }
  copyArray(t) {
    return this.array.set(t), this;
  }
  applyMatrix3(t) {
    if (this.itemSize === 2) for (let e = 0, n = this.count; e < n; e++) bs.fromBufferAttribute(this, e), bs.applyMatrix3(t), this.setXY(e, bs.x, bs.y);
    else if (this.itemSize === 3) for (let e = 0, n = this.count; e < n; e++) oe.fromBufferAttribute(this, e), oe.applyMatrix3(t), this.setXYZ(e, oe.x, oe.y, oe.z);
    return this;
  }
  applyMatrix4(t) {
    for (let e = 0, n = this.count; e < n; e++) oe.fromBufferAttribute(this, e), oe.applyMatrix4(t), this.setXYZ(e, oe.x, oe.y, oe.z);
    return this;
  }
  applyNormalMatrix(t) {
    for (let e = 0, n = this.count; e < n; e++) oe.fromBufferAttribute(this, e), oe.applyNormalMatrix(t), this.setXYZ(e, oe.x, oe.y, oe.z);
    return this;
  }
  transformDirection(t) {
    for (let e = 0, n = this.count; e < n; e++) oe.fromBufferAttribute(this, e), oe.transformDirection(t), this.setXYZ(e, oe.x, oe.y, oe.z);
    return this;
  }
  set(t, e = 0) {
    return this.array.set(t, e), this;
  }
  getComponent(t, e) {
    let n = this.array[t * this.itemSize + e];
    return this.normalized && (n = Ze(n, this.array)), n;
  }
  setComponent(t, e, n) {
    return this.normalized && (n = Zt(n, this.array)), this.array[t * this.itemSize + e] = n, this;
  }
  getX(t) {
    let e = this.array[t * this.itemSize];
    return this.normalized && (e = Ze(e, this.array)), e;
  }
  setX(t, e) {
    return this.normalized && (e = Zt(e, this.array)), this.array[t * this.itemSize] = e, this;
  }
  getY(t) {
    let e = this.array[t * this.itemSize + 1];
    return this.normalized && (e = Ze(e, this.array)), e;
  }
  setY(t, e) {
    return this.normalized && (e = Zt(e, this.array)), this.array[t * this.itemSize + 1] = e, this;
  }
  getZ(t) {
    let e = this.array[t * this.itemSize + 2];
    return this.normalized && (e = Ze(e, this.array)), e;
  }
  setZ(t, e) {
    return this.normalized && (e = Zt(e, this.array)), this.array[t * this.itemSize + 2] = e, this;
  }
  getW(t) {
    let e = this.array[t * this.itemSize + 3];
    return this.normalized && (e = Ze(e, this.array)), e;
  }
  setW(t, e) {
    return this.normalized && (e = Zt(e, this.array)), this.array[t * this.itemSize + 3] = e, this;
  }
  setXY(t, e, n) {
    return t *= this.itemSize, this.normalized && (e = Zt(e, this.array), n = Zt(n, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this;
  }
  setXYZ(t, e, n, i) {
    return t *= this.itemSize, this.normalized && (e = Zt(e, this.array), n = Zt(n, this.array), i = Zt(i, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = i, this;
  }
  setXYZW(t, e, n, i, r2) {
    return t *= this.itemSize, this.normalized && (e = Zt(e, this.array), n = Zt(n, this.array), i = Zt(i, this.array), r2 = Zt(r2, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = i, this.array[t + 3] = r2, this;
  }
  onUpload(t) {
    return this.onUploadCallback = t, this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    let t = { itemSize: this.itemSize, type: this.array.constructor.name, array: Array.from(this.array), normalized: this.normalized };
    return this.name !== "" && (t.name = this.name), this.usage !== Ha && (t.usage = this.usage), t;
  }
};
r(ac, "BufferAttribute");
var Se = ac;
var oc = class oc2 extends Se {
  constructor(t, e, n) {
    super(new Uint16Array(t), e, n);
  }
};
r(oc, "Uint16BufferAttribute");
var or = oc;
var cc = class cc2 extends Se {
  constructor(t, e, n) {
    super(new Uint32Array(t), e, n);
  }
};
r(cc, "Uint32BufferAttribute");
var cr = cc;
var lc = class lc2 extends Se {
  constructor(t, e, n) {
    super(new Float32Array(t), e, n);
  }
};
r(lc, "Float32BufferAttribute");
var ce = lc;
var Op = 0;
var ze = new Ft();
var _a = new le();
var hi = new P();
var Ne = new Ie();
var Xi = new Ie();
var fe = new P();
var Pr = class Pr2 extends Pn {
  constructor() {
    super(), this.isBufferGeometry = true, Object.defineProperty(this, "id", { value: Op++ }), this.uuid = Ve(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = false, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(t) {
    return Array.isArray(t) ? this.index = new (Gd(t) ? cr : or)(t, 1) : this.index = t, this;
  }
  getAttribute(t) {
    return this.attributes[t];
  }
  setAttribute(t, e) {
    return this.attributes[t] = e, this;
  }
  deleteAttribute(t) {
    return delete this.attributes[t], this;
  }
  hasAttribute(t) {
    return this.attributes[t] !== void 0;
  }
  addGroup(t, e, n = 0) {
    this.groups.push({ start: t, count: e, materialIndex: n });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(t, e) {
    this.drawRange.start = t, this.drawRange.count = e;
  }
  applyMatrix4(t) {
    let e = this.attributes.position;
    e !== void 0 && (e.applyMatrix4(t), e.needsUpdate = true);
    let n = this.attributes.normal;
    if (n !== void 0) {
      let r2 = new kt().getNormalMatrix(t);
      n.applyNormalMatrix(r2), n.needsUpdate = true;
    }
    let i = this.attributes.tangent;
    return i !== void 0 && (i.transformDirection(t), i.needsUpdate = true), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  applyQuaternion(t) {
    return ze.makeRotationFromQuaternion(t), this.applyMatrix4(ze), this;
  }
  rotateX(t) {
    return ze.makeRotationX(t), this.applyMatrix4(ze), this;
  }
  rotateY(t) {
    return ze.makeRotationY(t), this.applyMatrix4(ze), this;
  }
  rotateZ(t) {
    return ze.makeRotationZ(t), this.applyMatrix4(ze), this;
  }
  translate(t, e, n) {
    return ze.makeTranslation(t, e, n), this.applyMatrix4(ze), this;
  }
  scale(t, e, n) {
    return ze.makeScale(t, e, n), this.applyMatrix4(ze), this;
  }
  lookAt(t) {
    return _a.lookAt(t), _a.updateMatrix(), this.applyMatrix4(_a.matrix), this;
  }
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(hi).negate(), this.translate(hi.x, hi.y, hi.z), this;
  }
  setFromPoints(t) {
    let e = [];
    for (let n = 0, i = t.length; n < i; n++) {
      let r2 = t[n];
      e.push(r2.x, r2.y, r2.z || 0);
    }
    return this.setAttribute("position", new ce(e, 3)), this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Ie());
    let t = this.attributes.position, e = this.morphAttributes.position;
    if (t && t.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this), this.boundingBox.set(new P(-1 / 0, -1 / 0, -1 / 0), new P(1 / 0, 1 / 0, 1 / 0));
      return;
    }
    if (t !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(t), e) for (let n = 0, i = e.length; n < i; n++) {
        let r2 = e[n];
        Ne.setFromBufferAttribute(r2), this.morphTargetsRelative ? (fe.addVectors(this.boundingBox.min, Ne.min), this.boundingBox.expandByPoint(fe), fe.addVectors(this.boundingBox.max, Ne.max), this.boundingBox.expandByPoint(fe)) : (this.boundingBox.expandByPoint(Ne.min), this.boundingBox.expandByPoint(Ne.max));
      }
    } else this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new Re());
    let t = this.attributes.position, e = this.morphAttributes.position;
    if (t && t.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this), this.boundingSphere.set(new P(), 1 / 0);
      return;
    }
    if (t) {
      let n = this.boundingSphere.center;
      if (Ne.setFromBufferAttribute(t), e) for (let r2 = 0, o = e.length; r2 < o; r2++) {
        let a = e[r2];
        Xi.setFromBufferAttribute(a), this.morphTargetsRelative ? (fe.addVectors(Ne.min, Xi.min), Ne.expandByPoint(fe), fe.addVectors(Ne.max, Xi.max), Ne.expandByPoint(fe)) : (Ne.expandByPoint(Xi.min), Ne.expandByPoint(Xi.max));
      }
      Ne.getCenter(n);
      let i = 0;
      for (let r2 = 0, o = t.count; r2 < o; r2++) fe.fromBufferAttribute(t, r2), i = Math.max(i, n.distanceToSquared(fe));
      if (e) for (let r2 = 0, o = e.length; r2 < o; r2++) {
        let a = e[r2], c = this.morphTargetsRelative;
        for (let l = 0, h = a.count; l < h; l++) fe.fromBufferAttribute(a, l), c && (hi.fromBufferAttribute(t, l), fe.add(hi)), i = Math.max(i, n.distanceToSquared(fe));
      }
      this.boundingSphere.radius = Math.sqrt(i), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeTangents() {
    let t = this.index, e = this.attributes;
    if (t === null || e.position === void 0 || e.normal === void 0 || e.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    let n = e.position, i = e.normal, r2 = e.uv;
    this.hasAttribute("tangent") === false && this.setAttribute("tangent", new Se(new Float32Array(4 * n.count), 4));
    let o = this.getAttribute("tangent"), a = [], c = [];
    for (let D = 0; D < n.count; D++) a[D] = new P(), c[D] = new P();
    let l = new P(), h = new P(), d = new P(), f = new lt(), g = new lt(), _ = new lt(), v = new P(), m = new P();
    function p(D, X, M) {
      l.fromBufferAttribute(n, D), h.fromBufferAttribute(n, X), d.fromBufferAttribute(n, M), f.fromBufferAttribute(r2, D), g.fromBufferAttribute(r2, X), _.fromBufferAttribute(r2, M), h.sub(l), d.sub(l), g.sub(f), _.sub(f);
      let A = 1 / (g.x * _.y - _.x * g.y);
      isFinite(A) && (v.copy(h).multiplyScalar(_.y).addScaledVector(d, -g.y).multiplyScalar(A), m.copy(d).multiplyScalar(g.x).addScaledVector(h, -_.x).multiplyScalar(A), a[D].add(v), a[X].add(v), a[M].add(v), c[D].add(m), c[X].add(m), c[M].add(m));
    }
    r(p, "handleTriangle");
    let w = this.groups;
    w.length === 0 && (w = [{ start: 0, count: t.count }]);
    for (let D = 0, X = w.length; D < X; ++D) {
      let M = w[D], A = M.start, Q = M.count;
      for (let $ = A, I = A + Q; $ < I; $ += 3) p(t.getX($ + 0), t.getX($ + 1), t.getX($ + 2));
    }
    let x = new P(), b = new P(), L = new P(), C = new P();
    function R(D) {
      L.fromBufferAttribute(i, D), C.copy(L);
      let X = a[D];
      x.copy(X), x.sub(L.multiplyScalar(L.dot(X))).normalize(), b.crossVectors(C, X);
      let A = b.dot(c[D]) < 0 ? -1 : 1;
      o.setXYZW(D, x.x, x.y, x.z, A);
    }
    r(R, "handleVertex");
    for (let D = 0, X = w.length; D < X; ++D) {
      let M = w[D], A = M.start, Q = M.count;
      for (let $ = A, I = A + Q; $ < I; $ += 3) R(t.getX($ + 0)), R(t.getX($ + 1)), R(t.getX($ + 2));
    }
  }
  computeVertexNormals() {
    let t = this.index, e = this.getAttribute("position");
    if (e !== void 0) {
      let n = this.getAttribute("normal");
      if (n === void 0) n = new Se(new Float32Array(e.count * 3), 3), this.setAttribute("normal", n);
      else for (let f = 0, g = n.count; f < g; f++) n.setXYZ(f, 0, 0, 0);
      let i = new P(), r2 = new P(), o = new P(), a = new P(), c = new P(), l = new P(), h = new P(), d = new P();
      if (t) for (let f = 0, g = t.count; f < g; f += 3) {
        let _ = t.getX(f + 0), v = t.getX(f + 1), m = t.getX(f + 2);
        i.fromBufferAttribute(e, _), r2.fromBufferAttribute(e, v), o.fromBufferAttribute(e, m), h.subVectors(o, r2), d.subVectors(i, r2), h.cross(d), a.fromBufferAttribute(n, _), c.fromBufferAttribute(n, v), l.fromBufferAttribute(n, m), a.add(h), c.add(h), l.add(h), n.setXYZ(_, a.x, a.y, a.z), n.setXYZ(v, c.x, c.y, c.z), n.setXYZ(m, l.x, l.y, l.z);
      }
      else for (let f = 0, g = e.count; f < g; f += 3) i.fromBufferAttribute(e, f + 0), r2.fromBufferAttribute(e, f + 1), o.fromBufferAttribute(e, f + 2), h.subVectors(o, r2), d.subVectors(i, r2), h.cross(d), n.setXYZ(f + 0, h.x, h.y, h.z), n.setXYZ(f + 1, h.x, h.y, h.z), n.setXYZ(f + 2, h.x, h.y, h.z);
      this.normalizeNormals(), n.needsUpdate = true;
    }
  }
  normalizeNormals() {
    let t = this.attributes.normal;
    for (let e = 0, n = t.count; e < n; e++) fe.fromBufferAttribute(t, e), fe.normalize(), t.setXYZ(e, fe.x, fe.y, fe.z);
  }
  toNonIndexed() {
    function t(a, c) {
      let l = a.array, h = a.itemSize, d = a.normalized, f = new l.constructor(c.length * h), g = 0, _ = 0;
      for (let v = 0, m = c.length; v < m; v++) {
        a.isInterleavedBufferAttribute ? g = c[v] * a.data.stride + a.offset : g = c[v] * h;
        for (let p = 0; p < h; p++) f[_++] = l[g++];
      }
      return new Se(f, h, d);
    }
    if (r(t, "convertBufferAttribute"), this.index === null) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    let e = new Pr2(), n = this.index.array, i = this.attributes;
    for (let a in i) {
      let c = i[a], l = t(c, n);
      e.setAttribute(a, l);
    }
    let r2 = this.morphAttributes;
    for (let a in r2) {
      let c = [], l = r2[a];
      for (let h = 0, d = l.length; h < d; h++) {
        let f = l[h], g = t(f, n);
        c.push(g);
      }
      e.morphAttributes[a] = c;
    }
    e.morphTargetsRelative = this.morphTargetsRelative;
    let o = this.groups;
    for (let a = 0, c = o.length; a < c; a++) {
      let l = o[a];
      e.addGroup(l.start, l.count, l.materialIndex);
    }
    return e;
  }
  toJSON() {
    let t = { metadata: { version: 4.6, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } };
    if (t.uuid = this.uuid, t.type = this.type, this.name !== "" && (t.name = this.name), Object.keys(this.userData).length > 0 && (t.userData = this.userData), this.parameters !== void 0) {
      let c = this.parameters;
      for (let l in c) c[l] !== void 0 && (t[l] = c[l]);
      return t;
    }
    t.data = { attributes: {} };
    let e = this.index;
    e !== null && (t.data.index = { type: e.array.constructor.name, array: Array.prototype.slice.call(e.array) });
    let n = this.attributes;
    for (let c in n) {
      let l = n[c];
      t.data.attributes[c] = l.toJSON(t.data);
    }
    let i = {}, r2 = false;
    for (let c in this.morphAttributes) {
      let l = this.morphAttributes[c], h = [];
      for (let d = 0, f = l.length; d < f; d++) {
        let g = l[d];
        h.push(g.toJSON(t.data));
      }
      h.length > 0 && (i[c] = h, r2 = true);
    }
    r2 && (t.data.morphAttributes = i, t.data.morphTargetsRelative = this.morphTargetsRelative);
    let o = this.groups;
    o.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(o)));
    let a = this.boundingSphere;
    return a !== null && (t.data.boundingSphere = { center: a.center.toArray(), radius: a.radius }), t;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(t) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    let e = {};
    this.name = t.name;
    let n = t.index;
    n !== null && this.setIndex(n.clone(e));
    let i = t.attributes;
    for (let l in i) {
      let h = i[l];
      this.setAttribute(l, h.clone(e));
    }
    let r2 = t.morphAttributes;
    for (let l in r2) {
      let h = [], d = r2[l];
      for (let f = 0, g = d.length; f < g; f++) h.push(d[f].clone(e));
      this.morphAttributes[l] = h;
    }
    this.morphTargetsRelative = t.morphTargetsRelative;
    let o = t.groups;
    for (let l = 0, h = o.length; l < h; l++) {
      let d = o[l];
      this.addGroup(d.start, d.count, d.materialIndex);
    }
    let a = t.boundingBox;
    a !== null && (this.boundingBox = a.clone());
    let c = t.boundingSphere;
    return c !== null && (this.boundingSphere = c.clone()), this.drawRange.start = t.drawRange.start, this.drawRange.count = t.drawRange.count, this.userData = t.userData, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
};
r(Pr, "BufferGeometry");
var Le = Pr;
var tu = new Ft();
var zn = new Kn();
var Es = new Re();
var eu = new P();
var ui = new P();
var di = new P();
var fi = new P();
var xa = new P();
var ws = new P();
var As = new lt();
var Ts = new lt();
var Rs = new lt();
var nu = new P();
var iu = new P();
var su = new P();
var Cs = new P();
var Ps = new P();
var hc = class hc2 extends le {
  constructor(t = new Le(), e = new ar()) {
    super(), this.isMesh = true, this.type = "Mesh", this.geometry = t, this.material = e, this.updateMorphTargets();
  }
  copy(t, e) {
    return super.copy(t, e), t.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = t.morphTargetInfluences.slice()), t.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this;
  }
  updateMorphTargets() {
    let e = this.geometry.morphAttributes, n = Object.keys(e);
    if (n.length > 0) {
      let i = e[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let r2 = 0, o = i.length; r2 < o; r2++) {
          let a = i[r2].name || String(r2);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = r2;
        }
      }
    }
  }
  getVertexPosition(t, e) {
    let n = this.geometry, i = n.attributes.position, r2 = n.morphAttributes.position, o = n.morphTargetsRelative;
    e.fromBufferAttribute(i, t);
    let a = this.morphTargetInfluences;
    if (r2 && a) {
      ws.set(0, 0, 0);
      for (let c = 0, l = r2.length; c < l; c++) {
        let h = a[c], d = r2[c];
        h !== 0 && (xa.fromBufferAttribute(d, t), o ? ws.addScaledVector(xa, h) : ws.addScaledVector(xa.sub(e), h));
      }
      e.add(ws);
    }
    return e;
  }
  raycast(t, e) {
    let n = this.geometry, i = this.material, r2 = this.matrixWorld;
    i !== void 0 && (n.boundingSphere === null && n.computeBoundingSphere(), Es.copy(n.boundingSphere), Es.applyMatrix4(r2), zn.copy(t.ray).recast(t.near), !(Es.containsPoint(zn.origin) === false && (zn.intersectSphere(Es, eu) === null || zn.origin.distanceToSquared(eu) > (t.far - t.near) ** 2)) && (tu.copy(r2).invert(), zn.copy(t.ray).applyMatrix4(tu), !(n.boundingBox !== null && zn.intersectsBox(n.boundingBox) === false) && this._computeIntersections(t, e, zn)));
  }
  _computeIntersections(t, e, n) {
    let i, r2 = this.geometry, o = this.material, a = r2.index, c = r2.attributes.position, l = r2.attributes.uv, h = r2.attributes.uv1, d = r2.attributes.normal, f = r2.groups, g = r2.drawRange;
    if (a !== null) if (Array.isArray(o)) for (let _ = 0, v = f.length; _ < v; _++) {
      let m = f[_], p = o[m.materialIndex], w = Math.max(m.start, g.start), x = Math.min(a.count, Math.min(m.start + m.count, g.start + g.count));
      for (let b = w, L = x; b < L; b += 3) {
        let C = a.getX(b), R = a.getX(b + 1), D = a.getX(b + 2);
        i = Is(this, p, t, n, l, h, d, C, R, D), i && (i.faceIndex = Math.floor(b / 3), i.face.materialIndex = m.materialIndex, e.push(i));
      }
    }
    else {
      let _ = Math.max(0, g.start), v = Math.min(a.count, g.start + g.count);
      for (let m = _, p = v; m < p; m += 3) {
        let w = a.getX(m), x = a.getX(m + 1), b = a.getX(m + 2);
        i = Is(this, o, t, n, l, h, d, w, x, b), i && (i.faceIndex = Math.floor(m / 3), e.push(i));
      }
    }
    else if (c !== void 0) if (Array.isArray(o)) for (let _ = 0, v = f.length; _ < v; _++) {
      let m = f[_], p = o[m.materialIndex], w = Math.max(m.start, g.start), x = Math.min(c.count, Math.min(m.start + m.count, g.start + g.count));
      for (let b = w, L = x; b < L; b += 3) {
        let C = b, R = b + 1, D = b + 2;
        i = Is(this, p, t, n, l, h, d, C, R, D), i && (i.faceIndex = Math.floor(b / 3), i.face.materialIndex = m.materialIndex, e.push(i));
      }
    }
    else {
      let _ = Math.max(0, g.start), v = Math.min(c.count, g.start + g.count);
      for (let m = _, p = v; m < p; m += 3) {
        let w = m, x = m + 1, b = m + 2;
        i = Is(this, o, t, n, l, h, d, w, x, b), i && (i.faceIndex = Math.floor(m / 3), e.push(i));
      }
    }
  }
};
r(hc, "Mesh");
var Me = hc;
function Fp(s, t, e, n, i, r2, o, a) {
  let c;
  if (t.side === Pe ? c = n.intersectTriangle(o, r2, i, true, a) : c = n.intersectTriangle(i, r2, o, t.side === Cn, a), c === null) return null;
  Ps.copy(a), Ps.applyMatrix4(s.matrixWorld);
  let l = e.ray.origin.distanceTo(Ps);
  return l < e.near || l > e.far ? null : { distance: l, point: Ps.clone(), object: s };
}
r(Fp, "checkIntersection");
function Is(s, t, e, n, i, r2, o, a, c, l) {
  s.getVertexPosition(a, ui), s.getVertexPosition(c, di), s.getVertexPosition(l, fi);
  let h = Fp(s, t, e, n, ui, di, fi, Cs);
  if (h) {
    i && (As.fromBufferAttribute(i, a), Ts.fromBufferAttribute(i, c), Rs.fromBufferAttribute(i, l), h.uv = Zn.getInterpolation(Cs, ui, di, fi, As, Ts, Rs, new lt())), r2 && (As.fromBufferAttribute(r2, a), Ts.fromBufferAttribute(r2, c), Rs.fromBufferAttribute(r2, l), h.uv1 = Zn.getInterpolation(Cs, ui, di, fi, As, Ts, Rs, new lt())), o && (nu.fromBufferAttribute(o, a), iu.fromBufferAttribute(o, c), su.fromBufferAttribute(o, l), h.normal = Zn.getInterpolation(Cs, ui, di, fi, nu, iu, su, new P()), h.normal.dot(n.direction) > 0 && h.normal.multiplyScalar(-1));
    let d = { a, b: c, c: l, normal: new P(), materialIndex: 0 };
    Zn.getNormal(ui, di, fi, d.normal), h.face = d;
  }
  return h;
}
r(Is, "checkGeometryIntersection");
var Ir = class Ir2 extends Le {
  constructor(t = 1, e = 1, n = 1, i = 1, r2 = 1, o = 1) {
    super(), this.type = "BoxGeometry", this.parameters = { width: t, height: e, depth: n, widthSegments: i, heightSegments: r2, depthSegments: o };
    let a = this;
    i = Math.floor(i), r2 = Math.floor(r2), o = Math.floor(o);
    let c = [], l = [], h = [], d = [], f = 0, g = 0;
    _("z", "y", "x", -1, -1, n, e, t, o, r2, 0), _("z", "y", "x", 1, -1, n, e, -t, o, r2, 1), _("x", "z", "y", 1, 1, t, n, e, i, o, 2), _("x", "z", "y", 1, -1, t, n, -e, i, o, 3), _("x", "y", "z", 1, -1, t, e, n, i, r2, 4), _("x", "y", "z", -1, -1, t, e, -n, i, r2, 5), this.setIndex(c), this.setAttribute("position", new ce(l, 3)), this.setAttribute("normal", new ce(h, 3)), this.setAttribute("uv", new ce(d, 2));
    function _(v, m, p, w, x, b, L, C, R, D, X) {
      let M = b / R, A = L / D, Q = b / 2, $ = L / 2, I = C / 2, G = R + 1, k = D + 1, J = 0, q2 = 0, Y = new P();
      for (let it = 0; it < k; it++) {
        let nt = it * A - $;
        for (let _t = 0; _t < G; _t++) {
          let It = _t * M - Q;
          Y[v] = It * w, Y[m] = nt * x, Y[p] = I, l.push(Y.x, Y.y, Y.z), Y[v] = 0, Y[m] = 0, Y[p] = C > 0 ? 1 : -1, h.push(Y.x, Y.y, Y.z), d.push(_t / R), d.push(1 - it / D), J += 1;
        }
      }
      for (let it = 0; it < D; it++) for (let nt = 0; nt < R; nt++) {
        let _t = f + nt + G * it, It = f + nt + G * (it + 1), V = f + (nt + 1) + G * (it + 1), tt = f + (nt + 1) + G * it;
        c.push(_t, It, tt), c.push(It, V, tt), q2 += 6;
      }
      a.addGroup(g, q2, X), g += q2, f += J;
    }
    r(_, "buildPlane");
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  static fromJSON(t) {
    return new Ir2(t.width, t.height, t.depth, t.widthSegments, t.heightSegments, t.depthSegments);
  }
};
r(Ir, "BoxGeometry");
var rs = Ir;
function Ui(s) {
  let t = {};
  for (let e in s) {
    t[e] = {};
    for (let n in s[e]) {
      let i = s[e][n];
      i && (i.isColor || i.isMatrix3 || i.isMatrix4 || i.isVector2 || i.isVector3 || i.isVector4 || i.isTexture || i.isQuaternion) ? i.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), t[e][n] = null) : t[e][n] = i.clone() : Array.isArray(i) ? t[e][n] = i.slice() : t[e][n] = i;
    }
  }
  return t;
}
r(Ui, "cloneUniforms");
function Ae(s) {
  let t = {};
  for (let e = 0; e < s.length; e++) {
    let n = Ui(s[e]);
    for (let i in n) t[i] = n[i];
  }
  return t;
}
r(Ae, "mergeUniforms");
function Bp(s) {
  let t = [];
  for (let e = 0; e < s.length; e++) t.push(s[e].clone());
  return t;
}
r(Bp, "cloneUniformsGroups");
function qd(s) {
  return s.getRenderTarget() === null ? s.outputColorSpace : Jt.workingColorSpace;
}
r(qd, "getUnlitUniformColorSpace");
var zp = { clone: Ui, merge: Ae };
var kp = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`;
var Vp = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
var uc = class uc2 extends je {
  constructor(t) {
    super(), this.isShaderMaterial = true, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = kp, this.fragmentShader = Vp, this.linewidth = 1, this.wireframe = false, this.wireframeLinewidth = 1, this.fog = false, this.lights = false, this.clipping = false, this.forceSinglePass = true, this.extensions = { derivatives: false, fragDepth: false, drawBuffers: false, shaderTextureLOD: false, clipCullDistance: false, multiDraw: false }, this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv1: [0, 0] }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = false, this.glslVersion = null, t !== void 0 && this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.fragmentShader = t.fragmentShader, this.vertexShader = t.vertexShader, this.uniforms = Ui(t.uniforms), this.uniformsGroups = Bp(t.uniformsGroups), this.defines = Object.assign({}, t.defines), this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.fog = t.fog, this.lights = t.lights, this.clipping = t.clipping, this.extensions = Object.assign({}, t.extensions), this.glslVersion = t.glslVersion, this;
  }
  toJSON(t) {
    let e = super.toJSON(t);
    e.glslVersion = this.glslVersion, e.uniforms = {};
    for (let i in this.uniforms) {
      let o = this.uniforms[i].value;
      o && o.isTexture ? e.uniforms[i] = { type: "t", value: o.toJSON(t).uuid } : o && o.isColor ? e.uniforms[i] = { type: "c", value: o.getHex() } : o && o.isVector2 ? e.uniforms[i] = { type: "v2", value: o.toArray() } : o && o.isVector3 ? e.uniforms[i] = { type: "v3", value: o.toArray() } : o && o.isVector4 ? e.uniforms[i] = { type: "v4", value: o.toArray() } : o && o.isMatrix3 ? e.uniforms[i] = { type: "m3", value: o.toArray() } : o && o.isMatrix4 ? e.uniforms[i] = { type: "m4", value: o.toArray() } : e.uniforms[i] = { value: o };
    }
    Object.keys(this.defines).length > 0 && (e.defines = this.defines), e.vertexShader = this.vertexShader, e.fragmentShader = this.fragmentShader, e.lights = this.lights, e.clipping = this.clipping;
    let n = {};
    for (let i in this.extensions) this.extensions[i] === true && (n[i] = true);
    return Object.keys(n).length > 0 && (e.extensions = n), e;
  }
};
r(uc, "ShaderMaterial");
var tn = uc;
var dc = class dc2 extends le {
  constructor() {
    super(), this.isCamera = true, this.type = "Camera", this.matrixWorldInverse = new Ft(), this.projectionMatrix = new Ft(), this.projectionMatrixInverse = new Ft(), this.coordinateSystem = dn;
  }
  copy(t, e) {
    return super.copy(t, e), this.matrixWorldInverse.copy(t.matrixWorldInverse), this.projectionMatrix.copy(t.projectionMatrix), this.projectionMatrixInverse.copy(t.projectionMatrixInverse), this.coordinateSystem = t.coordinateSystem, this;
  }
  getWorldDirection(t) {
    return super.getWorldDirection(t).negate();
  }
  updateMatrixWorld(t) {
    super.updateMatrixWorld(t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(t, e) {
    super.updateWorldMatrix(t, e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
r(dc, "Camera");
var lr = dc;
var vn = new P();
var ru = new lt();
var au = new lt();
var fc = class fc2 extends lr {
  constructor(t = 50, e = 1, n = 0.1, i = 2e3) {
    super(), this.isPerspectiveCamera = true, this.type = "PerspectiveCamera", this.fov = t, this.zoom = 1, this.near = n, this.far = i, this.focus = 10, this.aspect = e, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(t, e) {
    return super.copy(t, e), this.fov = t.fov, this.zoom = t.zoom, this.near = t.near, this.far = t.far, this.focus = t.focus, this.aspect = t.aspect, this.view = t.view === null ? null : Object.assign({}, t.view), this.filmGauge = t.filmGauge, this.filmOffset = t.filmOffset, this;
  }
  setFocalLength(t) {
    let e = 0.5 * this.getFilmHeight() / t;
    this.fov = Li * 2 * Math.atan(e), this.updateProjectionMatrix();
  }
  getFocalLength() {
    let t = Math.tan(Ai * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / t;
  }
  getEffectiveFOV() {
    return Li * 2 * Math.atan(Math.tan(Ai * 0.5 * this.fov) / this.zoom);
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  getViewBounds(t, e, n) {
    vn.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse), e.set(vn.x, vn.y).multiplyScalar(-t / vn.z), vn.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse), n.set(vn.x, vn.y).multiplyScalar(-t / vn.z);
  }
  getViewSize(t, e) {
    return this.getViewBounds(t, ru, au), e.subVectors(au, ru);
  }
  setViewOffset(t, e, n, i, r2, o) {
    this.aspect = t / e, this.view === null && (this.view = { enabled: true, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = true, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r2, this.view.height = o, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = false), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    let t = this.near, e = t * Math.tan(Ai * 0.5 * this.fov) / this.zoom, n = 2 * e, i = this.aspect * n, r2 = -0.5 * i, o = this.view;
    if (this.view !== null && this.view.enabled) {
      let c = o.fullWidth, l = o.fullHeight;
      r2 += o.offsetX * i / c, e -= o.offsetY * n / l, i *= o.width / c, n *= o.height / l;
    }
    let a = this.filmOffset;
    a !== 0 && (r2 += t * a / this.getFilmWidth()), this.projectionMatrix.makePerspective(r2, r2 + i, e, e - n, t, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(t) {
    let e = super.toJSON(t);
    return e.object.fov = this.fov, e.object.zoom = this.zoom, e.object.near = this.near, e.object.far = this.far, e.object.focus = this.focus, e.object.aspect = this.aspect, this.view !== null && (e.object.view = Object.assign({}, this.view)), e.object.filmGauge = this.filmGauge, e.object.filmOffset = this.filmOffset, e;
  }
};
r(fc, "PerspectiveCamera");
var Te = fc;
var pi = -90;
var mi = 1;
var pc = class pc2 extends le {
  constructor(t, e, n) {
    super(), this.type = "CubeCamera", this.renderTarget = n, this.coordinateSystem = null, this.activeMipmapLevel = 0;
    let i = new Te(pi, mi, t, e);
    i.layers = this.layers, this.add(i);
    let r2 = new Te(pi, mi, t, e);
    r2.layers = this.layers, this.add(r2);
    let o = new Te(pi, mi, t, e);
    o.layers = this.layers, this.add(o);
    let a = new Te(pi, mi, t, e);
    a.layers = this.layers, this.add(a);
    let c = new Te(pi, mi, t, e);
    c.layers = this.layers, this.add(c);
    let l = new Te(pi, mi, t, e);
    l.layers = this.layers, this.add(l);
  }
  updateCoordinateSystem() {
    let t = this.coordinateSystem, e = this.children.concat(), [n, i, r2, o, a, c] = e;
    for (let l of e) this.remove(l);
    if (t === dn) n.up.set(0, 1, 0), n.lookAt(1, 0, 0), i.up.set(0, 1, 0), i.lookAt(-1, 0, 0), r2.up.set(0, 0, -1), r2.lookAt(0, 1, 0), o.up.set(0, 0, 1), o.lookAt(0, -1, 0), a.up.set(0, 1, 0), a.lookAt(0, 0, 1), c.up.set(0, 1, 0), c.lookAt(0, 0, -1);
    else if (t === er) n.up.set(0, -1, 0), n.lookAt(-1, 0, 0), i.up.set(0, -1, 0), i.lookAt(1, 0, 0), r2.up.set(0, 0, 1), r2.lookAt(0, 1, 0), o.up.set(0, 0, -1), o.lookAt(0, -1, 0), a.up.set(0, -1, 0), a.lookAt(0, 0, 1), c.up.set(0, -1, 0), c.lookAt(0, 0, -1);
    else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + t);
    for (let l of e) this.add(l), l.updateMatrixWorld();
  }
  update(t, e) {
    this.parent === null && this.updateMatrixWorld();
    let { renderTarget: n, activeMipmapLevel: i } = this;
    this.coordinateSystem !== t.coordinateSystem && (this.coordinateSystem = t.coordinateSystem, this.updateCoordinateSystem());
    let [r2, o, a, c, l, h] = this.children, d = t.getRenderTarget(), f = t.getActiveCubeFace(), g = t.getActiveMipmapLevel(), _ = t.xr.enabled;
    t.xr.enabled = false;
    let v = n.texture.generateMipmaps;
    n.texture.generateMipmaps = false, t.setRenderTarget(n, 0, i), t.render(e, r2), t.setRenderTarget(n, 1, i), t.render(e, o), t.setRenderTarget(n, 2, i), t.render(e, a), t.setRenderTarget(n, 3, i), t.render(e, c), t.setRenderTarget(n, 4, i), t.render(e, l), n.texture.generateMipmaps = v, t.setRenderTarget(n, 5, i), t.render(e, h), t.setRenderTarget(d, f, g), t.xr.enabled = _, n.texture.needsPMREMUpdate = true;
  }
};
r(pc, "CubeCamera");
var Ya = pc;
var mc = class mc2 extends be {
  constructor(t, e, n, i, r2, o, a, c, l, h) {
    t = t !== void 0 ? t : [], e = e !== void 0 ? e : Ci, super(t, e, n, i, r2, o, a, c, l, h), this.isCubeTexture = true, this.flipY = false;
  }
  get images() {
    return this.image;
  }
  set images(t) {
    this.image = t;
  }
};
r(mc, "CubeTexture");
var hr = mc;
var gc = class gc2 extends fn {
  constructor(t = 1, e = {}) {
    super(t, t, e), this.isWebGLCubeRenderTarget = true;
    let n = { width: t, height: t, depth: 1 }, i = [n, n, n, n, n, n];
    this.texture = new hr(i, e.mapping, e.wrapS, e.wrapT, e.magFilter, e.minFilter, e.format, e.type, e.anisotropy, e.colorSpace), this.texture.isRenderTargetTexture = true, this.texture.generateMipmaps = e.generateMipmaps !== void 0 ? e.generateMipmaps : false, this.texture.minFilter = e.minFilter !== void 0 ? e.minFilter : Ce;
  }
  fromEquirectangularTexture(t, e) {
    this.texture.type = e.type, this.texture.colorSpace = e.colorSpace, this.texture.generateMipmaps = e.generateMipmaps, this.texture.minFilter = e.minFilter, this.texture.magFilter = e.magFilter;
    let n = { uniforms: { tEquirect: { value: null } }, vertexShader: `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`, fragmentShader: `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			` }, i = new rs(5, 5, 5), r2 = new tn({ name: "CubemapFromEquirect", uniforms: Ui(n.uniforms), vertexShader: n.vertexShader, fragmentShader: n.fragmentShader, side: Pe, blending: An });
    r2.uniforms.tEquirect.value = e;
    let o = new Me(i, r2), a = e.minFilter;
    return e.minFilter === Yn && (e.minFilter = Ce), new Ya(1, 10, this).update(t, o), e.minFilter = a, o.geometry.dispose(), o.material.dispose(), this;
  }
  clear(t, e, n, i) {
    let r2 = t.getRenderTarget();
    for (let o = 0; o < 6; o++) t.setRenderTarget(this, o), t.clear(e, n, i);
    t.setRenderTarget(r2);
  }
};
r(gc, "WebGLCubeRenderTarget");
var Za = gc;
var va = new P();
var Hp = new P();
var Gp = new kt();
var _c = class _c2 {
  constructor(t = new P(1, 0, 0), e = 0) {
    this.isPlane = true, this.normal = t, this.constant = e;
  }
  set(t, e) {
    return this.normal.copy(t), this.constant = e, this;
  }
  setComponents(t, e, n, i) {
    return this.normal.set(t, e, n), this.constant = i, this;
  }
  setFromNormalAndCoplanarPoint(t, e) {
    return this.normal.copy(t), this.constant = -e.dot(this.normal), this;
  }
  setFromCoplanarPoints(t, e, n) {
    let i = va.subVectors(n, e).cross(Hp.subVectors(t, e)).normalize();
    return this.setFromNormalAndCoplanarPoint(i, t), this;
  }
  copy(t) {
    return this.normal.copy(t.normal), this.constant = t.constant, this;
  }
  normalize() {
    let t = 1 / this.normal.length();
    return this.normal.multiplyScalar(t), this.constant *= t, this;
  }
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  distanceToPoint(t) {
    return this.normal.dot(t) + this.constant;
  }
  distanceToSphere(t) {
    return this.distanceToPoint(t.center) - t.radius;
  }
  projectPoint(t, e) {
    return e.copy(t).addScaledVector(this.normal, -this.distanceToPoint(t));
  }
  intersectLine(t, e) {
    let n = t.delta(va), i = this.normal.dot(n);
    if (i === 0) return this.distanceToPoint(t.start) === 0 ? e.copy(t.start) : null;
    let r2 = -(t.start.dot(this.normal) + this.constant) / i;
    return r2 < 0 || r2 > 1 ? null : e.copy(t.start).addScaledVector(n, r2);
  }
  intersectsLine(t) {
    let e = this.distanceToPoint(t.start), n = this.distanceToPoint(t.end);
    return e < 0 && n > 0 || n < 0 && e > 0;
  }
  intersectsBox(t) {
    return t.intersectsPlane(this);
  }
  intersectsSphere(t) {
    return t.intersectsPlane(this);
  }
  coplanarPoint(t) {
    return t.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(t, e) {
    let n = e || Gp.getNormalMatrix(t), i = this.coplanarPoint(va).applyMatrix4(t), r2 = this.normal.applyMatrix3(n).normalize();
    return this.constant = -i.dot(r2), this;
  }
  translate(t) {
    return this.constant -= t.dot(this.normal), this;
  }
  equals(t) {
    return t.normal.equals(this.normal) && t.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
r(_c, "Plane");
var hn = _c;
var kn = new Re();
var Ls = new P();
var xc = class xc2 {
  constructor(t = new hn(), e = new hn(), n = new hn(), i = new hn(), r2 = new hn(), o = new hn()) {
    this.planes = [t, e, n, i, r2, o];
  }
  set(t, e, n, i, r2, o) {
    let a = this.planes;
    return a[0].copy(t), a[1].copy(e), a[2].copy(n), a[3].copy(i), a[4].copy(r2), a[5].copy(o), this;
  }
  copy(t) {
    let e = this.planes;
    for (let n = 0; n < 6; n++) e[n].copy(t.planes[n]);
    return this;
  }
  setFromProjectionMatrix(t, e = dn) {
    let n = this.planes, i = t.elements, r2 = i[0], o = i[1], a = i[2], c = i[3], l = i[4], h = i[5], d = i[6], f = i[7], g = i[8], _ = i[9], v = i[10], m = i[11], p = i[12], w = i[13], x = i[14], b = i[15];
    if (n[0].setComponents(c - r2, f - l, m - g, b - p).normalize(), n[1].setComponents(c + r2, f + l, m + g, b + p).normalize(), n[2].setComponents(c + o, f + h, m + _, b + w).normalize(), n[3].setComponents(c - o, f - h, m - _, b - w).normalize(), n[4].setComponents(c - a, f - d, m - v, b - x).normalize(), e === dn) n[5].setComponents(c + a, f + d, m + v, b + x).normalize();
    else if (e === er) n[5].setComponents(a, d, v, x).normalize();
    else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + e);
    return this;
  }
  intersectsObject(t) {
    if (t.boundingSphere !== void 0) t.boundingSphere === null && t.computeBoundingSphere(), kn.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);
    else {
      let e = t.geometry;
      e.boundingSphere === null && e.computeBoundingSphere(), kn.copy(e.boundingSphere).applyMatrix4(t.matrixWorld);
    }
    return this.intersectsSphere(kn);
  }
  intersectsSprite(t) {
    return kn.center.set(0, 0, 0), kn.radius = 0.7071067811865476, kn.applyMatrix4(t.matrixWorld), this.intersectsSphere(kn);
  }
  intersectsSphere(t) {
    let e = this.planes, n = t.center, i = -t.radius;
    for (let r2 = 0; r2 < 6; r2++) if (e[r2].distanceToPoint(n) < i) return false;
    return true;
  }
  intersectsBox(t) {
    let e = this.planes;
    for (let n = 0; n < 6; n++) {
      let i = e[n];
      if (Ls.x = i.normal.x > 0 ? t.max.x : t.min.x, Ls.y = i.normal.y > 0 ? t.max.y : t.min.y, Ls.z = i.normal.z > 0 ? t.max.z : t.min.z, i.distanceToPoint(Ls) < 0) return false;
    }
    return true;
  }
  containsPoint(t) {
    let e = this.planes;
    for (let n = 0; n < 6; n++) if (e[n].distanceToPoint(t) < 0) return false;
    return true;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
r(xc, "Frustum");
var Di = xc;
function Yd() {
  let s = null, t = false, e = null, n = null;
  function i(r2, o) {
    e(r2, o), n = s.requestAnimationFrame(i);
  }
  return r(i, "onAnimationFrame"), { start: function() {
    t !== true && e !== null && (n = s.requestAnimationFrame(i), t = true);
  }, stop: function() {
    s.cancelAnimationFrame(n), t = false;
  }, setAnimationLoop: function(r2) {
    e = r2;
  }, setContext: function(r2) {
    s = r2;
  } };
}
r(Yd, "WebGLAnimation");
function Wp(s, t) {
  let e = t.isWebGL2, n = /* @__PURE__ */ new WeakMap();
  function i(l, h) {
    let d = l.array, f = l.usage, g = d.byteLength, _ = s.createBuffer();
    s.bindBuffer(h, _), s.bufferData(h, d, f), l.onUploadCallback();
    let v;
    if (d instanceof Float32Array) v = s.FLOAT;
    else if (d instanceof Uint16Array) if (l.isFloat16BufferAttribute) if (e) v = s.HALF_FLOAT;
    else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");
    else v = s.UNSIGNED_SHORT;
    else if (d instanceof Int16Array) v = s.SHORT;
    else if (d instanceof Uint32Array) v = s.UNSIGNED_INT;
    else if (d instanceof Int32Array) v = s.INT;
    else if (d instanceof Int8Array) v = s.BYTE;
    else if (d instanceof Uint8Array) v = s.UNSIGNED_BYTE;
    else if (d instanceof Uint8ClampedArray) v = s.UNSIGNED_BYTE;
    else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + d);
    return { buffer: _, type: v, bytesPerElement: d.BYTES_PER_ELEMENT, version: l.version, size: g };
  }
  r(i, "createBuffer");
  function r2(l, h, d) {
    let f = h.array, g = h._updateRange, _ = h.updateRanges;
    if (s.bindBuffer(d, l), g.count === -1 && _.length === 0 && s.bufferSubData(d, 0, f), _.length !== 0) {
      for (let v = 0, m = _.length; v < m; v++) {
        let p = _[v];
        e ? s.bufferSubData(d, p.start * f.BYTES_PER_ELEMENT, f, p.start, p.count) : s.bufferSubData(d, p.start * f.BYTES_PER_ELEMENT, f.subarray(p.start, p.start + p.count));
      }
      h.clearUpdateRanges();
    }
    g.count !== -1 && (e ? s.bufferSubData(d, g.offset * f.BYTES_PER_ELEMENT, f, g.offset, g.count) : s.bufferSubData(d, g.offset * f.BYTES_PER_ELEMENT, f.subarray(g.offset, g.offset + g.count)), g.count = -1), h.onUploadCallback();
  }
  r(r2, "updateBuffer");
  function o(l) {
    return l.isInterleavedBufferAttribute && (l = l.data), n.get(l);
  }
  r(o, "get");
  function a(l) {
    l.isInterleavedBufferAttribute && (l = l.data);
    let h = n.get(l);
    h && (s.deleteBuffer(h.buffer), n.delete(l));
  }
  r(a, "remove");
  function c(l, h) {
    if (l.isGLBufferAttribute) {
      let f = n.get(l);
      (!f || f.version < l.version) && n.set(l, { buffer: l.buffer, type: l.type, bytesPerElement: l.elementSize, version: l.version });
      return;
    }
    l.isInterleavedBufferAttribute && (l = l.data);
    let d = n.get(l);
    if (d === void 0) n.set(l, i(l, h));
    else if (d.version < l.version) {
      if (d.size !== l.array.byteLength) throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
      r2(d.buffer, l, h), d.version = l.version;
    }
  }
  return r(c, "update"), { get: o, remove: a, update: c };
}
r(Wp, "WebGLAttributes");
var Lr = class Lr2 extends Le {
  constructor(t = 1, e = 1, n = 1, i = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = { width: t, height: e, widthSegments: n, heightSegments: i };
    let r2 = t / 2, o = e / 2, a = Math.floor(n), c = Math.floor(i), l = a + 1, h = c + 1, d = t / a, f = e / c, g = [], _ = [], v = [], m = [];
    for (let p = 0; p < h; p++) {
      let w = p * f - o;
      for (let x = 0; x < l; x++) {
        let b = x * d - r2;
        _.push(b, -w, 0), v.push(0, 0, 1), m.push(x / a), m.push(1 - p / c);
      }
    }
    for (let p = 0; p < c; p++) for (let w = 0; w < a; w++) {
      let x = w + l * p, b = w + l * (p + 1), L = w + 1 + l * (p + 1), C = w + 1 + l * p;
      g.push(x, b, C), g.push(b, L, C);
    }
    this.setIndex(g), this.setAttribute("position", new ce(_, 3)), this.setAttribute("normal", new ce(v, 3)), this.setAttribute("uv", new ce(m, 2));
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  static fromJSON(t) {
    return new Lr2(t.width, t.height, t.widthSegments, t.heightSegments);
  }
};
r(Lr, "PlaneGeometry");
var ur = Lr;
var Xp = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`;
var qp = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`;
var Yp = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`;
var Zp = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`;
var Jp = `#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`;
var $p = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`;
var Kp = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`;
var Qp = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`;
var jp = `#ifdef USE_BATCHING
	attribute float batchId;
	uniform highp sampler2D batchingTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`;
var tm = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( batchId );
#endif`;
var em = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`;
var nm = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`;
var im = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`;
var sm = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`;
var rm = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`;
var am = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`;
var om = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`;
var cm = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`;
var lm = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`;
var hm = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`;
var um = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`;
var dm = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`;
var fm = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`;
var pm = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`;
var mm = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`;
var gm = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`;
var _m = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`;
var xm = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`;
var vm = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`;
var ym = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`;
var Mm = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var Sm = `
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return sRGBTransferOETF( value );
}`;
var bm = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`;
var Em = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`;
var wm = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`;
var Am = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`;
var Tm = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`;
var Rm = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`;
var Cm = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`;
var Pm = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`;
var Im = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`;
var Lm = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`;
var Um = `#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`;
var Dm = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`;
var Nm = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`;
var Om = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`;
var Fm = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`;
var Bm = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`;
var zm = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`;
var km = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`;
var Vm = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`;
var Hm = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`;
var Gm = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`;
var Wm = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`;
var Xm = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`;
var qm = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`;
var Ym = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`;
var Zm = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`;
var Jm = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`;
var $m = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`;
var Km = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`;
var Qm = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`;
var jm = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`;
var tg = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`;
var eg = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`;
var ng = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`;
var ig = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`;
var sg = `#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[MORPHTARGETS_COUNT];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`;
var rg = `#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`;
var ag = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`;
var og = `#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
	#endif
	#ifdef MORPHTARGETS_TEXTURE
		#ifndef USE_INSTANCING_MORPH
			uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		#endif
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`;
var cg = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`;
var lg = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`;
var hg = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`;
var ug = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`;
var dg = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`;
var fg = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`;
var pg = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`;
var mg = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`;
var gg = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`;
var _g = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`;
var xg = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`;
var vg = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`;
var yg = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`;
var Mg = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`;
var Sg = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`;
var bg = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`;
var Eg = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`;
var wg = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`;
var Ag = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`;
var Tg = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`;
var Rg = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`;
var Cg = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`;
var Pg = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`;
var Ig = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`;
var Lg = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`;
var Ug = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`;
var Dg = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`;
var Ng = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`;
var Og = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`;
var Fg = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`;
var Bg = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	float startCompression = 0.8 - 0.04;
	float desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min(color.r, min(color.g, color.b));
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max(color.r, max(color.g, color.b));
	if (peak < startCompression) return color;
	float d = 1. - startCompression;
	float newPeak = 1. - d * d / (peak + d - startCompression);
	color *= newPeak / peak;
	float g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);
	return mix(color, vec3(1, 1, 1), g);
}
vec3 CustomToneMapping( vec3 color ) { return color; }`;
var zg = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`;
var kg = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`;
var Vg = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`;
var Hg = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`;
var Gg = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`;
var Wg = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
var Xg = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`;
var qg = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`;
var Yg = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`;
var Zg = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`;
var Jg = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`;
var $g = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`;
var Kg = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`;
var Qg = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`;
var jg = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`;
var t_ = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`;
var e_ = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`;
var n_ = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`;
var i_ = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`;
var s_ = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`;
var r_ = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`;
var a_ = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
var o_ = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`;
var c_ = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
var l_ = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`;
var h_ = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
var u_ = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`;
var d_ = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`;
var f_ = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`;
var p_ = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
var m_ = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`;
var g_ = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
var __ = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`;
var x_ = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`;
var v_ = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`;
var y_ = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`;
var M_ = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`;
var S_ = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`;
var b_ = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`;
var E_ = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`;
var zt = { alphahash_fragment: Xp, alphahash_pars_fragment: qp, alphamap_fragment: Yp, alphamap_pars_fragment: Zp, alphatest_fragment: Jp, alphatest_pars_fragment: $p, aomap_fragment: Kp, aomap_pars_fragment: Qp, batching_pars_vertex: jp, batching_vertex: tm, begin_vertex: em, beginnormal_vertex: nm, bsdfs: im, iridescence_fragment: sm, bumpmap_pars_fragment: rm, clipping_planes_fragment: am, clipping_planes_pars_fragment: om, clipping_planes_pars_vertex: cm, clipping_planes_vertex: lm, color_fragment: hm, color_pars_fragment: um, color_pars_vertex: dm, color_vertex: fm, common: pm, cube_uv_reflection_fragment: mm, defaultnormal_vertex: gm, displacementmap_pars_vertex: _m, displacementmap_vertex: xm, emissivemap_fragment: vm, emissivemap_pars_fragment: ym, colorspace_fragment: Mm, colorspace_pars_fragment: Sm, envmap_fragment: bm, envmap_common_pars_fragment: Em, envmap_pars_fragment: wm, envmap_pars_vertex: Am, envmap_physical_pars_fragment: Bm, envmap_vertex: Tm, fog_vertex: Rm, fog_pars_vertex: Cm, fog_fragment: Pm, fog_pars_fragment: Im, gradientmap_pars_fragment: Lm, lightmap_fragment: Um, lightmap_pars_fragment: Dm, lights_lambert_fragment: Nm, lights_lambert_pars_fragment: Om, lights_pars_begin: Fm, lights_toon_fragment: zm, lights_toon_pars_fragment: km, lights_phong_fragment: Vm, lights_phong_pars_fragment: Hm, lights_physical_fragment: Gm, lights_physical_pars_fragment: Wm, lights_fragment_begin: Xm, lights_fragment_maps: qm, lights_fragment_end: Ym, logdepthbuf_fragment: Zm, logdepthbuf_pars_fragment: Jm, logdepthbuf_pars_vertex: $m, logdepthbuf_vertex: Km, map_fragment: Qm, map_pars_fragment: jm, map_particle_fragment: tg, map_particle_pars_fragment: eg, metalnessmap_fragment: ng, metalnessmap_pars_fragment: ig, morphinstance_vertex: sg, morphcolor_vertex: rg, morphnormal_vertex: ag, morphtarget_pars_vertex: og, morphtarget_vertex: cg, normal_fragment_begin: lg, normal_fragment_maps: hg, normal_pars_fragment: ug, normal_pars_vertex: dg, normal_vertex: fg, normalmap_pars_fragment: pg, clearcoat_normal_fragment_begin: mg, clearcoat_normal_fragment_maps: gg, clearcoat_pars_fragment: _g, iridescence_pars_fragment: xg, opaque_fragment: vg, packing: yg, premultiplied_alpha_fragment: Mg, project_vertex: Sg, dithering_fragment: bg, dithering_pars_fragment: Eg, roughnessmap_fragment: wg, roughnessmap_pars_fragment: Ag, shadowmap_pars_fragment: Tg, shadowmap_pars_vertex: Rg, shadowmap_vertex: Cg, shadowmask_pars_fragment: Pg, skinbase_vertex: Ig, skinning_pars_vertex: Lg, skinning_vertex: Ug, skinnormal_vertex: Dg, specularmap_fragment: Ng, specularmap_pars_fragment: Og, tonemapping_fragment: Fg, tonemapping_pars_fragment: Bg, transmission_fragment: zg, transmission_pars_fragment: kg, uv_pars_fragment: Vg, uv_pars_vertex: Hg, uv_vertex: Gg, worldpos_vertex: Wg, background_vert: Xg, background_frag: qg, backgroundCube_vert: Yg, backgroundCube_frag: Zg, cube_vert: Jg, cube_frag: $g, depth_vert: Kg, depth_frag: Qg, distanceRGBA_vert: jg, distanceRGBA_frag: t_, equirect_vert: e_, equirect_frag: n_, linedashed_vert: i_, linedashed_frag: s_, meshbasic_vert: r_, meshbasic_frag: a_, meshlambert_vert: o_, meshlambert_frag: c_, meshmatcap_vert: l_, meshmatcap_frag: h_, meshnormal_vert: u_, meshnormal_frag: d_, meshphong_vert: f_, meshphong_frag: p_, meshphysical_vert: m_, meshphysical_frag: g_, meshtoon_vert: __, meshtoon_frag: x_, points_vert: v_, points_frag: y_, shadow_vert: M_, shadow_frag: S_, sprite_vert: b_, sprite_frag: E_ };
var ht = { common: { diffuse: { value: new Vt(16777215) }, opacity: { value: 1 }, map: { value: null }, mapTransform: { value: new kt() }, alphaMap: { value: null }, alphaMapTransform: { value: new kt() }, alphaTest: { value: 0 } }, specularmap: { specularMap: { value: null }, specularMapTransform: { value: new kt() } }, envmap: { envMap: { value: null }, envMapRotation: { value: new kt() }, flipEnvMap: { value: -1 }, reflectivity: { value: 1 }, ior: { value: 1.5 }, refractionRatio: { value: 0.98 } }, aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 }, aoMapTransform: { value: new kt() } }, lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 }, lightMapTransform: { value: new kt() } }, bumpmap: { bumpMap: { value: null }, bumpMapTransform: { value: new kt() }, bumpScale: { value: 1 } }, normalmap: { normalMap: { value: null }, normalMapTransform: { value: new kt() }, normalScale: { value: new lt(1, 1) } }, displacementmap: { displacementMap: { value: null }, displacementMapTransform: { value: new kt() }, displacementScale: { value: 1 }, displacementBias: { value: 0 } }, emissivemap: { emissiveMap: { value: null }, emissiveMapTransform: { value: new kt() } }, metalnessmap: { metalnessMap: { value: null }, metalnessMapTransform: { value: new kt() } }, roughnessmap: { roughnessMap: { value: null }, roughnessMapTransform: { value: new kt() } }, gradientmap: { gradientMap: { value: null } }, fog: { fogDensity: { value: 25e-5 }, fogNear: { value: 1 }, fogFar: { value: 2e3 }, fogColor: { value: new Vt(16777215) } }, lights: { ambientLightColor: { value: [] }, lightProbe: { value: [] }, directionalLights: { value: [], properties: { direction: {}, color: {} } }, directionalLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} } }, directionalShadowMap: { value: [] }, directionalShadowMatrix: { value: [] }, spotLights: { value: [], properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {} } }, spotLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} } }, spotLightMap: { value: [] }, spotShadowMap: { value: [] }, spotLightMatrix: { value: [] }, pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {} } }, pointLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {}, shadowCameraNear: {}, shadowCameraFar: {} } }, pointShadowMap: { value: [] }, pointShadowMatrix: { value: [] }, hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } }, rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } }, ltc_1: { value: null }, ltc_2: { value: null } }, points: { diffuse: { value: new Vt(16777215) }, opacity: { value: 1 }, size: { value: 1 }, scale: { value: 1 }, map: { value: null }, alphaMap: { value: null }, alphaMapTransform: { value: new kt() }, alphaTest: { value: 0 }, uvTransform: { value: new kt() } }, sprite: { diffuse: { value: new Vt(16777215) }, opacity: { value: 1 }, center: { value: new lt(0.5, 0.5) }, rotation: { value: 0 }, map: { value: null }, mapTransform: { value: new kt() }, alphaMap: { value: null }, alphaMapTransform: { value: new kt() }, alphaTest: { value: 0 } } };
var Qe = { basic: { uniforms: Ae([ht.common, ht.specularmap, ht.envmap, ht.aomap, ht.lightmap, ht.fog]), vertexShader: zt.meshbasic_vert, fragmentShader: zt.meshbasic_frag }, lambert: { uniforms: Ae([ht.common, ht.specularmap, ht.envmap, ht.aomap, ht.lightmap, ht.emissivemap, ht.bumpmap, ht.normalmap, ht.displacementmap, ht.fog, ht.lights, { emissive: { value: new Vt(0) } }]), vertexShader: zt.meshlambert_vert, fragmentShader: zt.meshlambert_frag }, phong: { uniforms: Ae([ht.common, ht.specularmap, ht.envmap, ht.aomap, ht.lightmap, ht.emissivemap, ht.bumpmap, ht.normalmap, ht.displacementmap, ht.fog, ht.lights, { emissive: { value: new Vt(0) }, specular: { value: new Vt(1118481) }, shininess: { value: 30 } }]), vertexShader: zt.meshphong_vert, fragmentShader: zt.meshphong_frag }, standard: { uniforms: Ae([ht.common, ht.envmap, ht.aomap, ht.lightmap, ht.emissivemap, ht.bumpmap, ht.normalmap, ht.displacementmap, ht.roughnessmap, ht.metalnessmap, ht.fog, ht.lights, { emissive: { value: new Vt(0) }, roughness: { value: 1 }, metalness: { value: 0 }, envMapIntensity: { value: 1 } }]), vertexShader: zt.meshphysical_vert, fragmentShader: zt.meshphysical_frag }, toon: { uniforms: Ae([ht.common, ht.aomap, ht.lightmap, ht.emissivemap, ht.bumpmap, ht.normalmap, ht.displacementmap, ht.gradientmap, ht.fog, ht.lights, { emissive: { value: new Vt(0) } }]), vertexShader: zt.meshtoon_vert, fragmentShader: zt.meshtoon_frag }, matcap: { uniforms: Ae([ht.common, ht.bumpmap, ht.normalmap, ht.displacementmap, ht.fog, { matcap: { value: null } }]), vertexShader: zt.meshmatcap_vert, fragmentShader: zt.meshmatcap_frag }, points: { uniforms: Ae([ht.points, ht.fog]), vertexShader: zt.points_vert, fragmentShader: zt.points_frag }, dashed: { uniforms: Ae([ht.common, ht.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]), vertexShader: zt.linedashed_vert, fragmentShader: zt.linedashed_frag }, depth: { uniforms: Ae([ht.common, ht.displacementmap]), vertexShader: zt.depth_vert, fragmentShader: zt.depth_frag }, normal: { uniforms: Ae([ht.common, ht.bumpmap, ht.normalmap, ht.displacementmap, { opacity: { value: 1 } }]), vertexShader: zt.meshnormal_vert, fragmentShader: zt.meshnormal_frag }, sprite: { uniforms: Ae([ht.sprite, ht.fog]), vertexShader: zt.sprite_vert, fragmentShader: zt.sprite_frag }, background: { uniforms: { uvTransform: { value: new kt() }, t2D: { value: null }, backgroundIntensity: { value: 1 } }, vertexShader: zt.background_vert, fragmentShader: zt.background_frag }, backgroundCube: { uniforms: { envMap: { value: null }, flipEnvMap: { value: -1 }, backgroundBlurriness: { value: 0 }, backgroundIntensity: { value: 1 }, backgroundRotation: { value: new kt() } }, vertexShader: zt.backgroundCube_vert, fragmentShader: zt.backgroundCube_frag }, cube: { uniforms: { tCube: { value: null }, tFlip: { value: -1 }, opacity: { value: 1 } }, vertexShader: zt.cube_vert, fragmentShader: zt.cube_frag }, equirect: { uniforms: { tEquirect: { value: null } }, vertexShader: zt.equirect_vert, fragmentShader: zt.equirect_frag }, distanceRGBA: { uniforms: Ae([ht.common, ht.displacementmap, { referencePosition: { value: new P() }, nearDistance: { value: 1 }, farDistance: { value: 1e3 } }]), vertexShader: zt.distanceRGBA_vert, fragmentShader: zt.distanceRGBA_frag }, shadow: { uniforms: Ae([ht.lights, ht.fog, { color: { value: new Vt(0) }, opacity: { value: 1 } }]), vertexShader: zt.shadow_vert, fragmentShader: zt.shadow_frag } };
Qe.physical = { uniforms: Ae([Qe.standard.uniforms, { clearcoat: { value: 0 }, clearcoatMap: { value: null }, clearcoatMapTransform: { value: new kt() }, clearcoatNormalMap: { value: null }, clearcoatNormalMapTransform: { value: new kt() }, clearcoatNormalScale: { value: new lt(1, 1) }, clearcoatRoughness: { value: 0 }, clearcoatRoughnessMap: { value: null }, clearcoatRoughnessMapTransform: { value: new kt() }, iridescence: { value: 0 }, iridescenceMap: { value: null }, iridescenceMapTransform: { value: new kt() }, iridescenceIOR: { value: 1.3 }, iridescenceThicknessMinimum: { value: 100 }, iridescenceThicknessMaximum: { value: 400 }, iridescenceThicknessMap: { value: null }, iridescenceThicknessMapTransform: { value: new kt() }, sheen: { value: 0 }, sheenColor: { value: new Vt(0) }, sheenColorMap: { value: null }, sheenColorMapTransform: { value: new kt() }, sheenRoughness: { value: 1 }, sheenRoughnessMap: { value: null }, sheenRoughnessMapTransform: { value: new kt() }, transmission: { value: 0 }, transmissionMap: { value: null }, transmissionMapTransform: { value: new kt() }, transmissionSamplerSize: { value: new lt() }, transmissionSamplerMap: { value: null }, thickness: { value: 0 }, thicknessMap: { value: null }, thicknessMapTransform: { value: new kt() }, attenuationDistance: { value: 0 }, attenuationColor: { value: new Vt(0) }, specularColor: { value: new Vt(1, 1, 1) }, specularColorMap: { value: null }, specularColorMapTransform: { value: new kt() }, specularIntensity: { value: 1 }, specularIntensityMap: { value: null }, specularIntensityMapTransform: { value: new kt() }, anisotropyVector: { value: new lt() }, anisotropyMap: { value: null }, anisotropyMapTransform: { value: new kt() } }]), vertexShader: zt.meshphysical_vert, fragmentShader: zt.meshphysical_frag };
var Us = { r: 0, b: 0, g: 0 };
var Vn = new Je();
var w_ = new Ft();
function A_(s, t, e, n, i, r2, o) {
  let a = new Vt(0), c = r2 === true ? 0 : 1, l, h, d = null, f = 0, g = null;
  function _(m, p) {
    let w = false, x = p.isScene === true ? p.background : null;
    x && x.isTexture && (x = (p.backgroundBlurriness > 0 ? e : t).get(x)), x === null ? v(a, c) : x && x.isColor && (v(x, 1), w = true);
    let b = s.xr.getEnvironmentBlendMode();
    b === "additive" ? n.buffers.color.setClear(0, 0, 0, 1, o) : b === "alpha-blend" && n.buffers.color.setClear(0, 0, 0, 0, o), (s.autoClear || w) && s.clear(s.autoClearColor, s.autoClearDepth, s.autoClearStencil), x && (x.isCubeTexture || x.mapping === kr) ? (h === void 0 && (h = new Me(new rs(1, 1, 1), new tn({ name: "BackgroundCubeMaterial", uniforms: Ui(Qe.backgroundCube.uniforms), vertexShader: Qe.backgroundCube.vertexShader, fragmentShader: Qe.backgroundCube.fragmentShader, side: Pe, depthTest: false, depthWrite: false, fog: false })), h.geometry.deleteAttribute("normal"), h.geometry.deleteAttribute("uv"), h.onBeforeRender = function(L, C, R) {
      this.matrixWorld.copyPosition(R.matrixWorld);
    }, Object.defineProperty(h.material, "envMap", { get: function() {
      return this.uniforms.envMap.value;
    } }), i.update(h)), Vn.copy(p.backgroundRotation), Vn.x *= -1, Vn.y *= -1, Vn.z *= -1, x.isCubeTexture && x.isRenderTargetTexture === false && (Vn.y *= -1, Vn.z *= -1), h.material.uniforms.envMap.value = x, h.material.uniforms.flipEnvMap.value = x.isCubeTexture && x.isRenderTargetTexture === false ? -1 : 1, h.material.uniforms.backgroundBlurriness.value = p.backgroundBlurriness, h.material.uniforms.backgroundIntensity.value = p.backgroundIntensity, h.material.uniforms.backgroundRotation.value.setFromMatrix4(w_.makeRotationFromEuler(Vn)), h.material.toneMapped = Jt.getTransfer(x.colorSpace) !== jt, (d !== x || f !== x.version || g !== s.toneMapping) && (h.material.needsUpdate = true, d = x, f = x.version, g = s.toneMapping), h.layers.enableAll(), m.unshift(h, h.geometry, h.material, 0, 0, null)) : x && x.isTexture && (l === void 0 && (l = new Me(new ur(2, 2), new tn({ name: "BackgroundMaterial", uniforms: Ui(Qe.background.uniforms), vertexShader: Qe.background.vertexShader, fragmentShader: Qe.background.fragmentShader, side: Cn, depthTest: false, depthWrite: false, fog: false })), l.geometry.deleteAttribute("normal"), Object.defineProperty(l.material, "map", { get: function() {
      return this.uniforms.t2D.value;
    } }), i.update(l)), l.material.uniforms.t2D.value = x, l.material.uniforms.backgroundIntensity.value = p.backgroundIntensity, l.material.toneMapped = Jt.getTransfer(x.colorSpace) !== jt, x.matrixAutoUpdate === true && x.updateMatrix(), l.material.uniforms.uvTransform.value.copy(x.matrix), (d !== x || f !== x.version || g !== s.toneMapping) && (l.material.needsUpdate = true, d = x, f = x.version, g = s.toneMapping), l.layers.enableAll(), m.unshift(l, l.geometry, l.material, 0, 0, null));
  }
  r(_, "render");
  function v(m, p) {
    m.getRGB(Us, qd(s)), n.buffers.color.setClear(Us.r, Us.g, Us.b, p, o);
  }
  return r(v, "setClear"), { getClearColor: function() {
    return a;
  }, setClearColor: function(m, p = 1) {
    a.set(m), c = p, v(a, c);
  }, getClearAlpha: function() {
    return c;
  }, setClearAlpha: function(m) {
    c = m, v(a, c);
  }, render: _ };
}
r(A_, "WebGLBackground");
function T_(s, t, e, n) {
  let i = s.getParameter(s.MAX_VERTEX_ATTRIBS), r2 = n.isWebGL2 ? null : t.get("OES_vertex_array_object"), o = n.isWebGL2 || r2 !== null, a = {}, c = m(null), l = c, h = false;
  function d(I, G, k, J, q2) {
    let Y = false;
    if (o) {
      let it = v(J, k, G);
      l !== it && (l = it, g(l.object)), Y = p(I, J, k, q2), Y && w(I, J, k, q2);
    } else {
      let it = G.wireframe === true;
      (l.geometry !== J.id || l.program !== k.id || l.wireframe !== it) && (l.geometry = J.id, l.program = k.id, l.wireframe = it, Y = true);
    }
    q2 !== null && e.update(q2, s.ELEMENT_ARRAY_BUFFER), (Y || h) && (h = false, D(I, G, k, J), q2 !== null && s.bindBuffer(s.ELEMENT_ARRAY_BUFFER, e.get(q2).buffer));
  }
  r(d, "setup");
  function f() {
    return n.isWebGL2 ? s.createVertexArray() : r2.createVertexArrayOES();
  }
  r(f, "createVertexArrayObject");
  function g(I) {
    return n.isWebGL2 ? s.bindVertexArray(I) : r2.bindVertexArrayOES(I);
  }
  r(g, "bindVertexArrayObject");
  function _(I) {
    return n.isWebGL2 ? s.deleteVertexArray(I) : r2.deleteVertexArrayOES(I);
  }
  r(_, "deleteVertexArrayObject");
  function v(I, G, k) {
    let J = k.wireframe === true, q2 = a[I.id];
    q2 === void 0 && (q2 = {}, a[I.id] = q2);
    let Y = q2[G.id];
    Y === void 0 && (Y = {}, q2[G.id] = Y);
    let it = Y[J];
    return it === void 0 && (it = m(f()), Y[J] = it), it;
  }
  r(v, "getBindingState");
  function m(I) {
    let G = [], k = [], J = [];
    for (let q2 = 0; q2 < i; q2++) G[q2] = 0, k[q2] = 0, J[q2] = 0;
    return { geometry: null, program: null, wireframe: false, newAttributes: G, enabledAttributes: k, attributeDivisors: J, object: I, attributes: {}, index: null };
  }
  r(m, "createBindingState");
  function p(I, G, k, J) {
    let q2 = l.attributes, Y = G.attributes, it = 0, nt = k.getAttributes();
    for (let _t in nt) if (nt[_t].location >= 0) {
      let V = q2[_t], tt = Y[_t];
      if (tt === void 0 && (_t === "instanceMatrix" && I.instanceMatrix && (tt = I.instanceMatrix), _t === "instanceColor" && I.instanceColor && (tt = I.instanceColor)), V === void 0 || V.attribute !== tt || tt && V.data !== tt.data) return true;
      it++;
    }
    return l.attributesNum !== it || l.index !== J;
  }
  r(p, "needsUpdate");
  function w(I, G, k, J) {
    let q2 = {}, Y = G.attributes, it = 0, nt = k.getAttributes();
    for (let _t in nt) if (nt[_t].location >= 0) {
      let V = Y[_t];
      V === void 0 && (_t === "instanceMatrix" && I.instanceMatrix && (V = I.instanceMatrix), _t === "instanceColor" && I.instanceColor && (V = I.instanceColor));
      let tt = {};
      tt.attribute = V, V && V.data && (tt.data = V.data), q2[_t] = tt, it++;
    }
    l.attributes = q2, l.attributesNum = it, l.index = J;
  }
  r(w, "saveCache");
  function x() {
    let I = l.newAttributes;
    for (let G = 0, k = I.length; G < k; G++) I[G] = 0;
  }
  r(x, "initAttributes");
  function b(I) {
    L(I, 0);
  }
  r(b, "enableAttribute");
  function L(I, G) {
    let k = l.newAttributes, J = l.enabledAttributes, q2 = l.attributeDivisors;
    k[I] = 1, J[I] === 0 && (s.enableVertexAttribArray(I), J[I] = 1), q2[I] !== G && ((n.isWebGL2 ? s : t.get("ANGLE_instanced_arrays"))[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](I, G), q2[I] = G);
  }
  r(L, "enableAttributeAndDivisor");
  function C() {
    let I = l.newAttributes, G = l.enabledAttributes;
    for (let k = 0, J = G.length; k < J; k++) G[k] !== I[k] && (s.disableVertexAttribArray(k), G[k] = 0);
  }
  r(C, "disableUnusedAttributes");
  function R(I, G, k, J, q2, Y, it) {
    it === true ? s.vertexAttribIPointer(I, G, k, q2, Y) : s.vertexAttribPointer(I, G, k, J, q2, Y);
  }
  r(R, "vertexAttribPointer");
  function D(I, G, k, J) {
    if (n.isWebGL2 === false && (I.isInstancedMesh || J.isInstancedBufferGeometry) && t.get("ANGLE_instanced_arrays") === null) return;
    x();
    let q2 = J.attributes, Y = k.getAttributes(), it = G.defaultAttributeValues;
    for (let nt in Y) {
      let _t = Y[nt];
      if (_t.location >= 0) {
        let It = q2[nt];
        if (It === void 0 && (nt === "instanceMatrix" && I.instanceMatrix && (It = I.instanceMatrix), nt === "instanceColor" && I.instanceColor && (It = I.instanceColor)), It !== void 0) {
          let V = It.normalized, tt = It.itemSize, mt = e.get(It);
          if (mt === void 0) continue;
          let wt = mt.buffer, Mt = mt.type, vt = mt.bytesPerElement, Ht = n.isWebGL2 === true && (Mt === s.INT || Mt === s.UNSIGNED_INT || It.gpuType === Dd);
          if (It.isInterleavedBufferAttribute) {
            let At = It.data, T = At.stride, at = It.offset;
            if (At.isInstancedInterleavedBuffer) {
              for (let Z = 0; Z < _t.locationSize; Z++) L(_t.location + Z, At.meshPerAttribute);
              I.isInstancedMesh !== true && J._maxInstanceCount === void 0 && (J._maxInstanceCount = At.meshPerAttribute * At.count);
            } else for (let Z = 0; Z < _t.locationSize; Z++) b(_t.location + Z);
            s.bindBuffer(s.ARRAY_BUFFER, wt);
            for (let Z = 0; Z < _t.locationSize; Z++) R(_t.location + Z, tt / _t.locationSize, Mt, V, T * vt, (at + tt / _t.locationSize * Z) * vt, Ht);
          } else {
            if (It.isInstancedBufferAttribute) {
              for (let At = 0; At < _t.locationSize; At++) L(_t.location + At, It.meshPerAttribute);
              I.isInstancedMesh !== true && J._maxInstanceCount === void 0 && (J._maxInstanceCount = It.meshPerAttribute * It.count);
            } else for (let At = 0; At < _t.locationSize; At++) b(_t.location + At);
            s.bindBuffer(s.ARRAY_BUFFER, wt);
            for (let At = 0; At < _t.locationSize; At++) R(_t.location + At, tt / _t.locationSize, Mt, V, tt * vt, tt / _t.locationSize * At * vt, Ht);
          }
        } else if (it !== void 0) {
          let V = it[nt];
          if (V !== void 0) switch (V.length) {
            case 2:
              s.vertexAttrib2fv(_t.location, V);
              break;
            case 3:
              s.vertexAttrib3fv(_t.location, V);
              break;
            case 4:
              s.vertexAttrib4fv(_t.location, V);
              break;
            default:
              s.vertexAttrib1fv(_t.location, V);
          }
        }
      }
    }
    C();
  }
  r(D, "setupVertexAttributes");
  function X() {
    Q();
    for (let I in a) {
      let G = a[I];
      for (let k in G) {
        let J = G[k];
        for (let q2 in J) _(J[q2].object), delete J[q2];
        delete G[k];
      }
      delete a[I];
    }
  }
  r(X, "dispose");
  function M(I) {
    if (a[I.id] === void 0) return;
    let G = a[I.id];
    for (let k in G) {
      let J = G[k];
      for (let q2 in J) _(J[q2].object), delete J[q2];
      delete G[k];
    }
    delete a[I.id];
  }
  r(M, "releaseStatesOfGeometry");
  function A(I) {
    for (let G in a) {
      let k = a[G];
      if (k[I.id] === void 0) continue;
      let J = k[I.id];
      for (let q2 in J) _(J[q2].object), delete J[q2];
      delete k[I.id];
    }
  }
  r(A, "releaseStatesOfProgram");
  function Q() {
    $(), h = true, l !== c && (l = c, g(l.object));
  }
  r(Q, "reset");
  function $() {
    c.geometry = null, c.program = null, c.wireframe = false;
  }
  return r($, "resetDefaultState"), { setup: d, reset: Q, resetDefaultState: $, dispose: X, releaseStatesOfGeometry: M, releaseStatesOfProgram: A, initAttributes: x, enableAttribute: b, disableUnusedAttributes: C };
}
r(T_, "WebGLBindingStates");
function R_(s, t, e, n) {
  let i = n.isWebGL2, r2;
  function o(h) {
    r2 = h;
  }
  r(o, "setMode");
  function a(h, d) {
    s.drawArrays(r2, h, d), e.update(d, r2, 1);
  }
  r(a, "render");
  function c(h, d, f) {
    if (f === 0) return;
    let g, _;
    if (i) g = s, _ = "drawArraysInstanced";
    else if (g = t.get("ANGLE_instanced_arrays"), _ = "drawArraysInstancedANGLE", g === null) {
      console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    g[_](r2, h, d, f), e.update(d, r2, f);
  }
  r(c, "renderInstances");
  function l(h, d, f) {
    if (f === 0) return;
    let g = t.get("WEBGL_multi_draw");
    if (g === null) for (let _ = 0; _ < f; _++) this.render(h[_], d[_]);
    else {
      g.multiDrawArraysWEBGL(r2, h, 0, d, 0, f);
      let _ = 0;
      for (let v = 0; v < f; v++) _ += d[v];
      e.update(_, r2, 1);
    }
  }
  r(l, "renderMultiDraw"), this.setMode = o, this.render = a, this.renderInstances = c, this.renderMultiDraw = l;
}
r(R_, "WebGLBufferRenderer");
function C_(s, t, e) {
  let n;
  function i() {
    if (n !== void 0) return n;
    if (t.has("EXT_texture_filter_anisotropic") === true) {
      let R = t.get("EXT_texture_filter_anisotropic");
      n = s.getParameter(R.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else n = 0;
    return n;
  }
  r(i, "getMaxAnisotropy");
  function r2(R) {
    if (R === "highp") {
      if (s.getShaderPrecisionFormat(s.VERTEX_SHADER, s.HIGH_FLOAT).precision > 0 && s.getShaderPrecisionFormat(s.FRAGMENT_SHADER, s.HIGH_FLOAT).precision > 0) return "highp";
      R = "mediump";
    }
    return R === "mediump" && s.getShaderPrecisionFormat(s.VERTEX_SHADER, s.MEDIUM_FLOAT).precision > 0 && s.getShaderPrecisionFormat(s.FRAGMENT_SHADER, s.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
  }
  r(r2, "getMaxPrecision");
  let o = typeof WebGL2RenderingContext < "u" && s.constructor.name === "WebGL2RenderingContext", a = e.precision !== void 0 ? e.precision : "highp", c = r2(a);
  c !== a && (console.warn("THREE.WebGLRenderer:", a, "not supported, using", c, "instead."), a = c);
  let l = o || t.has("WEBGL_draw_buffers"), h = e.logarithmicDepthBuffer === true, d = s.getParameter(s.MAX_TEXTURE_IMAGE_UNITS), f = s.getParameter(s.MAX_VERTEX_TEXTURE_IMAGE_UNITS), g = s.getParameter(s.MAX_TEXTURE_SIZE), _ = s.getParameter(s.MAX_CUBE_MAP_TEXTURE_SIZE), v = s.getParameter(s.MAX_VERTEX_ATTRIBS), m = s.getParameter(s.MAX_VERTEX_UNIFORM_VECTORS), p = s.getParameter(s.MAX_VARYING_VECTORS), w = s.getParameter(s.MAX_FRAGMENT_UNIFORM_VECTORS), x = f > 0, b = o || t.has("OES_texture_float"), L = x && b, C = o ? s.getParameter(s.MAX_SAMPLES) : 0;
  return { isWebGL2: o, drawBuffers: l, getMaxAnisotropy: i, getMaxPrecision: r2, precision: a, logarithmicDepthBuffer: h, maxTextures: d, maxVertexTextures: f, maxTextureSize: g, maxCubemapSize: _, maxAttributes: v, maxVertexUniforms: m, maxVaryings: p, maxFragmentUniforms: w, vertexTextures: x, floatFragmentTextures: b, floatVertexTextures: L, maxSamples: C };
}
r(C_, "WebGLCapabilities");
function P_(s) {
  let t = this, e = null, n = 0, i = false, r2 = false, o = new hn(), a = new kt(), c = { value: null, needsUpdate: false };
  this.uniform = c, this.numPlanes = 0, this.numIntersection = 0, this.init = function(d, f) {
    let g = d.length !== 0 || f || n !== 0 || i;
    return i = f, n = d.length, g;
  }, this.beginShadows = function() {
    r2 = true, h(null);
  }, this.endShadows = function() {
    r2 = false;
  }, this.setGlobalState = function(d, f) {
    e = h(d, f, 0);
  }, this.setState = function(d, f, g) {
    let _ = d.clippingPlanes, v = d.clipIntersection, m = d.clipShadows, p = s.get(d);
    if (!i || _ === null || _.length === 0 || r2 && !m) r2 ? h(null) : l();
    else {
      let w = r2 ? 0 : n, x = w * 4, b = p.clippingState || null;
      c.value = b, b = h(_, f, x, g);
      for (let L = 0; L !== x; ++L) b[L] = e[L];
      p.clippingState = b, this.numIntersection = v ? this.numPlanes : 0, this.numPlanes += w;
    }
  };
  function l() {
    c.value !== e && (c.value = e, c.needsUpdate = n > 0), t.numPlanes = n, t.numIntersection = 0;
  }
  r(l, "resetGlobalState");
  function h(d, f, g, _) {
    let v = d !== null ? d.length : 0, m = null;
    if (v !== 0) {
      if (m = c.value, _ !== true || m === null) {
        let p = g + v * 4, w = f.matrixWorldInverse;
        a.getNormalMatrix(w), (m === null || m.length < p) && (m = new Float32Array(p));
        for (let x = 0, b = g; x !== v; ++x, b += 4) o.copy(d[x]).applyMatrix4(w, a), o.normal.toArray(m, b), m[b + 3] = o.constant;
      }
      c.value = m, c.needsUpdate = true;
    }
    return t.numPlanes = v, t.numIntersection = 0, m;
  }
  r(h, "projectPlanes");
}
r(P_, "WebGLClipping");
function I_(s) {
  let t = /* @__PURE__ */ new WeakMap();
  function e(o, a) {
    return a === Ba ? o.mapping = Ci : a === za && (o.mapping = Pi), o;
  }
  r(e, "mapTextureMapping");
  function n(o) {
    if (o && o.isTexture) {
      let a = o.mapping;
      if (a === Ba || a === za) if (t.has(o)) {
        let c = t.get(o).texture;
        return e(c, o.mapping);
      } else {
        let c = o.image;
        if (c && c.height > 0) {
          let l = new Za(c.height);
          return l.fromEquirectangularTexture(s, o), t.set(o, l), o.addEventListener("dispose", i), e(l.texture, o.mapping);
        } else return null;
      }
    }
    return o;
  }
  r(n, "get");
  function i(o) {
    let a = o.target;
    a.removeEventListener("dispose", i);
    let c = t.get(a);
    c !== void 0 && (t.delete(a), c.dispose());
  }
  r(i, "onTextureDispose");
  function r2() {
    t = /* @__PURE__ */ new WeakMap();
  }
  return r(r2, "dispose"), { get: n, dispose: r2 };
}
r(I_, "WebGLCubeMaps");
var vc = class vc2 extends lr {
  constructor(t = -1, e = 1, n = 1, i = -1, r2 = 0.1, o = 2e3) {
    super(), this.isOrthographicCamera = true, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = t, this.right = e, this.top = n, this.bottom = i, this.near = r2, this.far = o, this.updateProjectionMatrix();
  }
  copy(t, e) {
    return super.copy(t, e), this.left = t.left, this.right = t.right, this.top = t.top, this.bottom = t.bottom, this.near = t.near, this.far = t.far, this.zoom = t.zoom, this.view = t.view === null ? null : Object.assign({}, t.view), this;
  }
  setViewOffset(t, e, n, i, r2, o) {
    this.view === null && (this.view = { enabled: true, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = true, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r2, this.view.height = o, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = false), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    let t = (this.right - this.left) / (2 * this.zoom), e = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, i = (this.top + this.bottom) / 2, r2 = n - t, o = n + t, a = i + e, c = i - e;
    if (this.view !== null && this.view.enabled) {
      let l = (this.right - this.left) / this.view.fullWidth / this.zoom, h = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      r2 += l * this.view.offsetX, o = r2 + l * this.view.width, a -= h * this.view.offsetY, c = a - h * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(r2, o, a, c, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(t) {
    let e = super.toJSON(t);
    return e.object.zoom = this.zoom, e.object.left = this.left, e.object.right = this.right, e.object.top = this.top, e.object.bottom = this.bottom, e.object.near = this.near, e.object.far = this.far, this.view !== null && (e.object.view = Object.assign({}, this.view)), e;
  }
};
r(vc, "OrthographicCamera");
var dr = vc;
var vi = 4;
var ou = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
var qn = 20;
var ya = new dr();
var cu = new Vt();
var Ma = null;
var Sa = 0;
var ba = 0;
var Wn = (1 + Math.sqrt(5)) / 2;
var gi = 1 / Wn;
var lu = [new P(1, 1, 1), new P(-1, 1, 1), new P(1, 1, -1), new P(-1, 1, -1), new P(0, Wn, gi), new P(0, Wn, -gi), new P(gi, 0, Wn), new P(-gi, 0, Wn), new P(Wn, gi, 0), new P(-Wn, gi, 0)];
var yc = class yc2 {
  constructor(t) {
    this._renderer = t, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  fromScene(t, e = 0, n = 0.1, i = 100) {
    Ma = this._renderer.getRenderTarget(), Sa = this._renderer.getActiveCubeFace(), ba = this._renderer.getActiveMipmapLevel(), this._setSize(256);
    let r2 = this._allocateTargets();
    return r2.depthBuffer = true, this._sceneToCubeUV(t, n, i, r2), e > 0 && this._blur(r2, 0, 0, e), this._applyPMREM(r2), this._cleanup(r2), r2;
  }
  fromEquirectangular(t, e = null) {
    return this._fromTexture(t, e);
  }
  fromCubemap(t, e = null) {
    return this._fromTexture(t, e);
  }
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = du(), this._compileMaterial(this._cubemapMaterial));
  }
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = uu(), this._compileMaterial(this._equirectMaterial));
  }
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  _setSize(t) {
    this._lodMax = Math.floor(Math.log2(t)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let t = 0; t < this._lodPlanes.length; t++) this._lodPlanes[t].dispose();
  }
  _cleanup(t) {
    this._renderer.setRenderTarget(Ma, Sa, ba), t.scissorTest = false, Ds(t, 0, 0, t.width, t.height);
  }
  _fromTexture(t, e) {
    t.mapping === Ci || t.mapping === Pi ? this._setSize(t.image.length === 0 ? 16 : t.image[0].width || t.image[0].image.width) : this._setSize(t.image.width / 4), Ma = this._renderer.getRenderTarget(), Sa = this._renderer.getActiveCubeFace(), ba = this._renderer.getActiveMipmapLevel();
    let n = e || this._allocateTargets();
    return this._textureToCubeUV(t, n), this._applyPMREM(n), this._cleanup(n), n;
  }
  _allocateTargets() {
    let t = 3 * Math.max(this._cubeSize, 112), e = 4 * this._cubeSize, n = { magFilter: Ce, minFilter: Ce, generateMipmaps: false, type: ns, format: Oe, colorSpace: Dn, depthBuffer: false }, i = hu(t, e, n);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== t || this._pingPongRenderTarget.height !== e) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = hu(t, e, n);
      let { _lodMax: r2 } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = L_(r2)), this._blurMaterial = U_(r2, t, e);
    }
    return i;
  }
  _compileMaterial(t) {
    let e = new Me(this._lodPlanes[0], t);
    this._renderer.compile(e, ya);
  }
  _sceneToCubeUV(t, e, n, i) {
    let a = new Te(90, 1, e, n), c = [1, -1, 1, 1, 1, 1], l = [1, 1, 1, -1, -1, -1], h = this._renderer, d = h.autoClear, f = h.toneMapping;
    h.getClearColor(cu), h.toneMapping = Tn, h.autoClear = false;
    let g = new ar({ name: "PMREM.Background", side: Pe, depthWrite: false, depthTest: false }), _ = new Me(new rs(), g), v = false, m = t.background;
    m ? m.isColor && (g.color.copy(m), t.background = null, v = true) : (g.color.copy(cu), v = true);
    for (let p = 0; p < 6; p++) {
      let w = p % 3;
      w === 0 ? (a.up.set(0, c[p], 0), a.lookAt(l[p], 0, 0)) : w === 1 ? (a.up.set(0, 0, c[p]), a.lookAt(0, l[p], 0)) : (a.up.set(0, c[p], 0), a.lookAt(0, 0, l[p]));
      let x = this._cubeSize;
      Ds(i, w * x, p > 2 ? x : 0, x, x), h.setRenderTarget(i), v && h.render(_, a), h.render(t, a);
    }
    _.geometry.dispose(), _.material.dispose(), h.toneMapping = f, h.autoClear = d, t.background = m;
  }
  _textureToCubeUV(t, e) {
    let n = this._renderer, i = t.mapping === Ci || t.mapping === Pi;
    i ? (this._cubemapMaterial === null && (this._cubemapMaterial = du()), this._cubemapMaterial.uniforms.flipEnvMap.value = t.isRenderTargetTexture === false ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = uu());
    let r2 = i ? this._cubemapMaterial : this._equirectMaterial, o = new Me(this._lodPlanes[0], r2), a = r2.uniforms;
    a.envMap.value = t;
    let c = this._cubeSize;
    Ds(e, 0, 0, 3 * c, 2 * c), n.setRenderTarget(e), n.render(o, ya);
  }
  _applyPMREM(t) {
    let e = this._renderer, n = e.autoClear;
    e.autoClear = false;
    for (let i = 1; i < this._lodPlanes.length; i++) {
      let r2 = Math.sqrt(this._sigmas[i] * this._sigmas[i] - this._sigmas[i - 1] * this._sigmas[i - 1]), o = lu[(i - 1) % lu.length];
      this._blur(t, i - 1, i, r2, o);
    }
    e.autoClear = n;
  }
  _blur(t, e, n, i, r2) {
    let o = this._pingPongRenderTarget;
    this._halfBlur(t, o, e, n, i, "latitudinal", r2), this._halfBlur(o, t, n, n, i, "longitudinal", r2);
  }
  _halfBlur(t, e, n, i, r2, o, a) {
    let c = this._renderer, l = this._blurMaterial;
    o !== "latitudinal" && o !== "longitudinal" && console.error("blur direction must be either latitudinal or longitudinal!");
    let h = 3, d = new Me(this._lodPlanes[i], l), f = l.uniforms, g = this._sizeLods[n] - 1, _ = isFinite(r2) ? Math.PI / (2 * g) : 2 * Math.PI / (2 * qn - 1), v = r2 / _, m = isFinite(r2) ? 1 + Math.floor(h * v) : qn;
    m > qn && console.warn(`sigmaRadians, ${r2}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${qn}`);
    let p = [], w = 0;
    for (let R = 0; R < qn; ++R) {
      let D = R / v, X = Math.exp(-D * D / 2);
      p.push(X), R === 0 ? w += X : R < m && (w += 2 * X);
    }
    for (let R = 0; R < p.length; R++) p[R] = p[R] / w;
    f.envMap.value = t.texture, f.samples.value = m, f.weights.value = p, f.latitudinal.value = o === "latitudinal", a && (f.poleAxis.value = a);
    let { _lodMax: x } = this;
    f.dTheta.value = _, f.mipInt.value = x - n;
    let b = this._sizeLods[i], L = 3 * b * (i > x - vi ? i - x + vi : 0), C = 4 * (this._cubeSize - b);
    Ds(e, L, C, 3 * b, 2 * b), c.setRenderTarget(e), c.render(d, ya);
  }
};
r(yc, "PMREMGenerator");
var fr = yc;
function L_(s) {
  let t = [], e = [], n = [], i = s, r2 = s - vi + 1 + ou.length;
  for (let o = 0; o < r2; o++) {
    let a = Math.pow(2, i);
    e.push(a);
    let c = 1 / a;
    o > s - vi ? c = ou[o - s + vi - 1] : o === 0 && (c = 0), n.push(c);
    let l = 1 / (a - 2), h = -l, d = 1 + l, f = [h, h, d, h, d, d, h, h, d, d, h, d], g = 6, _ = 6, v = 3, m = 2, p = 1, w = new Float32Array(v * _ * g), x = new Float32Array(m * _ * g), b = new Float32Array(p * _ * g);
    for (let C = 0; C < g; C++) {
      let R = C % 3 * 2 / 3 - 1, D = C > 2 ? 0 : -1, X = [R, D, 0, R + 2 / 3, D, 0, R + 2 / 3, D + 1, 0, R, D, 0, R + 2 / 3, D + 1, 0, R, D + 1, 0];
      w.set(X, v * _ * C), x.set(f, m * _ * C);
      let M = [C, C, C, C, C, C];
      b.set(M, p * _ * C);
    }
    let L = new Le();
    L.setAttribute("position", new Se(w, v)), L.setAttribute("uv", new Se(x, m)), L.setAttribute("faceIndex", new Se(b, p)), t.push(L), i > vi && i--;
  }
  return { lodPlanes: t, sizeLods: e, sigmas: n };
}
r(L_, "_createPlanes");
function hu(s, t, e) {
  let n = new fn(s, t, e);
  return n.texture.mapping = kr, n.texture.name = "PMREM.cubeUv", n.scissorTest = true, n;
}
r(hu, "_createRenderTarget");
function Ds(s, t, e, n, i) {
  s.viewport.set(t, e, n, i), s.scissor.set(t, e, n, i);
}
r(Ds, "_setViewport");
function U_(s, t, e) {
  let n = new Float32Array(qn), i = new P(0, 1, 0);
  return new tn({ name: "SphericalGaussianBlur", defines: { n: qn, CUBEUV_TEXEL_WIDTH: 1 / t, CUBEUV_TEXEL_HEIGHT: 1 / e, CUBEUV_MAX_MIP: `${s}.0` }, uniforms: { envMap: { value: null }, samples: { value: 1 }, weights: { value: n }, latitudinal: { value: false }, dTheta: { value: 0 }, mipInt: { value: 0 }, poleAxis: { value: i } }, vertexShader: Vo(), fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`, blending: An, depthTest: false, depthWrite: false });
}
r(U_, "_getBlurShader");
function uu() {
  return new tn({ name: "EquirectangularToCubeUV", uniforms: { envMap: { value: null } }, vertexShader: Vo(), fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`, blending: An, depthTest: false, depthWrite: false });
}
r(uu, "_getEquirectMaterial");
function du() {
  return new tn({ name: "CubemapToCubeUV", uniforms: { envMap: { value: null }, flipEnvMap: { value: -1 } }, vertexShader: Vo(), fragmentShader: `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`, blending: An, depthTest: false, depthWrite: false });
}
r(du, "_getCubemapMaterial");
function Vo() {
  return `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;
}
r(Vo, "_getCommonVertexShader");
function D_(s) {
  let t = /* @__PURE__ */ new WeakMap(), e = null;
  function n(a) {
    if (a && a.isTexture) {
      let c = a.mapping, l = c === Ba || c === za, h = c === Ci || c === Pi;
      if (l || h) if (a.isRenderTargetTexture && a.needsPMREMUpdate === true) {
        a.needsPMREMUpdate = false;
        let d = t.get(a);
        return e === null && (e = new fr(s)), d = l ? e.fromEquirectangular(a, d) : e.fromCubemap(a, d), t.set(a, d), d.texture;
      } else {
        if (t.has(a)) return t.get(a).texture;
        {
          let d = a.image;
          if (l && d && d.height > 0 || h && d && i(d)) {
            e === null && (e = new fr(s));
            let f = l ? e.fromEquirectangular(a) : e.fromCubemap(a);
            return t.set(a, f), a.addEventListener("dispose", r2), f.texture;
          } else return null;
        }
      }
    }
    return a;
  }
  r(n, "get");
  function i(a) {
    let c = 0, l = 6;
    for (let h = 0; h < l; h++) a[h] !== void 0 && c++;
    return c === l;
  }
  r(i, "isCubeTextureComplete");
  function r2(a) {
    let c = a.target;
    c.removeEventListener("dispose", r2);
    let l = t.get(c);
    l !== void 0 && (t.delete(c), l.dispose());
  }
  r(r2, "onTextureDispose");
  function o() {
    t = /* @__PURE__ */ new WeakMap(), e !== null && (e.dispose(), e = null);
  }
  return r(o, "dispose"), { get: n, dispose: o };
}
r(D_, "WebGLCubeUVMaps");
function N_(s) {
  let t = {};
  function e(n) {
    if (t[n] !== void 0) return t[n];
    let i;
    switch (n) {
      case "WEBGL_depth_texture":
        i = s.getExtension("WEBGL_depth_texture") || s.getExtension("MOZ_WEBGL_depth_texture") || s.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        i = s.getExtension("EXT_texture_filter_anisotropic") || s.getExtension("MOZ_EXT_texture_filter_anisotropic") || s.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        i = s.getExtension("WEBGL_compressed_texture_s3tc") || s.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        i = s.getExtension("WEBGL_compressed_texture_pvrtc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        i = s.getExtension(n);
    }
    return t[n] = i, i;
  }
  return r(e, "getExtension"), { has: function(n) {
    return e(n) !== null;
  }, init: function(n) {
    n.isWebGL2 ? (e("EXT_color_buffer_float"), e("WEBGL_clip_cull_distance")) : (e("WEBGL_depth_texture"), e("OES_texture_float"), e("OES_texture_half_float"), e("OES_texture_half_float_linear"), e("OES_standard_derivatives"), e("OES_element_index_uint"), e("OES_vertex_array_object"), e("ANGLE_instanced_arrays")), e("OES_texture_float_linear"), e("EXT_color_buffer_half_float"), e("WEBGL_multisampled_render_to_texture");
  }, get: function(n) {
    let i = e(n);
    return i === null && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), i;
  } };
}
r(N_, "WebGLExtensions");
function O_(s, t, e, n) {
  let i = {}, r2 = /* @__PURE__ */ new WeakMap();
  function o(d) {
    let f = d.target;
    f.index !== null && t.remove(f.index);
    for (let _ in f.attributes) t.remove(f.attributes[_]);
    for (let _ in f.morphAttributes) {
      let v = f.morphAttributes[_];
      for (let m = 0, p = v.length; m < p; m++) t.remove(v[m]);
    }
    f.removeEventListener("dispose", o), delete i[f.id];
    let g = r2.get(f);
    g && (t.remove(g), r2.delete(f)), n.releaseStatesOfGeometry(f), f.isInstancedBufferGeometry === true && delete f._maxInstanceCount, e.memory.geometries--;
  }
  r(o, "onGeometryDispose");
  function a(d, f) {
    return i[f.id] === true || (f.addEventListener("dispose", o), i[f.id] = true, e.memory.geometries++), f;
  }
  r(a, "get");
  function c(d) {
    let f = d.attributes;
    for (let _ in f) t.update(f[_], s.ARRAY_BUFFER);
    let g = d.morphAttributes;
    for (let _ in g) {
      let v = g[_];
      for (let m = 0, p = v.length; m < p; m++) t.update(v[m], s.ARRAY_BUFFER);
    }
  }
  r(c, "update");
  function l(d) {
    let f = [], g = d.index, _ = d.attributes.position, v = 0;
    if (g !== null) {
      let w = g.array;
      v = g.version;
      for (let x = 0, b = w.length; x < b; x += 3) {
        let L = w[x + 0], C = w[x + 1], R = w[x + 2];
        f.push(L, C, C, R, R, L);
      }
    } else if (_ !== void 0) {
      let w = _.array;
      v = _.version;
      for (let x = 0, b = w.length / 3 - 1; x < b; x += 3) {
        let L = x + 0, C = x + 1, R = x + 2;
        f.push(L, C, C, R, R, L);
      }
    } else return;
    let m = new (Gd(f) ? cr : or)(f, 1);
    m.version = v;
    let p = r2.get(d);
    p && t.remove(p), r2.set(d, m);
  }
  r(l, "updateWireframeAttribute");
  function h(d) {
    let f = r2.get(d);
    if (f) {
      let g = d.index;
      g !== null && f.version < g.version && l(d);
    } else l(d);
    return r2.get(d);
  }
  return r(h, "getWireframeAttribute"), { get: a, update: c, getWireframeAttribute: h };
}
r(O_, "WebGLGeometries");
function F_(s, t, e, n) {
  let i = n.isWebGL2, r2;
  function o(g) {
    r2 = g;
  }
  r(o, "setMode");
  let a, c;
  function l(g) {
    a = g.type, c = g.bytesPerElement;
  }
  r(l, "setIndex");
  function h(g, _) {
    s.drawElements(r2, _, a, g * c), e.update(_, r2, 1);
  }
  r(h, "render");
  function d(g, _, v) {
    if (v === 0) return;
    let m, p;
    if (i) m = s, p = "drawElementsInstanced";
    else if (m = t.get("ANGLE_instanced_arrays"), p = "drawElementsInstancedANGLE", m === null) {
      console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
      return;
    }
    m[p](r2, _, a, g * c, v), e.update(_, r2, v);
  }
  r(d, "renderInstances");
  function f(g, _, v) {
    if (v === 0) return;
    let m = t.get("WEBGL_multi_draw");
    if (m === null) for (let p = 0; p < v; p++) this.render(g[p] / c, _[p]);
    else {
      m.multiDrawElementsWEBGL(r2, _, 0, a, g, 0, v);
      let p = 0;
      for (let w = 0; w < v; w++) p += _[w];
      e.update(p, r2, 1);
    }
  }
  r(f, "renderMultiDraw"), this.setMode = o, this.setIndex = l, this.render = h, this.renderInstances = d, this.renderMultiDraw = f;
}
r(F_, "WebGLIndexedBufferRenderer");
function B_(s) {
  let t = { geometries: 0, textures: 0 }, e = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 };
  function n(r2, o, a) {
    switch (e.calls++, o) {
      case s.TRIANGLES:
        e.triangles += a * (r2 / 3);
        break;
      case s.LINES:
        e.lines += a * (r2 / 2);
        break;
      case s.LINE_STRIP:
        e.lines += a * (r2 - 1);
        break;
      case s.LINE_LOOP:
        e.lines += a * r2;
        break;
      case s.POINTS:
        e.points += a * r2;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", o);
        break;
    }
  }
  r(n, "update");
  function i() {
    e.calls = 0, e.triangles = 0, e.points = 0, e.lines = 0;
  }
  return r(i, "reset"), { memory: t, render: e, programs: null, autoReset: true, reset: i, update: n };
}
r(B_, "WebGLInfo");
function z_(s, t) {
  return s[0] - t[0];
}
r(z_, "numericalSort");
function k_(s, t) {
  return Math.abs(t[1]) - Math.abs(s[1]);
}
r(k_, "absNumericalSort");
function V_(s, t, e) {
  let n = {}, i = new Float32Array(8), r2 = /* @__PURE__ */ new WeakMap(), o = new $t(), a = [];
  for (let l = 0; l < 8; l++) a[l] = [l, 0];
  function c(l, h, d) {
    let f = l.morphTargetInfluences;
    if (t.isWebGL2 === true) {
      let g = h.morphAttributes.position || h.morphAttributes.normal || h.morphAttributes.color, _ = g !== void 0 ? g.length : 0, v = r2.get(h);
      if (v === void 0 || v.count !== _) {
        let Q = function() {
          M.dispose(), r2.delete(h), h.removeEventListener("dispose", Q);
        };
        r(Q, "disposeTexture"), v !== void 0 && v.texture.dispose();
        let m = h.morphAttributes.position !== void 0, p = h.morphAttributes.normal !== void 0, w = h.morphAttributes.color !== void 0, x = h.morphAttributes.position || [], b = h.morphAttributes.normal || [], L = h.morphAttributes.color || [], C = 0;
        m === true && (C = 1), p === true && (C = 2), w === true && (C = 3);
        let R = h.attributes.position.count * C, D = 1;
        R > t.maxTextureSize && (D = Math.ceil(R / t.maxTextureSize), R = t.maxTextureSize);
        let X = new Float32Array(R * D * 4 * _), M = new rr(X, R, D, _);
        M.type = ke, M.needsUpdate = true;
        let A = C * 4;
        for (let $ = 0; $ < _; $++) {
          let I = x[$], G = b[$], k = L[$], J = R * D * 4 * $;
          for (let q2 = 0; q2 < I.count; q2++) {
            let Y = q2 * A;
            m === true && (o.fromBufferAttribute(I, q2), X[J + Y + 0] = o.x, X[J + Y + 1] = o.y, X[J + Y + 2] = o.z, X[J + Y + 3] = 0), p === true && (o.fromBufferAttribute(G, q2), X[J + Y + 4] = o.x, X[J + Y + 5] = o.y, X[J + Y + 6] = o.z, X[J + Y + 7] = 0), w === true && (o.fromBufferAttribute(k, q2), X[J + Y + 8] = o.x, X[J + Y + 9] = o.y, X[J + Y + 10] = o.z, X[J + Y + 11] = k.itemSize === 4 ? o.w : 1);
          }
        }
        v = { count: _, texture: M, size: new lt(R, D) }, r2.set(h, v), h.addEventListener("dispose", Q);
      }
      if (l.isInstancedMesh === true && l.morphTexture !== null) d.getUniforms().setValue(s, "morphTexture", l.morphTexture, e);
      else {
        let m = 0;
        for (let w = 0; w < f.length; w++) m += f[w];
        let p = h.morphTargetsRelative ? 1 : 1 - m;
        d.getUniforms().setValue(s, "morphTargetBaseInfluence", p), d.getUniforms().setValue(s, "morphTargetInfluences", f);
      }
      d.getUniforms().setValue(s, "morphTargetsTexture", v.texture, e), d.getUniforms().setValue(s, "morphTargetsTextureSize", v.size);
    } else {
      let g = f === void 0 ? 0 : f.length, _ = n[h.id];
      if (_ === void 0 || _.length !== g) {
        _ = [];
        for (let x = 0; x < g; x++) _[x] = [x, 0];
        n[h.id] = _;
      }
      for (let x = 0; x < g; x++) {
        let b = _[x];
        b[0] = x, b[1] = f[x];
      }
      _.sort(k_);
      for (let x = 0; x < 8; x++) x < g && _[x][1] ? (a[x][0] = _[x][0], a[x][1] = _[x][1]) : (a[x][0] = Number.MAX_SAFE_INTEGER, a[x][1] = 0);
      a.sort(z_);
      let v = h.morphAttributes.position, m = h.morphAttributes.normal, p = 0;
      for (let x = 0; x < 8; x++) {
        let b = a[x], L = b[0], C = b[1];
        L !== Number.MAX_SAFE_INTEGER && C ? (v && h.getAttribute("morphTarget" + x) !== v[L] && h.setAttribute("morphTarget" + x, v[L]), m && h.getAttribute("morphNormal" + x) !== m[L] && h.setAttribute("morphNormal" + x, m[L]), i[x] = C, p += C) : (v && h.hasAttribute("morphTarget" + x) === true && h.deleteAttribute("morphTarget" + x), m && h.hasAttribute("morphNormal" + x) === true && h.deleteAttribute("morphNormal" + x), i[x] = 0);
      }
      let w = h.morphTargetsRelative ? 1 : 1 - p;
      d.getUniforms().setValue(s, "morphTargetBaseInfluence", w), d.getUniforms().setValue(s, "morphTargetInfluences", i);
    }
  }
  return r(c, "update"), { update: c };
}
r(V_, "WebGLMorphtargets");
function H_(s, t, e, n) {
  let i = /* @__PURE__ */ new WeakMap();
  function r2(c) {
    let l = n.render.frame, h = c.geometry, d = t.get(c, h);
    if (i.get(d) !== l && (t.update(d), i.set(d, l)), c.isInstancedMesh && (c.hasEventListener("dispose", a) === false && c.addEventListener("dispose", a), i.get(c) !== l && (e.update(c.instanceMatrix, s.ARRAY_BUFFER), c.instanceColor !== null && e.update(c.instanceColor, s.ARRAY_BUFFER), i.set(c, l))), c.isSkinnedMesh) {
      let f = c.skeleton;
      i.get(f) !== l && (f.update(), i.set(f, l));
    }
    return d;
  }
  r(r2, "update");
  function o() {
    i = /* @__PURE__ */ new WeakMap();
  }
  r(o, "dispose");
  function a(c) {
    let l = c.target;
    l.removeEventListener("dispose", a), e.remove(l.instanceMatrix), l.instanceColor !== null && e.remove(l.instanceColor);
  }
  return r(a, "onInstancedMeshDispose"), { update: r2, dispose: o };
}
r(H_, "WebGLObjects");
var Mc = class Mc2 extends be {
  constructor(t, e, n, i, r2, o, a, c, l, h) {
    if (h = h !== void 0 ? h : $n, h !== $n && h !== Ii) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    n === void 0 && h === $n && (n = En), n === void 0 && h === Ii && (n = Jn), super(null, i, r2, o, a, c, h, n, l), this.isDepthTexture = true, this.image = { width: t, height: e }, this.magFilter = a !== void 0 ? a : ge, this.minFilter = c !== void 0 ? c : ge, this.flipY = false, this.generateMipmaps = false, this.compareFunction = null;
  }
  copy(t) {
    return super.copy(t), this.compareFunction = t.compareFunction, this;
  }
  toJSON(t) {
    let e = super.toJSON(t);
    return this.compareFunction !== null && (e.compareFunction = this.compareFunction), e;
  }
};
r(Mc, "DepthTexture");
var pr = Mc;
var Zd = new be();
var Jd = new pr(1, 1);
Jd.compareFunction = Hd;
var $d = new rr();
var Kd = new qa();
var Qd = new hr();
var fu = [];
var pu = [];
var mu = new Float32Array(16);
var gu = new Float32Array(9);
var _u = new Float32Array(4);
function zi(s, t, e) {
  let n = s[0];
  if (n <= 0 || n > 0) return s;
  let i = t * e, r2 = fu[i];
  if (r2 === void 0 && (r2 = new Float32Array(i), fu[i] = r2), t !== 0) {
    n.toArray(r2, 0);
    for (let o = 1, a = 0; o !== t; ++o) a += e, s[o].toArray(r2, a);
  }
  return r2;
}
r(zi, "flatten");
function he(s, t) {
  if (s.length !== t.length) return false;
  for (let e = 0, n = s.length; e < n; e++) if (s[e] !== t[e]) return false;
  return true;
}
r(he, "arraysEqual");
function ue(s, t) {
  for (let e = 0, n = t.length; e < n; e++) s[e] = t[e];
}
r(ue, "copyArray");
function Hr(s, t) {
  let e = pu[t];
  e === void 0 && (e = new Int32Array(t), pu[t] = e);
  for (let n = 0; n !== t; ++n) e[n] = s.allocateTextureUnit();
  return e;
}
r(Hr, "allocTexUnits");
function G_(s, t) {
  let e = this.cache;
  e[0] !== t && (s.uniform1f(this.addr, t), e[0] = t);
}
r(G_, "setValueV1f");
function W_(s, t) {
  let e = this.cache;
  if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y) && (s.uniform2f(this.addr, t.x, t.y), e[0] = t.x, e[1] = t.y);
  else {
    if (he(e, t)) return;
    s.uniform2fv(this.addr, t), ue(e, t);
  }
}
r(W_, "setValueV2f");
function X_(s, t) {
  let e = this.cache;
  if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z) && (s.uniform3f(this.addr, t.x, t.y, t.z), e[0] = t.x, e[1] = t.y, e[2] = t.z);
  else if (t.r !== void 0) (e[0] !== t.r || e[1] !== t.g || e[2] !== t.b) && (s.uniform3f(this.addr, t.r, t.g, t.b), e[0] = t.r, e[1] = t.g, e[2] = t.b);
  else {
    if (he(e, t)) return;
    s.uniform3fv(this.addr, t), ue(e, t);
  }
}
r(X_, "setValueV3f");
function q_(s, t) {
  let e = this.cache;
  if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z || e[3] !== t.w) && (s.uniform4f(this.addr, t.x, t.y, t.z, t.w), e[0] = t.x, e[1] = t.y, e[2] = t.z, e[3] = t.w);
  else {
    if (he(e, t)) return;
    s.uniform4fv(this.addr, t), ue(e, t);
  }
}
r(q_, "setValueV4f");
function Y_(s, t) {
  let e = this.cache, n = t.elements;
  if (n === void 0) {
    if (he(e, t)) return;
    s.uniformMatrix2fv(this.addr, false, t), ue(e, t);
  } else {
    if (he(e, n)) return;
    _u.set(n), s.uniformMatrix2fv(this.addr, false, _u), ue(e, n);
  }
}
r(Y_, "setValueM2");
function Z_(s, t) {
  let e = this.cache, n = t.elements;
  if (n === void 0) {
    if (he(e, t)) return;
    s.uniformMatrix3fv(this.addr, false, t), ue(e, t);
  } else {
    if (he(e, n)) return;
    gu.set(n), s.uniformMatrix3fv(this.addr, false, gu), ue(e, n);
  }
}
r(Z_, "setValueM3");
function J_(s, t) {
  let e = this.cache, n = t.elements;
  if (n === void 0) {
    if (he(e, t)) return;
    s.uniformMatrix4fv(this.addr, false, t), ue(e, t);
  } else {
    if (he(e, n)) return;
    mu.set(n), s.uniformMatrix4fv(this.addr, false, mu), ue(e, n);
  }
}
r(J_, "setValueM4");
function $_(s, t) {
  let e = this.cache;
  e[0] !== t && (s.uniform1i(this.addr, t), e[0] = t);
}
r($_, "setValueV1i");
function K_(s, t) {
  let e = this.cache;
  if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y) && (s.uniform2i(this.addr, t.x, t.y), e[0] = t.x, e[1] = t.y);
  else {
    if (he(e, t)) return;
    s.uniform2iv(this.addr, t), ue(e, t);
  }
}
r(K_, "setValueV2i");
function Q_(s, t) {
  let e = this.cache;
  if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z) && (s.uniform3i(this.addr, t.x, t.y, t.z), e[0] = t.x, e[1] = t.y, e[2] = t.z);
  else {
    if (he(e, t)) return;
    s.uniform3iv(this.addr, t), ue(e, t);
  }
}
r(Q_, "setValueV3i");
function j_(s, t) {
  let e = this.cache;
  if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z || e[3] !== t.w) && (s.uniform4i(this.addr, t.x, t.y, t.z, t.w), e[0] = t.x, e[1] = t.y, e[2] = t.z, e[3] = t.w);
  else {
    if (he(e, t)) return;
    s.uniform4iv(this.addr, t), ue(e, t);
  }
}
r(j_, "setValueV4i");
function t0(s, t) {
  let e = this.cache;
  e[0] !== t && (s.uniform1ui(this.addr, t), e[0] = t);
}
r(t0, "setValueV1ui");
function e0(s, t) {
  let e = this.cache;
  if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y) && (s.uniform2ui(this.addr, t.x, t.y), e[0] = t.x, e[1] = t.y);
  else {
    if (he(e, t)) return;
    s.uniform2uiv(this.addr, t), ue(e, t);
  }
}
r(e0, "setValueV2ui");
function n0(s, t) {
  let e = this.cache;
  if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z) && (s.uniform3ui(this.addr, t.x, t.y, t.z), e[0] = t.x, e[1] = t.y, e[2] = t.z);
  else {
    if (he(e, t)) return;
    s.uniform3uiv(this.addr, t), ue(e, t);
  }
}
r(n0, "setValueV3ui");
function i0(s, t) {
  let e = this.cache;
  if (t.x !== void 0) (e[0] !== t.x || e[1] !== t.y || e[2] !== t.z || e[3] !== t.w) && (s.uniform4ui(this.addr, t.x, t.y, t.z, t.w), e[0] = t.x, e[1] = t.y, e[2] = t.z, e[3] = t.w);
  else {
    if (he(e, t)) return;
    s.uniform4uiv(this.addr, t), ue(e, t);
  }
}
r(i0, "setValueV4ui");
function s0(s, t, e) {
  let n = this.cache, i = e.allocateTextureUnit();
  n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i);
  let r2 = this.type === s.SAMPLER_2D_SHADOW ? Jd : Zd;
  e.setTexture2D(t || r2, i);
}
r(s0, "setValueT1");
function r0(s, t, e) {
  let n = this.cache, i = e.allocateTextureUnit();
  n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i), e.setTexture3D(t || Kd, i);
}
r(r0, "setValueT3D1");
function a0(s, t, e) {
  let n = this.cache, i = e.allocateTextureUnit();
  n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i), e.setTextureCube(t || Qd, i);
}
r(a0, "setValueT6");
function o0(s, t, e) {
  let n = this.cache, i = e.allocateTextureUnit();
  n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i), e.setTexture2DArray(t || $d, i);
}
r(o0, "setValueT2DArray1");
function c0(s) {
  switch (s) {
    case 5126:
      return G_;
    case 35664:
      return W_;
    case 35665:
      return X_;
    case 35666:
      return q_;
    case 35674:
      return Y_;
    case 35675:
      return Z_;
    case 35676:
      return J_;
    case 5124:
    case 35670:
      return $_;
    case 35667:
    case 35671:
      return K_;
    case 35668:
    case 35672:
      return Q_;
    case 35669:
    case 35673:
      return j_;
    case 5125:
      return t0;
    case 36294:
      return e0;
    case 36295:
      return n0;
    case 36296:
      return i0;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return s0;
    case 35679:
    case 36299:
    case 36307:
      return r0;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return a0;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return o0;
  }
}
r(c0, "getSingularSetter");
function l0(s, t) {
  s.uniform1fv(this.addr, t);
}
r(l0, "setValueV1fArray");
function h0(s, t) {
  let e = zi(t, this.size, 2);
  s.uniform2fv(this.addr, e);
}
r(h0, "setValueV2fArray");
function u0(s, t) {
  let e = zi(t, this.size, 3);
  s.uniform3fv(this.addr, e);
}
r(u0, "setValueV3fArray");
function d0(s, t) {
  let e = zi(t, this.size, 4);
  s.uniform4fv(this.addr, e);
}
r(d0, "setValueV4fArray");
function f0(s, t) {
  let e = zi(t, this.size, 4);
  s.uniformMatrix2fv(this.addr, false, e);
}
r(f0, "setValueM2Array");
function p0(s, t) {
  let e = zi(t, this.size, 9);
  s.uniformMatrix3fv(this.addr, false, e);
}
r(p0, "setValueM3Array");
function m0(s, t) {
  let e = zi(t, this.size, 16);
  s.uniformMatrix4fv(this.addr, false, e);
}
r(m0, "setValueM4Array");
function g0(s, t) {
  s.uniform1iv(this.addr, t);
}
r(g0, "setValueV1iArray");
function _0(s, t) {
  s.uniform2iv(this.addr, t);
}
r(_0, "setValueV2iArray");
function x0(s, t) {
  s.uniform3iv(this.addr, t);
}
r(x0, "setValueV3iArray");
function v0(s, t) {
  s.uniform4iv(this.addr, t);
}
r(v0, "setValueV4iArray");
function y0(s, t) {
  s.uniform1uiv(this.addr, t);
}
r(y0, "setValueV1uiArray");
function M0(s, t) {
  s.uniform2uiv(this.addr, t);
}
r(M0, "setValueV2uiArray");
function S0(s, t) {
  s.uniform3uiv(this.addr, t);
}
r(S0, "setValueV3uiArray");
function b0(s, t) {
  s.uniform4uiv(this.addr, t);
}
r(b0, "setValueV4uiArray");
function E0(s, t, e) {
  let n = this.cache, i = t.length, r2 = Hr(e, i);
  he(n, r2) || (s.uniform1iv(this.addr, r2), ue(n, r2));
  for (let o = 0; o !== i; ++o) e.setTexture2D(t[o] || Zd, r2[o]);
}
r(E0, "setValueT1Array");
function w0(s, t, e) {
  let n = this.cache, i = t.length, r2 = Hr(e, i);
  he(n, r2) || (s.uniform1iv(this.addr, r2), ue(n, r2));
  for (let o = 0; o !== i; ++o) e.setTexture3D(t[o] || Kd, r2[o]);
}
r(w0, "setValueT3DArray");
function A0(s, t, e) {
  let n = this.cache, i = t.length, r2 = Hr(e, i);
  he(n, r2) || (s.uniform1iv(this.addr, r2), ue(n, r2));
  for (let o = 0; o !== i; ++o) e.setTextureCube(t[o] || Qd, r2[o]);
}
r(A0, "setValueT6Array");
function T0(s, t, e) {
  let n = this.cache, i = t.length, r2 = Hr(e, i);
  he(n, r2) || (s.uniform1iv(this.addr, r2), ue(n, r2));
  for (let o = 0; o !== i; ++o) e.setTexture2DArray(t[o] || $d, r2[o]);
}
r(T0, "setValueT2DArrayArray");
function R0(s) {
  switch (s) {
    case 5126:
      return l0;
    case 35664:
      return h0;
    case 35665:
      return u0;
    case 35666:
      return d0;
    case 35674:
      return f0;
    case 35675:
      return p0;
    case 35676:
      return m0;
    case 5124:
    case 35670:
      return g0;
    case 35667:
    case 35671:
      return _0;
    case 35668:
    case 35672:
      return x0;
    case 35669:
    case 35673:
      return v0;
    case 5125:
      return y0;
    case 36294:
      return M0;
    case 36295:
      return S0;
    case 36296:
      return b0;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return E0;
    case 35679:
    case 36299:
    case 36307:
      return w0;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return A0;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return T0;
  }
}
r(R0, "getPureArraySetter");
var Sc = class Sc2 {
  constructor(t, e, n) {
    this.id = t, this.addr = n, this.cache = [], this.type = e.type, this.setValue = c0(e.type);
  }
};
r(Sc, "SingleUniform");
var Ja = Sc;
var bc = class bc2 {
  constructor(t, e, n) {
    this.id = t, this.addr = n, this.cache = [], this.type = e.type, this.size = e.size, this.setValue = R0(e.type);
  }
};
r(bc, "PureArrayUniform");
var $a = bc;
var Ec = class Ec2 {
  constructor(t) {
    this.id = t, this.seq = [], this.map = {};
  }
  setValue(t, e, n) {
    let i = this.seq;
    for (let r2 = 0, o = i.length; r2 !== o; ++r2) {
      let a = i[r2];
      a.setValue(t, e[a.id], n);
    }
  }
};
r(Ec, "StructuredUniform");
var Ka = Ec;
var Ea = /(\w+)(\])?(\[|\.)?/g;
function xu(s, t) {
  s.seq.push(t), s.map[t.id] = t;
}
r(xu, "addUniform");
function C0(s, t, e) {
  let n = s.name, i = n.length;
  for (Ea.lastIndex = 0; ; ) {
    let r2 = Ea.exec(n), o = Ea.lastIndex, a = r2[1], c = r2[2] === "]", l = r2[3];
    if (c && (a = a | 0), l === void 0 || l === "[" && o + 2 === i) {
      xu(e, l === void 0 ? new Ja(a, s, t) : new $a(a, s, t));
      break;
    } else {
      let d = e.map[a];
      d === void 0 && (d = new Ka(a), xu(e, d)), e = d;
    }
  }
}
r(C0, "parseUniform");
var wc = class wc2 {
  constructor(t, e) {
    this.seq = [], this.map = {};
    let n = t.getProgramParameter(e, t.ACTIVE_UNIFORMS);
    for (let i = 0; i < n; ++i) {
      let r2 = t.getActiveUniform(e, i), o = t.getUniformLocation(e, r2.name);
      C0(r2, o, this);
    }
  }
  setValue(t, e, n, i) {
    let r2 = this.map[e];
    r2 !== void 0 && r2.setValue(t, n, i);
  }
  setOptional(t, e, n) {
    let i = e[n];
    i !== void 0 && this.setValue(t, n, i);
  }
  static upload(t, e, n, i) {
    for (let r2 = 0, o = e.length; r2 !== o; ++r2) {
      let a = e[r2], c = n[a.id];
      c.needsUpdate !== false && a.setValue(t, c.value, i);
    }
  }
  static seqWithValue(t, e) {
    let n = [];
    for (let i = 0, r2 = t.length; i !== r2; ++i) {
      let o = t[i];
      o.id in e && n.push(o);
    }
    return n;
  }
};
r(wc, "WebGLUniforms");
var Ri = wc;
function vu(s, t, e) {
  let n = s.createShader(t);
  return s.shaderSource(n, e), s.compileShader(n), n;
}
r(vu, "WebGLShader");
var P0 = 37297;
var I0 = 0;
function L0(s, t) {
  let e = s.split(`
`), n = [], i = Math.max(t - 6, 0), r2 = Math.min(t + 6, e.length);
  for (let o = i; o < r2; o++) {
    let a = o + 1;
    n.push(`${a === t ? ">" : " "} ${a}: ${e[o]}`);
  }
  return n.join(`
`);
}
r(L0, "handleSource");
function U0(s) {
  let t = Jt.getPrimaries(Jt.workingColorSpace), e = Jt.getPrimaries(s), n;
  switch (t === e ? n = "" : t === tr && e === js ? n = "LinearDisplayP3ToLinearSRGB" : t === js && e === tr && (n = "LinearSRGBToLinearDisplayP3"), s) {
    case Dn:
    case Vr:
      return [n, "LinearTransferOETF"];
    case Ke:
    case zo:
      return [n, "sRGBTransferOETF"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported color space:", s), [n, "LinearTransferOETF"];
  }
}
r(U0, "getEncodingComponents");
function yu(s, t, e) {
  let n = s.getShaderParameter(t, s.COMPILE_STATUS), i = s.getShaderInfoLog(t).trim();
  if (n && i === "") return "";
  let r2 = /ERROR: 0:(\d+)/.exec(i);
  if (r2) {
    let o = parseInt(r2[1]);
    return e.toUpperCase() + `

` + i + `

` + L0(s.getShaderSource(t), o);
  } else return i;
}
r(yu, "getShaderErrors");
function D0(s, t) {
  let e = U0(t);
  return `vec4 ${s}( vec4 value ) { return ${e[0]}( ${e[1]}( value ) ); }`;
}
r(D0, "getTexelEncodingFunction");
function N0(s, t) {
  let e;
  switch (t) {
    case Ff:
      e = "Linear";
      break;
    case Bf:
      e = "Reinhard";
      break;
    case zf:
      e = "OptimizedCineon";
      break;
    case kf:
      e = "ACESFilmic";
      break;
    case Hf:
      e = "AgX";
      break;
    case Gf:
      e = "Neutral";
      break;
    case Vf:
      e = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", t), e = "Linear";
  }
  return "vec3 " + s + "( vec3 color ) { return " + e + "ToneMapping( color ); }";
}
r(N0, "getToneMappingFunction");
function O0(s) {
  return [s.extensionDerivatives || s.envMapCubeUVHeight || s.bumpMap || s.normalMapTangentSpace || s.clearcoatNormalMap || s.flatShading || s.alphaToCoverage || s.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "", (s.extensionFragDepth || s.logarithmicDepthBuffer) && s.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "", s.extensionDrawBuffers && s.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (s.extensionShaderTextureLOD || s.envMap || s.transmission) && s.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(yi).join(`
`);
}
r(O0, "generateExtensions");
function F0(s) {
  return [s.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "", s.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""].filter(yi).join(`
`);
}
r(F0, "generateVertexExtensions");
function B0(s) {
  let t = [];
  for (let e in s) {
    let n = s[e];
    n !== false && t.push("#define " + e + " " + n);
  }
  return t.join(`
`);
}
r(B0, "generateDefines");
function z0(s, t) {
  let e = {}, n = s.getProgramParameter(t, s.ACTIVE_ATTRIBUTES);
  for (let i = 0; i < n; i++) {
    let r2 = s.getActiveAttrib(t, i), o = r2.name, a = 1;
    r2.type === s.FLOAT_MAT2 && (a = 2), r2.type === s.FLOAT_MAT3 && (a = 3), r2.type === s.FLOAT_MAT4 && (a = 4), e[o] = { type: r2.type, location: s.getAttribLocation(t, o), locationSize: a };
  }
  return e;
}
r(z0, "fetchAttributeLocations");
function yi(s) {
  return s !== "";
}
r(yi, "filterEmptyLine");
function Mu(s, t) {
  let e = t.numSpotLightShadows + t.numSpotLightMaps - t.numSpotLightShadowsWithMaps;
  return s.replace(/NUM_DIR_LIGHTS/g, t.numDirLights).replace(/NUM_SPOT_LIGHTS/g, t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, e).replace(/NUM_RECT_AREA_LIGHTS/g, t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, t.numPointLights).replace(/NUM_HEMI_LIGHTS/g, t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, t.numPointLightShadows);
}
r(Mu, "replaceLightNums");
function Su(s, t) {
  return s.replace(/NUM_CLIPPING_PLANES/g, t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, t.numClippingPlanes - t.numClipIntersection);
}
r(Su, "replaceClippingPlaneNums");
var k0 = /^[ \t]*#include +<([\w\d./]+)>/gm;
function Qa(s) {
  return s.replace(k0, H0);
}
r(Qa, "resolveIncludes");
var V0 = /* @__PURE__ */ new Map([["encodings_fragment", "colorspace_fragment"], ["encodings_pars_fragment", "colorspace_pars_fragment"], ["output_fragment", "opaque_fragment"]]);
function H0(s, t) {
  let e = zt[t];
  if (e === void 0) {
    let n = V0.get(t);
    if (n !== void 0) e = zt[n], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', t, n);
    else throw new Error("Can not resolve #include <" + t + ">");
  }
  return Qa(e);
}
r(H0, "includeReplacer");
var G0 = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function bu(s) {
  return s.replace(G0, W0);
}
r(bu, "unrollLoops");
function W0(s, t, e, n) {
  let i = "";
  for (let r2 = parseInt(t); r2 < parseInt(e); r2++) i += n.replace(/\[\s*i\s*\]/g, "[ " + r2 + " ]").replace(/UNROLLED_LOOP_INDEX/g, r2);
  return i;
}
r(W0, "loopReplacer");
function Eu(s) {
  let t = `precision ${s.precision} float;
	precision ${s.precision} int;
	precision ${s.precision} sampler2D;
	precision ${s.precision} samplerCube;
	`;
  return s.isWebGL2 && (t += `precision ${s.precision} sampler3D;
		precision ${s.precision} sampler2DArray;
		precision ${s.precision} sampler2DShadow;
		precision ${s.precision} samplerCubeShadow;
		precision ${s.precision} sampler2DArrayShadow;
		precision ${s.precision} isampler2D;
		precision ${s.precision} isampler3D;
		precision ${s.precision} isamplerCube;
		precision ${s.precision} isampler2DArray;
		precision ${s.precision} usampler2D;
		precision ${s.precision} usampler3D;
		precision ${s.precision} usamplerCube;
		precision ${s.precision} usampler2DArray;
		`), s.precision === "highp" ? t += `
#define HIGH_PRECISION` : s.precision === "mediump" ? t += `
#define MEDIUM_PRECISION` : s.precision === "lowp" && (t += `
#define LOW_PRECISION`), t;
}
r(Eu, "generatePrecision");
function X0(s) {
  let t = "SHADOWMAP_TYPE_BASIC";
  return s.shadowMapType === Ld ? t = "SHADOWMAP_TYPE_PCF" : s.shadowMapType === uf ? t = "SHADOWMAP_TYPE_PCF_SOFT" : s.shadowMapType === ln && (t = "SHADOWMAP_TYPE_VSM"), t;
}
r(X0, "generateShadowMapTypeDefine");
function q0(s) {
  let t = "ENVMAP_TYPE_CUBE";
  if (s.envMap) switch (s.envMapMode) {
    case Ci:
    case Pi:
      t = "ENVMAP_TYPE_CUBE";
      break;
    case kr:
      t = "ENVMAP_TYPE_CUBE_UV";
      break;
  }
  return t;
}
r(q0, "generateEnvMapTypeDefine");
function Y0(s) {
  let t = "ENVMAP_MODE_REFLECTION";
  if (s.envMap) switch (s.envMapMode) {
    case Pi:
      t = "ENVMAP_MODE_REFRACTION";
      break;
  }
  return t;
}
r(Y0, "generateEnvMapModeDefine");
function Z0(s) {
  let t = "ENVMAP_BLENDING_NONE";
  if (s.envMap) switch (s.combine) {
    case Oo:
      t = "ENVMAP_BLENDING_MULTIPLY";
      break;
    case Nf:
      t = "ENVMAP_BLENDING_MIX";
      break;
    case Of:
      t = "ENVMAP_BLENDING_ADD";
      break;
  }
  return t;
}
r(Z0, "generateEnvMapBlendingDefine");
function J0(s) {
  let t = s.envMapCubeUVHeight;
  if (t === null) return null;
  let e = Math.log2(t) - 2, n = 1 / t;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, e), 7 * 16)), texelHeight: n, maxMip: e };
}
r(J0, "generateCubeUVSize");
function $0(s, t, e, n) {
  let i = s.getContext(), r2 = e.defines, o = e.vertexShader, a = e.fragmentShader, c = X0(e), l = q0(e), h = Y0(e), d = Z0(e), f = J0(e), g = e.isWebGL2 ? "" : O0(e), _ = F0(e), v = B0(r2), m = i.createProgram(), p, w, x = e.glslVersion ? "#version " + e.glslVersion + `
` : "";
  e.isRawShaderMaterial ? (p = ["#define SHADER_TYPE " + e.shaderType, "#define SHADER_NAME " + e.shaderName, v].filter(yi).join(`
`), p.length > 0 && (p += `
`), w = [g, "#define SHADER_TYPE " + e.shaderType, "#define SHADER_NAME " + e.shaderName, v].filter(yi).join(`
`), w.length > 0 && (w += `
`)) : (p = [Eu(e), "#define SHADER_TYPE " + e.shaderType, "#define SHADER_NAME " + e.shaderName, v, e.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "", e.batching ? "#define USE_BATCHING" : "", e.instancing ? "#define USE_INSTANCING" : "", e.instancingColor ? "#define USE_INSTANCING_COLOR" : "", e.instancingMorph ? "#define USE_INSTANCING_MORPH" : "", e.useFog && e.fog ? "#define USE_FOG" : "", e.useFog && e.fogExp2 ? "#define FOG_EXP2" : "", e.map ? "#define USE_MAP" : "", e.envMap ? "#define USE_ENVMAP" : "", e.envMap ? "#define " + h : "", e.lightMap ? "#define USE_LIGHTMAP" : "", e.aoMap ? "#define USE_AOMAP" : "", e.bumpMap ? "#define USE_BUMPMAP" : "", e.normalMap ? "#define USE_NORMALMAP" : "", e.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "", e.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "", e.displacementMap ? "#define USE_DISPLACEMENTMAP" : "", e.emissiveMap ? "#define USE_EMISSIVEMAP" : "", e.anisotropy ? "#define USE_ANISOTROPY" : "", e.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "", e.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", e.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", e.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", e.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "", e.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "", e.specularMap ? "#define USE_SPECULARMAP" : "", e.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "", e.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "", e.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", e.metalnessMap ? "#define USE_METALNESSMAP" : "", e.alphaMap ? "#define USE_ALPHAMAP" : "", e.alphaHash ? "#define USE_ALPHAHASH" : "", e.transmission ? "#define USE_TRANSMISSION" : "", e.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", e.thicknessMap ? "#define USE_THICKNESSMAP" : "", e.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "", e.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "", e.mapUv ? "#define MAP_UV " + e.mapUv : "", e.alphaMapUv ? "#define ALPHAMAP_UV " + e.alphaMapUv : "", e.lightMapUv ? "#define LIGHTMAP_UV " + e.lightMapUv : "", e.aoMapUv ? "#define AOMAP_UV " + e.aoMapUv : "", e.emissiveMapUv ? "#define EMISSIVEMAP_UV " + e.emissiveMapUv : "", e.bumpMapUv ? "#define BUMPMAP_UV " + e.bumpMapUv : "", e.normalMapUv ? "#define NORMALMAP_UV " + e.normalMapUv : "", e.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + e.displacementMapUv : "", e.metalnessMapUv ? "#define METALNESSMAP_UV " + e.metalnessMapUv : "", e.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + e.roughnessMapUv : "", e.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + e.anisotropyMapUv : "", e.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + e.clearcoatMapUv : "", e.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + e.clearcoatNormalMapUv : "", e.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + e.clearcoatRoughnessMapUv : "", e.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + e.iridescenceMapUv : "", e.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + e.iridescenceThicknessMapUv : "", e.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + e.sheenColorMapUv : "", e.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + e.sheenRoughnessMapUv : "", e.specularMapUv ? "#define SPECULARMAP_UV " + e.specularMapUv : "", e.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + e.specularColorMapUv : "", e.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + e.specularIntensityMapUv : "", e.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + e.transmissionMapUv : "", e.thicknessMapUv ? "#define THICKNESSMAP_UV " + e.thicknessMapUv : "", e.vertexTangents && e.flatShading === false ? "#define USE_TANGENT" : "", e.vertexColors ? "#define USE_COLOR" : "", e.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", e.vertexUv1s ? "#define USE_UV1" : "", e.vertexUv2s ? "#define USE_UV2" : "", e.vertexUv3s ? "#define USE_UV3" : "", e.pointsUvs ? "#define USE_POINTS_UV" : "", e.flatShading ? "#define FLAT_SHADED" : "", e.skinning ? "#define USE_SKINNING" : "", e.morphTargets ? "#define USE_MORPHTARGETS" : "", e.morphNormals && e.flatShading === false ? "#define USE_MORPHNORMALS" : "", e.morphColors && e.isWebGL2 ? "#define USE_MORPHCOLORS" : "", e.morphTargetsCount > 0 && e.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "", e.morphTargetsCount > 0 && e.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + e.morphTextureStride : "", e.morphTargetsCount > 0 && e.isWebGL2 ? "#define MORPHTARGETS_COUNT " + e.morphTargetsCount : "", e.doubleSided ? "#define DOUBLE_SIDED" : "", e.flipSided ? "#define FLIP_SIDED" : "", e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", e.shadowMapEnabled ? "#define " + c : "", e.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", e.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "", e.useLegacyLights ? "#define LEGACY_LIGHTS" : "", e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", e.logarithmicDepthBuffer && e.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", "	attribute mat4 instanceMatrix;", "#endif", "#ifdef USE_INSTANCING_COLOR", "	attribute vec3 instanceColor;", "#endif", "#ifdef USE_INSTANCING_MORPH", "	uniform sampler2D morphTexture;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_UV1", "	attribute vec2 uv1;", "#endif", "#ifdef USE_UV2", "	attribute vec2 uv2;", "#endif", "#ifdef USE_UV3", "	attribute vec2 uv3;", "#endif", "#ifdef USE_TANGENT", "	attribute vec4 tangent;", "#endif", "#if defined( USE_COLOR_ALPHA )", "	attribute vec4 color;", "#elif defined( USE_COLOR )", "	attribute vec3 color;", "#endif", "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )", "	attribute vec3 morphTarget0;", "	attribute vec3 morphTarget1;", "	attribute vec3 morphTarget2;", "	attribute vec3 morphTarget3;", "	#ifdef USE_MORPHNORMALS", "		attribute vec3 morphNormal0;", "		attribute vec3 morphNormal1;", "		attribute vec3 morphNormal2;", "		attribute vec3 morphNormal3;", "	#else", "		attribute vec3 morphTarget4;", "		attribute vec3 morphTarget5;", "		attribute vec3 morphTarget6;", "		attribute vec3 morphTarget7;", "	#endif", "#endif", "#ifdef USE_SKINNING", "	attribute vec4 skinIndex;", "	attribute vec4 skinWeight;", "#endif", `
`].filter(yi).join(`
`), w = [g, Eu(e), "#define SHADER_TYPE " + e.shaderType, "#define SHADER_NAME " + e.shaderName, v, e.useFog && e.fog ? "#define USE_FOG" : "", e.useFog && e.fogExp2 ? "#define FOG_EXP2" : "", e.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "", e.map ? "#define USE_MAP" : "", e.matcap ? "#define USE_MATCAP" : "", e.envMap ? "#define USE_ENVMAP" : "", e.envMap ? "#define " + l : "", e.envMap ? "#define " + h : "", e.envMap ? "#define " + d : "", f ? "#define CUBEUV_TEXEL_WIDTH " + f.texelWidth : "", f ? "#define CUBEUV_TEXEL_HEIGHT " + f.texelHeight : "", f ? "#define CUBEUV_MAX_MIP " + f.maxMip + ".0" : "", e.lightMap ? "#define USE_LIGHTMAP" : "", e.aoMap ? "#define USE_AOMAP" : "", e.bumpMap ? "#define USE_BUMPMAP" : "", e.normalMap ? "#define USE_NORMALMAP" : "", e.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "", e.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "", e.emissiveMap ? "#define USE_EMISSIVEMAP" : "", e.anisotropy ? "#define USE_ANISOTROPY" : "", e.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "", e.clearcoat ? "#define USE_CLEARCOAT" : "", e.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", e.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", e.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", e.iridescence ? "#define USE_IRIDESCENCE" : "", e.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "", e.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "", e.specularMap ? "#define USE_SPECULARMAP" : "", e.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "", e.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "", e.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", e.metalnessMap ? "#define USE_METALNESSMAP" : "", e.alphaMap ? "#define USE_ALPHAMAP" : "", e.alphaTest ? "#define USE_ALPHATEST" : "", e.alphaHash ? "#define USE_ALPHAHASH" : "", e.sheen ? "#define USE_SHEEN" : "", e.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "", e.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "", e.transmission ? "#define USE_TRANSMISSION" : "", e.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", e.thicknessMap ? "#define USE_THICKNESSMAP" : "", e.vertexTangents && e.flatShading === false ? "#define USE_TANGENT" : "", e.vertexColors || e.instancingColor ? "#define USE_COLOR" : "", e.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", e.vertexUv1s ? "#define USE_UV1" : "", e.vertexUv2s ? "#define USE_UV2" : "", e.vertexUv3s ? "#define USE_UV3" : "", e.pointsUvs ? "#define USE_POINTS_UV" : "", e.gradientMap ? "#define USE_GRADIENTMAP" : "", e.flatShading ? "#define FLAT_SHADED" : "", e.doubleSided ? "#define DOUBLE_SIDED" : "", e.flipSided ? "#define FLIP_SIDED" : "", e.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", e.shadowMapEnabled ? "#define " + c : "", e.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", e.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "", e.useLegacyLights ? "#define LEGACY_LIGHTS" : "", e.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "", e.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", e.logarithmicDepthBuffer && e.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", e.toneMapping !== Tn ? "#define TONE_MAPPING" : "", e.toneMapping !== Tn ? zt.tonemapping_pars_fragment : "", e.toneMapping !== Tn ? N0("toneMapping", e.toneMapping) : "", e.dithering ? "#define DITHERING" : "", e.opaque ? "#define OPAQUE" : "", zt.colorspace_pars_fragment, D0("linearToOutputTexel", e.outputColorSpace), e.useDepthPacking ? "#define DEPTH_PACKING " + e.depthPacking : "", `
`].filter(yi).join(`
`)), o = Qa(o), o = Mu(o, e), o = Su(o, e), a = Qa(a), a = Mu(a, e), a = Su(a, e), o = bu(o), a = bu(a), e.isWebGL2 && e.isRawShaderMaterial !== true && (x = `#version 300 es
`, p = [_, "precision mediump sampler2DArray;", "#define attribute in", "#define varying out", "#define texture2D texture"].join(`
`) + `
` + p, w = ["precision mediump sampler2DArray;", "#define varying in", e.glslVersion === Vh ? "" : "layout(location = 0) out highp vec4 pc_fragColor;", e.glslVersion === Vh ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join(`
`) + `
` + w);
  let b = x + p + o, L = x + w + a, C = vu(i, i.VERTEX_SHADER, b), R = vu(i, i.FRAGMENT_SHADER, L);
  i.attachShader(m, C), i.attachShader(m, R), e.index0AttributeName !== void 0 ? i.bindAttribLocation(m, 0, e.index0AttributeName) : e.morphTargets === true && i.bindAttribLocation(m, 0, "position"), i.linkProgram(m);
  function D(Q) {
    if (s.debug.checkShaderErrors) {
      let $ = i.getProgramInfoLog(m).trim(), I = i.getShaderInfoLog(C).trim(), G = i.getShaderInfoLog(R).trim(), k = true, J = true;
      if (i.getProgramParameter(m, i.LINK_STATUS) === false) if (k = false, typeof s.debug.onShaderError == "function") s.debug.onShaderError(i, m, C, R);
      else {
        let q2 = yu(i, C, "vertex"), Y = yu(i, R, "fragment");
        console.error("THREE.WebGLProgram: Shader Error " + i.getError() + " - VALIDATE_STATUS " + i.getProgramParameter(m, i.VALIDATE_STATUS) + `

Material Name: ` + Q.name + `
Material Type: ` + Q.type + `

Program Info Log: ` + $ + `
` + q2 + `
` + Y);
      }
      else $ !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", $) : (I === "" || G === "") && (J = false);
      J && (Q.diagnostics = { runnable: k, programLog: $, vertexShader: { log: I, prefix: p }, fragmentShader: { log: G, prefix: w } });
    }
    i.deleteShader(C), i.deleteShader(R), X = new Ri(i, m), M = z0(i, m);
  }
  r(D, "onFirstUse");
  let X;
  this.getUniforms = function() {
    return X === void 0 && D(this), X;
  };
  let M;
  this.getAttributes = function() {
    return M === void 0 && D(this), M;
  };
  let A = e.rendererExtensionParallelShaderCompile === false;
  return this.isReady = function() {
    return A === false && (A = i.getProgramParameter(m, P0)), A;
  }, this.destroy = function() {
    n.releaseStatesOfProgram(this), i.deleteProgram(m), this.program = void 0;
  }, this.type = e.shaderType, this.name = e.shaderName, this.id = I0++, this.cacheKey = t, this.usedTimes = 1, this.program = m, this.vertexShader = C, this.fragmentShader = R, this;
}
r($0, "WebGLProgram");
var K0 = 0;
var Ac = class Ac2 {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(t) {
    let e = t.vertexShader, n = t.fragmentShader, i = this._getShaderStage(e), r2 = this._getShaderStage(n), o = this._getShaderCacheForMaterial(t);
    return o.has(i) === false && (o.add(i), i.usedTimes++), o.has(r2) === false && (o.add(r2), r2.usedTimes++), this;
  }
  remove(t) {
    let e = this.materialCache.get(t);
    for (let n of e) n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code);
    return this.materialCache.delete(t), this;
  }
  getVertexShaderID(t) {
    return this._getShaderStage(t.vertexShader).id;
  }
  getFragmentShaderID(t) {
    return this._getShaderStage(t.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(t) {
    let e = this.materialCache, n = e.get(t);
    return n === void 0 && (n = /* @__PURE__ */ new Set(), e.set(t, n)), n;
  }
  _getShaderStage(t) {
    let e = this.shaderCache, n = e.get(t);
    return n === void 0 && (n = new to(t), e.set(t, n)), n;
  }
};
r(Ac, "WebGLShaderCache");
var ja = Ac;
var Tc = class Tc2 {
  constructor(t) {
    this.id = K0++, this.code = t, this.usedTimes = 0;
  }
};
r(Tc, "WebGLShaderStage");
var to = Tc;
function Q0(s, t, e, n, i, r2, o) {
  let a = new ss(), c = new ja(), l = /* @__PURE__ */ new Set(), h = [], d = i.isWebGL2, f = i.logarithmicDepthBuffer, g = i.vertexTextures, _ = i.precision, v = { MeshDepthMaterial: "depth", MeshDistanceMaterial: "distanceRGBA", MeshNormalMaterial: "normal", MeshBasicMaterial: "basic", MeshLambertMaterial: "lambert", MeshPhongMaterial: "phong", MeshToonMaterial: "toon", MeshStandardMaterial: "physical", MeshPhysicalMaterial: "physical", MeshMatcapMaterial: "matcap", LineBasicMaterial: "basic", LineDashedMaterial: "dashed", PointsMaterial: "points", ShadowMaterial: "shadow", SpriteMaterial: "sprite" };
  function m(M) {
    return l.add(M), M === 0 ? "uv" : `uv${M}`;
  }
  r(m, "getChannel");
  function p(M, A, Q, $, I) {
    let G = $.fog, k = I.geometry, J = M.isMeshStandardMaterial ? $.environment : null, q2 = (M.isMeshStandardMaterial ? e : t).get(M.envMap || J), Y = q2 && q2.mapping === kr ? q2.image.height : null, it = v[M.type];
    M.precision !== null && (_ = i.getMaxPrecision(M.precision), _ !== M.precision && console.warn("THREE.WebGLProgram.getParameters:", M.precision, "not supported, using", _, "instead."));
    let nt = k.morphAttributes.position || k.morphAttributes.normal || k.morphAttributes.color, _t = nt !== void 0 ? nt.length : 0, It = 0;
    k.morphAttributes.position !== void 0 && (It = 1), k.morphAttributes.normal !== void 0 && (It = 2), k.morphAttributes.color !== void 0 && (It = 3);
    let V, tt, mt, wt;
    if (it) {
      let Kt = Qe[it];
      V = Kt.vertexShader, tt = Kt.fragmentShader;
    } else V = M.vertexShader, tt = M.fragmentShader, c.update(M), mt = c.getVertexShaderID(M), wt = c.getFragmentShaderID(M);
    let Mt = s.getRenderTarget(), vt = I.isInstancedMesh === true, Ht = I.isBatchedMesh === true, At = !!M.map, T = !!M.matcap, at = !!q2, Z = !!M.aoMap, st = !!M.lightMap, K = !!M.bumpMap, xt = !!M.normalMap, pt = !!M.displacementMap, yt = !!M.emissiveMap, Wt = !!M.metalnessMap, E = !!M.roughnessMap, y = M.anisotropy > 0, H = M.clearcoat > 0, W = M.iridescence > 0, et = M.sheen > 0, j = M.transmission > 0, Lt = y && !!M.anisotropyMap, Rt = H && !!M.clearcoatMap, ct = H && !!M.clearcoatNormalMap, ut = H && !!M.clearcoatRoughnessMap, Ut = W && !!M.iridescenceMap, rt = W && !!M.iridescenceThicknessMap, ae = et && !!M.sheenColorMap, Xt = et && !!M.sheenRoughnessMap, Tt = !!M.specularMap, St = !!M.specularColorMap, bt = !!M.specularIntensityMap, Yt = j && !!M.transmissionMap, Nt = j && !!M.thicknessMap, te = !!M.gradientMap, U = !!M.alphaMap, dt = M.alphaTest > 0, F = !!M.alphaHash, ot = !!M.extensions, ft = Tn;
    M.toneMapped && (Mt === null || Mt.isXRRenderTarget === true) && (ft = s.toneMapping);
    let qt = { isWebGL2: d, shaderID: it, shaderType: M.type, shaderName: M.name, vertexShader: V, fragmentShader: tt, defines: M.defines, customVertexShaderID: mt, customFragmentShaderID: wt, isRawShaderMaterial: M.isRawShaderMaterial === true, glslVersion: M.glslVersion, precision: _, batching: Ht, instancing: vt, instancingColor: vt && I.instanceColor !== null, instancingMorph: vt && I.morphTexture !== null, supportsVertexTextures: g, outputColorSpace: Mt === null ? s.outputColorSpace : Mt.isXRRenderTarget === true ? Mt.texture.colorSpace : Dn, alphaToCoverage: !!M.alphaToCoverage, map: At, matcap: T, envMap: at, envMapMode: at && q2.mapping, envMapCubeUVHeight: Y, aoMap: Z, lightMap: st, bumpMap: K, normalMap: xt, displacementMap: g && pt, emissiveMap: yt, normalMapObjectSpace: xt && M.normalMapType === ep, normalMapTangentSpace: xt && M.normalMapType === Bo, metalnessMap: Wt, roughnessMap: E, anisotropy: y, anisotropyMap: Lt, clearcoat: H, clearcoatMap: Rt, clearcoatNormalMap: ct, clearcoatRoughnessMap: ut, iridescence: W, iridescenceMap: Ut, iridescenceThicknessMap: rt, sheen: et, sheenColorMap: ae, sheenRoughnessMap: Xt, specularMap: Tt, specularColorMap: St, specularIntensityMap: bt, transmission: j, transmissionMap: Yt, thicknessMap: Nt, gradientMap: te, opaque: M.transparent === false && M.blending === wi && M.alphaToCoverage === false, alphaMap: U, alphaTest: dt, alphaHash: F, combine: M.combine, mapUv: At && m(M.map.channel), aoMapUv: Z && m(M.aoMap.channel), lightMapUv: st && m(M.lightMap.channel), bumpMapUv: K && m(M.bumpMap.channel), normalMapUv: xt && m(M.normalMap.channel), displacementMapUv: pt && m(M.displacementMap.channel), emissiveMapUv: yt && m(M.emissiveMap.channel), metalnessMapUv: Wt && m(M.metalnessMap.channel), roughnessMapUv: E && m(M.roughnessMap.channel), anisotropyMapUv: Lt && m(M.anisotropyMap.channel), clearcoatMapUv: Rt && m(M.clearcoatMap.channel), clearcoatNormalMapUv: ct && m(M.clearcoatNormalMap.channel), clearcoatRoughnessMapUv: ut && m(M.clearcoatRoughnessMap.channel), iridescenceMapUv: Ut && m(M.iridescenceMap.channel), iridescenceThicknessMapUv: rt && m(M.iridescenceThicknessMap.channel), sheenColorMapUv: ae && m(M.sheenColorMap.channel), sheenRoughnessMapUv: Xt && m(M.sheenRoughnessMap.channel), specularMapUv: Tt && m(M.specularMap.channel), specularColorMapUv: St && m(M.specularColorMap.channel), specularIntensityMapUv: bt && m(M.specularIntensityMap.channel), transmissionMapUv: Yt && m(M.transmissionMap.channel), thicknessMapUv: Nt && m(M.thicknessMap.channel), alphaMapUv: U && m(M.alphaMap.channel), vertexTangents: !!k.attributes.tangent && (xt || y), vertexColors: M.vertexColors, vertexAlphas: M.vertexColors === true && !!k.attributes.color && k.attributes.color.itemSize === 4, pointsUvs: I.isPoints === true && !!k.attributes.uv && (At || U), fog: !!G, useFog: M.fog === true, fogExp2: !!G && G.isFogExp2, flatShading: M.flatShading === true, sizeAttenuation: M.sizeAttenuation === true, logarithmicDepthBuffer: f, skinning: I.isSkinnedMesh === true, morphTargets: k.morphAttributes.position !== void 0, morphNormals: k.morphAttributes.normal !== void 0, morphColors: k.morphAttributes.color !== void 0, morphTargetsCount: _t, morphTextureStride: It, numDirLights: A.directional.length, numPointLights: A.point.length, numSpotLights: A.spot.length, numSpotLightMaps: A.spotLightMap.length, numRectAreaLights: A.rectArea.length, numHemiLights: A.hemi.length, numDirLightShadows: A.directionalShadowMap.length, numPointLightShadows: A.pointShadowMap.length, numSpotLightShadows: A.spotShadowMap.length, numSpotLightShadowsWithMaps: A.numSpotLightShadowsWithMaps, numLightProbes: A.numLightProbes, numClippingPlanes: o.numPlanes, numClipIntersection: o.numIntersection, dithering: M.dithering, shadowMapEnabled: s.shadowMap.enabled && Q.length > 0, shadowMapType: s.shadowMap.type, toneMapping: ft, useLegacyLights: s._useLegacyLights, decodeVideoTexture: At && M.map.isVideoTexture === true && Jt.getTransfer(M.map.colorSpace) === jt, premultipliedAlpha: M.premultipliedAlpha, doubleSided: M.side === un, flipSided: M.side === Pe, useDepthPacking: M.depthPacking >= 0, depthPacking: M.depthPacking || 0, index0AttributeName: M.index0AttributeName, extensionDerivatives: ot && M.extensions.derivatives === true, extensionFragDepth: ot && M.extensions.fragDepth === true, extensionDrawBuffers: ot && M.extensions.drawBuffers === true, extensionShaderTextureLOD: ot && M.extensions.shaderTextureLOD === true, extensionClipCullDistance: ot && M.extensions.clipCullDistance === true && n.has("WEBGL_clip_cull_distance"), extensionMultiDraw: ot && M.extensions.multiDraw === true && n.has("WEBGL_multi_draw"), rendererExtensionFragDepth: d || n.has("EXT_frag_depth"), rendererExtensionDrawBuffers: d || n.has("WEBGL_draw_buffers"), rendererExtensionShaderTextureLod: d || n.has("EXT_shader_texture_lod"), rendererExtensionParallelShaderCompile: n.has("KHR_parallel_shader_compile"), customProgramCacheKey: M.customProgramCacheKey() };
    return qt.vertexUv1s = l.has(1), qt.vertexUv2s = l.has(2), qt.vertexUv3s = l.has(3), l.clear(), qt;
  }
  r(p, "getParameters");
  function w(M) {
    let A = [];
    if (M.shaderID ? A.push(M.shaderID) : (A.push(M.customVertexShaderID), A.push(M.customFragmentShaderID)), M.defines !== void 0) for (let Q in M.defines) A.push(Q), A.push(M.defines[Q]);
    return M.isRawShaderMaterial === false && (x(A, M), b(A, M), A.push(s.outputColorSpace)), A.push(M.customProgramCacheKey), A.join();
  }
  r(w, "getProgramCacheKey");
  function x(M, A) {
    M.push(A.precision), M.push(A.outputColorSpace), M.push(A.envMapMode), M.push(A.envMapCubeUVHeight), M.push(A.mapUv), M.push(A.alphaMapUv), M.push(A.lightMapUv), M.push(A.aoMapUv), M.push(A.bumpMapUv), M.push(A.normalMapUv), M.push(A.displacementMapUv), M.push(A.emissiveMapUv), M.push(A.metalnessMapUv), M.push(A.roughnessMapUv), M.push(A.anisotropyMapUv), M.push(A.clearcoatMapUv), M.push(A.clearcoatNormalMapUv), M.push(A.clearcoatRoughnessMapUv), M.push(A.iridescenceMapUv), M.push(A.iridescenceThicknessMapUv), M.push(A.sheenColorMapUv), M.push(A.sheenRoughnessMapUv), M.push(A.specularMapUv), M.push(A.specularColorMapUv), M.push(A.specularIntensityMapUv), M.push(A.transmissionMapUv), M.push(A.thicknessMapUv), M.push(A.combine), M.push(A.fogExp2), M.push(A.sizeAttenuation), M.push(A.morphTargetsCount), M.push(A.morphAttributeCount), M.push(A.numDirLights), M.push(A.numPointLights), M.push(A.numSpotLights), M.push(A.numSpotLightMaps), M.push(A.numHemiLights), M.push(A.numRectAreaLights), M.push(A.numDirLightShadows), M.push(A.numPointLightShadows), M.push(A.numSpotLightShadows), M.push(A.numSpotLightShadowsWithMaps), M.push(A.numLightProbes), M.push(A.shadowMapType), M.push(A.toneMapping), M.push(A.numClippingPlanes), M.push(A.numClipIntersection), M.push(A.depthPacking);
  }
  r(x, "getProgramCacheKeyParameters");
  function b(M, A) {
    a.disableAll(), A.isWebGL2 && a.enable(0), A.supportsVertexTextures && a.enable(1), A.instancing && a.enable(2), A.instancingColor && a.enable(3), A.instancingMorph && a.enable(4), A.matcap && a.enable(5), A.envMap && a.enable(6), A.normalMapObjectSpace && a.enable(7), A.normalMapTangentSpace && a.enable(8), A.clearcoat && a.enable(9), A.iridescence && a.enable(10), A.alphaTest && a.enable(11), A.vertexColors && a.enable(12), A.vertexAlphas && a.enable(13), A.vertexUv1s && a.enable(14), A.vertexUv2s && a.enable(15), A.vertexUv3s && a.enable(16), A.vertexTangents && a.enable(17), A.anisotropy && a.enable(18), A.alphaHash && a.enable(19), A.batching && a.enable(20), M.push(a.mask), a.disableAll(), A.fog && a.enable(0), A.useFog && a.enable(1), A.flatShading && a.enable(2), A.logarithmicDepthBuffer && a.enable(3), A.skinning && a.enable(4), A.morphTargets && a.enable(5), A.morphNormals && a.enable(6), A.morphColors && a.enable(7), A.premultipliedAlpha && a.enable(8), A.shadowMapEnabled && a.enable(9), A.useLegacyLights && a.enable(10), A.doubleSided && a.enable(11), A.flipSided && a.enable(12), A.useDepthPacking && a.enable(13), A.dithering && a.enable(14), A.transmission && a.enable(15), A.sheen && a.enable(16), A.opaque && a.enable(17), A.pointsUvs && a.enable(18), A.decodeVideoTexture && a.enable(19), A.alphaToCoverage && a.enable(20), M.push(a.mask);
  }
  r(b, "getProgramCacheKeyBooleans");
  function L(M) {
    let A = v[M.type], Q;
    if (A) {
      let $ = Qe[A];
      Q = zp.clone($.uniforms);
    } else Q = M.uniforms;
    return Q;
  }
  r(L, "getUniforms");
  function C(M, A) {
    let Q;
    for (let $ = 0, I = h.length; $ < I; $++) {
      let G = h[$];
      if (G.cacheKey === A) {
        Q = G, ++Q.usedTimes;
        break;
      }
    }
    return Q === void 0 && (Q = new $0(s, A, M, r2), h.push(Q)), Q;
  }
  r(C, "acquireProgram");
  function R(M) {
    if (--M.usedTimes === 0) {
      let A = h.indexOf(M);
      h[A] = h[h.length - 1], h.pop(), M.destroy();
    }
  }
  r(R, "releaseProgram");
  function D(M) {
    c.remove(M);
  }
  r(D, "releaseShaderCache");
  function X() {
    c.dispose();
  }
  return r(X, "dispose"), { getParameters: p, getProgramCacheKey: w, getUniforms: L, acquireProgram: C, releaseProgram: R, releaseShaderCache: D, programs: h, dispose: X };
}
r(Q0, "WebGLPrograms");
function j0() {
  let s = /* @__PURE__ */ new WeakMap();
  function t(r2) {
    let o = s.get(r2);
    return o === void 0 && (o = {}, s.set(r2, o)), o;
  }
  r(t, "get");
  function e(r2) {
    s.delete(r2);
  }
  r(e, "remove");
  function n(r2, o, a) {
    s.get(r2)[o] = a;
  }
  r(n, "update");
  function i() {
    s = /* @__PURE__ */ new WeakMap();
  }
  return r(i, "dispose"), { get: t, remove: e, update: n, dispose: i };
}
r(j0, "WebGLProperties");
function tx(s, t) {
  return s.groupOrder !== t.groupOrder ? s.groupOrder - t.groupOrder : s.renderOrder !== t.renderOrder ? s.renderOrder - t.renderOrder : s.material.id !== t.material.id ? s.material.id - t.material.id : s.z !== t.z ? s.z - t.z : s.id - t.id;
}
r(tx, "painterSortStable");
function wu(s, t) {
  return s.groupOrder !== t.groupOrder ? s.groupOrder - t.groupOrder : s.renderOrder !== t.renderOrder ? s.renderOrder - t.renderOrder : s.z !== t.z ? t.z - s.z : s.id - t.id;
}
r(wu, "reversePainterSortStable");
function Au() {
  let s = [], t = 0, e = [], n = [], i = [];
  function r2() {
    t = 0, e.length = 0, n.length = 0, i.length = 0;
  }
  r(r2, "init");
  function o(d, f, g, _, v, m) {
    let p = s[t];
    return p === void 0 ? (p = { id: d.id, object: d, geometry: f, material: g, groupOrder: _, renderOrder: d.renderOrder, z: v, group: m }, s[t] = p) : (p.id = d.id, p.object = d, p.geometry = f, p.material = g, p.groupOrder = _, p.renderOrder = d.renderOrder, p.z = v, p.group = m), t++, p;
  }
  r(o, "getNextRenderItem");
  function a(d, f, g, _, v, m) {
    let p = o(d, f, g, _, v, m);
    g.transmission > 0 ? n.push(p) : g.transparent === true ? i.push(p) : e.push(p);
  }
  r(a, "push");
  function c(d, f, g, _, v, m) {
    let p = o(d, f, g, _, v, m);
    g.transmission > 0 ? n.unshift(p) : g.transparent === true ? i.unshift(p) : e.unshift(p);
  }
  r(c, "unshift");
  function l(d, f) {
    e.length > 1 && e.sort(d || tx), n.length > 1 && n.sort(f || wu), i.length > 1 && i.sort(f || wu);
  }
  r(l, "sort");
  function h() {
    for (let d = t, f = s.length; d < f; d++) {
      let g = s[d];
      if (g.id === null) break;
      g.id = null, g.object = null, g.geometry = null, g.material = null, g.group = null;
    }
  }
  return r(h, "finish"), { opaque: e, transmissive: n, transparent: i, init: r2, push: a, unshift: c, finish: h, sort: l };
}
r(Au, "WebGLRenderList");
function ex() {
  let s = /* @__PURE__ */ new WeakMap();
  function t(n, i) {
    let r2 = s.get(n), o;
    return r2 === void 0 ? (o = new Au(), s.set(n, [o])) : i >= r2.length ? (o = new Au(), r2.push(o)) : o = r2[i], o;
  }
  r(t, "get");
  function e() {
    s = /* @__PURE__ */ new WeakMap();
  }
  return r(e, "dispose"), { get: t, dispose: e };
}
r(ex, "WebGLRenderLists");
function nx() {
  let s = {};
  return { get: function(t) {
    if (s[t.id] !== void 0) return s[t.id];
    let e;
    switch (t.type) {
      case "DirectionalLight":
        e = { direction: new P(), color: new Vt() };
        break;
      case "SpotLight":
        e = { position: new P(), direction: new P(), color: new Vt(), distance: 0, coneCos: 0, penumbraCos: 0, decay: 0 };
        break;
      case "PointLight":
        e = { position: new P(), color: new Vt(), distance: 0, decay: 0 };
        break;
      case "HemisphereLight":
        e = { direction: new P(), skyColor: new Vt(), groundColor: new Vt() };
        break;
      case "RectAreaLight":
        e = { color: new Vt(), position: new P(), halfWidth: new P(), halfHeight: new P() };
        break;
    }
    return s[t.id] = e, e;
  } };
}
r(nx, "UniformsCache");
function ix() {
  let s = {};
  return { get: function(t) {
    if (s[t.id] !== void 0) return s[t.id];
    let e;
    switch (t.type) {
      case "DirectionalLight":
        e = { shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new lt() };
        break;
      case "SpotLight":
        e = { shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new lt() };
        break;
      case "PointLight":
        e = { shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new lt(), shadowCameraNear: 1, shadowCameraFar: 1e3 };
        break;
    }
    return s[t.id] = e, e;
  } };
}
r(ix, "ShadowUniformsCache");
var sx = 0;
function rx(s, t) {
  return (t.castShadow ? 2 : 0) - (s.castShadow ? 2 : 0) + (t.map ? 1 : 0) - (s.map ? 1 : 0);
}
r(rx, "shadowCastingAndTexturingLightsFirst");
function ax(s, t) {
  let e = new nx(), n = ix(), i = { version: 0, hash: { directionalLength: -1, pointLength: -1, spotLength: -1, rectAreaLength: -1, hemiLength: -1, numDirectionalShadows: -1, numPointShadows: -1, numSpotShadows: -1, numSpotMaps: -1, numLightProbes: -1 }, ambient: [0, 0, 0], probe: [], directional: [], directionalShadow: [], directionalShadowMap: [], directionalShadowMatrix: [], spot: [], spotLightMap: [], spotShadow: [], spotShadowMap: [], spotLightMatrix: [], rectArea: [], rectAreaLTC1: null, rectAreaLTC2: null, point: [], pointShadow: [], pointShadowMap: [], pointShadowMatrix: [], hemi: [], numSpotLightShadowsWithMaps: 0, numLightProbes: 0 };
  for (let h = 0; h < 9; h++) i.probe.push(new P());
  let r2 = new P(), o = new Ft(), a = new Ft();
  function c(h, d) {
    let f = 0, g = 0, _ = 0;
    for (let Q = 0; Q < 9; Q++) i.probe[Q].set(0, 0, 0);
    let v = 0, m = 0, p = 0, w = 0, x = 0, b = 0, L = 0, C = 0, R = 0, D = 0, X = 0;
    h.sort(rx);
    let M = d === true ? Math.PI : 1;
    for (let Q = 0, $ = h.length; Q < $; Q++) {
      let I = h[Q], G = I.color, k = I.intensity, J = I.distance, q2 = I.shadow && I.shadow.map ? I.shadow.map.texture : null;
      if (I.isAmbientLight) f += G.r * k * M, g += G.g * k * M, _ += G.b * k * M;
      else if (I.isLightProbe) {
        for (let Y = 0; Y < 9; Y++) i.probe[Y].addScaledVector(I.sh.coefficients[Y], k);
        X++;
      } else if (I.isDirectionalLight) {
        let Y = e.get(I);
        if (Y.color.copy(I.color).multiplyScalar(I.intensity * M), I.castShadow) {
          let it = I.shadow, nt = n.get(I);
          nt.shadowBias = it.bias, nt.shadowNormalBias = it.normalBias, nt.shadowRadius = it.radius, nt.shadowMapSize = it.mapSize, i.directionalShadow[v] = nt, i.directionalShadowMap[v] = q2, i.directionalShadowMatrix[v] = I.shadow.matrix, b++;
        }
        i.directional[v] = Y, v++;
      } else if (I.isSpotLight) {
        let Y = e.get(I);
        Y.position.setFromMatrixPosition(I.matrixWorld), Y.color.copy(G).multiplyScalar(k * M), Y.distance = J, Y.coneCos = Math.cos(I.angle), Y.penumbraCos = Math.cos(I.angle * (1 - I.penumbra)), Y.decay = I.decay, i.spot[p] = Y;
        let it = I.shadow;
        if (I.map && (i.spotLightMap[R] = I.map, R++, it.updateMatrices(I), I.castShadow && D++), i.spotLightMatrix[p] = it.matrix, I.castShadow) {
          let nt = n.get(I);
          nt.shadowBias = it.bias, nt.shadowNormalBias = it.normalBias, nt.shadowRadius = it.radius, nt.shadowMapSize = it.mapSize, i.spotShadow[p] = nt, i.spotShadowMap[p] = q2, C++;
        }
        p++;
      } else if (I.isRectAreaLight) {
        let Y = e.get(I);
        Y.color.copy(G).multiplyScalar(k), Y.halfWidth.set(I.width * 0.5, 0, 0), Y.halfHeight.set(0, I.height * 0.5, 0), i.rectArea[w] = Y, w++;
      } else if (I.isPointLight) {
        let Y = e.get(I);
        if (Y.color.copy(I.color).multiplyScalar(I.intensity * M), Y.distance = I.distance, Y.decay = I.decay, I.castShadow) {
          let it = I.shadow, nt = n.get(I);
          nt.shadowBias = it.bias, nt.shadowNormalBias = it.normalBias, nt.shadowRadius = it.radius, nt.shadowMapSize = it.mapSize, nt.shadowCameraNear = it.camera.near, nt.shadowCameraFar = it.camera.far, i.pointShadow[m] = nt, i.pointShadowMap[m] = q2, i.pointShadowMatrix[m] = I.shadow.matrix, L++;
        }
        i.point[m] = Y, m++;
      } else if (I.isHemisphereLight) {
        let Y = e.get(I);
        Y.skyColor.copy(I.color).multiplyScalar(k * M), Y.groundColor.copy(I.groundColor).multiplyScalar(k * M), i.hemi[x] = Y, x++;
      }
    }
    w > 0 && (t.isWebGL2 ? s.has("OES_texture_float_linear") === true ? (i.rectAreaLTC1 = ht.LTC_FLOAT_1, i.rectAreaLTC2 = ht.LTC_FLOAT_2) : (i.rectAreaLTC1 = ht.LTC_HALF_1, i.rectAreaLTC2 = ht.LTC_HALF_2) : s.has("OES_texture_float_linear") === true ? (i.rectAreaLTC1 = ht.LTC_FLOAT_1, i.rectAreaLTC2 = ht.LTC_FLOAT_2) : s.has("OES_texture_half_float_linear") === true ? (i.rectAreaLTC1 = ht.LTC_HALF_1, i.rectAreaLTC2 = ht.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), i.ambient[0] = f, i.ambient[1] = g, i.ambient[2] = _;
    let A = i.hash;
    (A.directionalLength !== v || A.pointLength !== m || A.spotLength !== p || A.rectAreaLength !== w || A.hemiLength !== x || A.numDirectionalShadows !== b || A.numPointShadows !== L || A.numSpotShadows !== C || A.numSpotMaps !== R || A.numLightProbes !== X) && (i.directional.length = v, i.spot.length = p, i.rectArea.length = w, i.point.length = m, i.hemi.length = x, i.directionalShadow.length = b, i.directionalShadowMap.length = b, i.pointShadow.length = L, i.pointShadowMap.length = L, i.spotShadow.length = C, i.spotShadowMap.length = C, i.directionalShadowMatrix.length = b, i.pointShadowMatrix.length = L, i.spotLightMatrix.length = C + R - D, i.spotLightMap.length = R, i.numSpotLightShadowsWithMaps = D, i.numLightProbes = X, A.directionalLength = v, A.pointLength = m, A.spotLength = p, A.rectAreaLength = w, A.hemiLength = x, A.numDirectionalShadows = b, A.numPointShadows = L, A.numSpotShadows = C, A.numSpotMaps = R, A.numLightProbes = X, i.version = sx++);
  }
  r(c, "setup");
  function l(h, d) {
    let f = 0, g = 0, _ = 0, v = 0, m = 0, p = d.matrixWorldInverse;
    for (let w = 0, x = h.length; w < x; w++) {
      let b = h[w];
      if (b.isDirectionalLight) {
        let L = i.directional[f];
        L.direction.setFromMatrixPosition(b.matrixWorld), r2.setFromMatrixPosition(b.target.matrixWorld), L.direction.sub(r2), L.direction.transformDirection(p), f++;
      } else if (b.isSpotLight) {
        let L = i.spot[_];
        L.position.setFromMatrixPosition(b.matrixWorld), L.position.applyMatrix4(p), L.direction.setFromMatrixPosition(b.matrixWorld), r2.setFromMatrixPosition(b.target.matrixWorld), L.direction.sub(r2), L.direction.transformDirection(p), _++;
      } else if (b.isRectAreaLight) {
        let L = i.rectArea[v];
        L.position.setFromMatrixPosition(b.matrixWorld), L.position.applyMatrix4(p), a.identity(), o.copy(b.matrixWorld), o.premultiply(p), a.extractRotation(o), L.halfWidth.set(b.width * 0.5, 0, 0), L.halfHeight.set(0, b.height * 0.5, 0), L.halfWidth.applyMatrix4(a), L.halfHeight.applyMatrix4(a), v++;
      } else if (b.isPointLight) {
        let L = i.point[g];
        L.position.setFromMatrixPosition(b.matrixWorld), L.position.applyMatrix4(p), g++;
      } else if (b.isHemisphereLight) {
        let L = i.hemi[m];
        L.direction.setFromMatrixPosition(b.matrixWorld), L.direction.transformDirection(p), m++;
      }
    }
  }
  return r(l, "setupView"), { setup: c, setupView: l, state: i };
}
r(ax, "WebGLLights");
function Tu(s, t) {
  let e = new ax(s, t), n = [], i = [];
  function r2() {
    n.length = 0, i.length = 0;
  }
  r(r2, "init");
  function o(d) {
    n.push(d);
  }
  r(o, "pushLight");
  function a(d) {
    i.push(d);
  }
  r(a, "pushShadow");
  function c(d) {
    e.setup(n, d);
  }
  r(c, "setupLights");
  function l(d) {
    e.setupView(n, d);
  }
  return r(l, "setupLightsView"), { init: r2, state: { lightsArray: n, shadowsArray: i, lights: e }, setupLights: c, setupLightsView: l, pushLight: o, pushShadow: a };
}
r(Tu, "WebGLRenderState");
function ox(s, t) {
  let e = /* @__PURE__ */ new WeakMap();
  function n(r2, o = 0) {
    let a = e.get(r2), c;
    return a === void 0 ? (c = new Tu(s, t), e.set(r2, [c])) : o >= a.length ? (c = new Tu(s, t), a.push(c)) : c = a[o], c;
  }
  r(n, "get");
  function i() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return r(i, "dispose"), { get: n, dispose: i };
}
r(ox, "WebGLRenderStates");
var Rc = class Rc2 extends je {
  constructor(t) {
    super(), this.isMeshDepthMaterial = true, this.type = "MeshDepthMaterial", this.depthPacking = jf, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = false, this.wireframeLinewidth = 1, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.depthPacking = t.depthPacking, this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this;
  }
};
r(Rc, "MeshDepthMaterial");
var eo = Rc;
var Cc = class Cc2 extends je {
  constructor(t) {
    super(), this.isMeshDistanceMaterial = true, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this;
  }
};
r(Cc, "MeshDistanceMaterial");
var no = Cc;
var cx = `void main() {
	gl_Position = vec4( position, 1.0 );
}`;
var lx = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function hx(s, t, e) {
  let n = new Di(), i = new lt(), r2 = new lt(), o = new $t(), a = new eo({ depthPacking: tp }), c = new no(), l = {}, h = e.maxTextureSize, d = { [Cn]: Pe, [Pe]: Cn, [un]: un }, f = new tn({ defines: { VSM_SAMPLES: 8 }, uniforms: { shadow_pass: { value: null }, resolution: { value: new lt() }, radius: { value: 4 } }, vertexShader: cx, fragmentShader: lx }), g = f.clone();
  g.defines.HORIZONTAL_PASS = 1;
  let _ = new Le();
  _.setAttribute("position", new Se(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));
  let v = new Me(_, f), m = this;
  this.enabled = false, this.autoUpdate = true, this.needsUpdate = false, this.type = Ld;
  let p = this.type;
  this.render = function(C, R, D) {
    if (m.enabled === false || m.autoUpdate === false && m.needsUpdate === false || C.length === 0) return;
    let X = s.getRenderTarget(), M = s.getActiveCubeFace(), A = s.getActiveMipmapLevel(), Q = s.state;
    Q.setBlending(An), Q.buffers.color.setClear(1, 1, 1, 1), Q.buffers.depth.setTest(true), Q.setScissorTest(false);
    let $ = p !== ln && this.type === ln, I = p === ln && this.type !== ln;
    for (let G = 0, k = C.length; G < k; G++) {
      let J = C[G], q2 = J.shadow;
      if (q2 === void 0) {
        console.warn("THREE.WebGLShadowMap:", J, "has no shadow.");
        continue;
      }
      if (q2.autoUpdate === false && q2.needsUpdate === false) continue;
      i.copy(q2.mapSize);
      let Y = q2.getFrameExtents();
      if (i.multiply(Y), r2.copy(q2.mapSize), (i.x > h || i.y > h) && (i.x > h && (r2.x = Math.floor(h / Y.x), i.x = r2.x * Y.x, q2.mapSize.x = r2.x), i.y > h && (r2.y = Math.floor(h / Y.y), i.y = r2.y * Y.y, q2.mapSize.y = r2.y)), q2.map === null || $ === true || I === true) {
        let nt = this.type !== ln ? { minFilter: ge, magFilter: ge } : {};
        q2.map !== null && q2.map.dispose(), q2.map = new fn(i.x, i.y, nt), q2.map.texture.name = J.name + ".shadowMap", q2.camera.updateProjectionMatrix();
      }
      s.setRenderTarget(q2.map), s.clear();
      let it = q2.getViewportCount();
      for (let nt = 0; nt < it; nt++) {
        let _t = q2.getViewport(nt);
        o.set(r2.x * _t.x, r2.y * _t.y, r2.x * _t.z, r2.y * _t.w), Q.viewport(o), q2.updateMatrices(J, nt), n = q2.getFrustum(), b(R, D, q2.camera, J, this.type);
      }
      q2.isPointLightShadow !== true && this.type === ln && w(q2, D), q2.needsUpdate = false;
    }
    p = this.type, m.needsUpdate = false, s.setRenderTarget(X, M, A);
  };
  function w(C, R) {
    let D = t.update(v);
    f.defines.VSM_SAMPLES !== C.blurSamples && (f.defines.VSM_SAMPLES = C.blurSamples, g.defines.VSM_SAMPLES = C.blurSamples, f.needsUpdate = true, g.needsUpdate = true), C.mapPass === null && (C.mapPass = new fn(i.x, i.y)), f.uniforms.shadow_pass.value = C.map.texture, f.uniforms.resolution.value = C.mapSize, f.uniforms.radius.value = C.radius, s.setRenderTarget(C.mapPass), s.clear(), s.renderBufferDirect(R, null, D, f, v, null), g.uniforms.shadow_pass.value = C.mapPass.texture, g.uniforms.resolution.value = C.mapSize, g.uniforms.radius.value = C.radius, s.setRenderTarget(C.map), s.clear(), s.renderBufferDirect(R, null, D, g, v, null);
  }
  r(w, "VSMPass");
  function x(C, R, D, X) {
    let M = null, A = D.isPointLight === true ? C.customDistanceMaterial : C.customDepthMaterial;
    if (A !== void 0) M = A;
    else if (M = D.isPointLight === true ? c : a, s.localClippingEnabled && R.clipShadows === true && Array.isArray(R.clippingPlanes) && R.clippingPlanes.length !== 0 || R.displacementMap && R.displacementScale !== 0 || R.alphaMap && R.alphaTest > 0 || R.map && R.alphaTest > 0) {
      let Q = M.uuid, $ = R.uuid, I = l[Q];
      I === void 0 && (I = {}, l[Q] = I);
      let G = I[$];
      G === void 0 && (G = M.clone(), I[$] = G, R.addEventListener("dispose", L)), M = G;
    }
    if (M.visible = R.visible, M.wireframe = R.wireframe, X === ln ? M.side = R.shadowSide !== null ? R.shadowSide : R.side : M.side = R.shadowSide !== null ? R.shadowSide : d[R.side], M.alphaMap = R.alphaMap, M.alphaTest = R.alphaTest, M.map = R.map, M.clipShadows = R.clipShadows, M.clippingPlanes = R.clippingPlanes, M.clipIntersection = R.clipIntersection, M.displacementMap = R.displacementMap, M.displacementScale = R.displacementScale, M.displacementBias = R.displacementBias, M.wireframeLinewidth = R.wireframeLinewidth, M.linewidth = R.linewidth, D.isPointLight === true && M.isMeshDistanceMaterial === true) {
      let Q = s.properties.get(M);
      Q.light = D;
    }
    return M;
  }
  r(x, "getDepthMaterial");
  function b(C, R, D, X, M) {
    if (C.visible === false) return;
    if (C.layers.test(R.layers) && (C.isMesh || C.isLine || C.isPoints) && (C.castShadow || C.receiveShadow && M === ln) && (!C.frustumCulled || n.intersectsObject(C))) {
      C.modelViewMatrix.multiplyMatrices(D.matrixWorldInverse, C.matrixWorld);
      let $ = t.update(C), I = C.material;
      if (Array.isArray(I)) {
        let G = $.groups;
        for (let k = 0, J = G.length; k < J; k++) {
          let q2 = G[k], Y = I[q2.materialIndex];
          if (Y && Y.visible) {
            let it = x(C, Y, X, M);
            C.onBeforeShadow(s, C, R, D, $, it, q2), s.renderBufferDirect(D, null, $, it, C, q2), C.onAfterShadow(s, C, R, D, $, it, q2);
          }
        }
      } else if (I.visible) {
        let G = x(C, I, X, M);
        C.onBeforeShadow(s, C, R, D, $, G, null), s.renderBufferDirect(D, null, $, G, C, null), C.onAfterShadow(s, C, R, D, $, G, null);
      }
    }
    let Q = C.children;
    for (let $ = 0, I = Q.length; $ < I; $++) b(Q[$], R, D, X, M);
  }
  r(b, "renderObject");
  function L(C) {
    C.target.removeEventListener("dispose", L);
    for (let D in l) {
      let X = l[D], M = C.target.uuid;
      M in X && (X[M].dispose(), delete X[M]);
    }
  }
  r(L, "onMaterialDispose");
}
r(hx, "WebGLShadowMap");
function ux(s, t, e) {
  let n = e.isWebGL2;
  function i() {
    let U = false, dt = new $t(), F = null, ot = new $t(0, 0, 0, 0);
    return { setMask: function(ft) {
      F !== ft && !U && (s.colorMask(ft, ft, ft, ft), F = ft);
    }, setLocked: function(ft) {
      U = ft;
    }, setClear: function(ft, qt, Kt, me, Fe) {
      Fe === true && (ft *= me, qt *= me, Kt *= me), dt.set(ft, qt, Kt, me), ot.equals(dt) === false && (s.clearColor(ft, qt, Kt, me), ot.copy(dt));
    }, reset: function() {
      U = false, F = null, ot.set(-1, 0, 0, 0);
    } };
  }
  r(i, "ColorBuffer");
  function r2() {
    let U = false, dt = null, F = null, ot = null;
    return { setTest: function(ft) {
      ft ? vt(s.DEPTH_TEST) : Ht(s.DEPTH_TEST);
    }, setMask: function(ft) {
      dt !== ft && !U && (s.depthMask(ft), dt = ft);
    }, setFunc: function(ft) {
      if (F !== ft) {
        switch (ft) {
          case Rf:
            s.depthFunc(s.NEVER);
            break;
          case Cf:
            s.depthFunc(s.ALWAYS);
            break;
          case Pf:
            s.depthFunc(s.LESS);
            break;
          case Js:
            s.depthFunc(s.LEQUAL);
            break;
          case If:
            s.depthFunc(s.EQUAL);
            break;
          case Lf:
            s.depthFunc(s.GEQUAL);
            break;
          case Uf:
            s.depthFunc(s.GREATER);
            break;
          case Df:
            s.depthFunc(s.NOTEQUAL);
            break;
          default:
            s.depthFunc(s.LEQUAL);
        }
        F = ft;
      }
    }, setLocked: function(ft) {
      U = ft;
    }, setClear: function(ft) {
      ot !== ft && (s.clearDepth(ft), ot = ft);
    }, reset: function() {
      U = false, dt = null, F = null, ot = null;
    } };
  }
  r(r2, "DepthBuffer");
  function o() {
    let U = false, dt = null, F = null, ot = null, ft = null, qt = null, Kt = null, me = null, Fe = null;
    return { setTest: function(Qt) {
      U || (Qt ? vt(s.STENCIL_TEST) : Ht(s.STENCIL_TEST));
    }, setMask: function(Qt) {
      dt !== Qt && !U && (s.stencilMask(Qt), dt = Qt);
    }, setFunc: function(Qt, Ee, $e) {
      (F !== Qt || ot !== Ee || ft !== $e) && (s.stencilFunc(Qt, Ee, $e), F = Qt, ot = Ee, ft = $e);
    }, setOp: function(Qt, Ee, $e) {
      (qt !== Qt || Kt !== Ee || me !== $e) && (s.stencilOp(Qt, Ee, $e), qt = Qt, Kt = Ee, me = $e);
    }, setLocked: function(Qt) {
      U = Qt;
    }, setClear: function(Qt) {
      Fe !== Qt && (s.clearStencil(Qt), Fe = Qt);
    }, reset: function() {
      U = false, dt = null, F = null, ot = null, ft = null, qt = null, Kt = null, me = null, Fe = null;
    } };
  }
  r(o, "StencilBuffer");
  let a = new i(), c = new r2(), l = new o(), h = /* @__PURE__ */ new WeakMap(), d = /* @__PURE__ */ new WeakMap(), f = {}, g = {}, _ = /* @__PURE__ */ new WeakMap(), v = [], m = null, p = false, w = null, x = null, b = null, L = null, C = null, R = null, D = null, X = new Vt(0, 0, 0), M = 0, A = false, Q = null, $ = null, I = null, G = null, k = null, J = s.getParameter(s.MAX_COMBINED_TEXTURE_IMAGE_UNITS), q2 = false, Y = 0, it = s.getParameter(s.VERSION);
  it.indexOf("WebGL") !== -1 ? (Y = parseFloat(/^WebGL (\d)/.exec(it)[1]), q2 = Y >= 1) : it.indexOf("OpenGL ES") !== -1 && (Y = parseFloat(/^OpenGL ES (\d)/.exec(it)[1]), q2 = Y >= 2);
  let nt = null, _t = {}, It = s.getParameter(s.SCISSOR_BOX), V = s.getParameter(s.VIEWPORT), tt = new $t().fromArray(It), mt = new $t().fromArray(V);
  function wt(U, dt, F, ot) {
    let ft = new Uint8Array(4), qt = s.createTexture();
    s.bindTexture(U, qt), s.texParameteri(U, s.TEXTURE_MIN_FILTER, s.NEAREST), s.texParameteri(U, s.TEXTURE_MAG_FILTER, s.NEAREST);
    for (let Kt = 0; Kt < F; Kt++) n && (U === s.TEXTURE_3D || U === s.TEXTURE_2D_ARRAY) ? s.texImage3D(dt, 0, s.RGBA, 1, 1, ot, 0, s.RGBA, s.UNSIGNED_BYTE, ft) : s.texImage2D(dt + Kt, 0, s.RGBA, 1, 1, 0, s.RGBA, s.UNSIGNED_BYTE, ft);
    return qt;
  }
  r(wt, "createTexture");
  let Mt = {};
  Mt[s.TEXTURE_2D] = wt(s.TEXTURE_2D, s.TEXTURE_2D, 1), Mt[s.TEXTURE_CUBE_MAP] = wt(s.TEXTURE_CUBE_MAP, s.TEXTURE_CUBE_MAP_POSITIVE_X, 6), n && (Mt[s.TEXTURE_2D_ARRAY] = wt(s.TEXTURE_2D_ARRAY, s.TEXTURE_2D_ARRAY, 1, 1), Mt[s.TEXTURE_3D] = wt(s.TEXTURE_3D, s.TEXTURE_3D, 1, 1)), a.setClear(0, 0, 0, 1), c.setClear(1), l.setClear(0), vt(s.DEPTH_TEST), c.setFunc(Js), pt(false), yt(sh), vt(s.CULL_FACE), K(An);
  function vt(U) {
    f[U] !== true && (s.enable(U), f[U] = true);
  }
  r(vt, "enable");
  function Ht(U) {
    f[U] !== false && (s.disable(U), f[U] = false);
  }
  r(Ht, "disable");
  function At(U, dt) {
    return g[U] !== dt ? (s.bindFramebuffer(U, dt), g[U] = dt, n && (U === s.DRAW_FRAMEBUFFER && (g[s.FRAMEBUFFER] = dt), U === s.FRAMEBUFFER && (g[s.DRAW_FRAMEBUFFER] = dt)), true) : false;
  }
  r(At, "bindFramebuffer");
  function T(U, dt) {
    let F = v, ot = false;
    if (U) {
      F = _.get(dt), F === void 0 && (F = [], _.set(dt, F));
      let ft = U.textures;
      if (F.length !== ft.length || F[0] !== s.COLOR_ATTACHMENT0) {
        for (let qt = 0, Kt = ft.length; qt < Kt; qt++) F[qt] = s.COLOR_ATTACHMENT0 + qt;
        F.length = ft.length, ot = true;
      }
    } else F[0] !== s.BACK && (F[0] = s.BACK, ot = true);
    if (ot) if (e.isWebGL2) s.drawBuffers(F);
    else if (t.has("WEBGL_draw_buffers") === true) t.get("WEBGL_draw_buffers").drawBuffersWEBGL(F);
    else throw new Error("THREE.WebGLState: Usage of gl.drawBuffers() require WebGL2 or WEBGL_draw_buffers extension");
  }
  r(T, "drawBuffers");
  function at(U) {
    return m !== U ? (s.useProgram(U), m = U, true) : false;
  }
  r(at, "useProgram");
  let Z = { [Xn]: s.FUNC_ADD, [ff]: s.FUNC_SUBTRACT, [pf]: s.FUNC_REVERSE_SUBTRACT };
  if (n) Z[ch] = s.MIN, Z[lh] = s.MAX;
  else {
    let U = t.get("EXT_blend_minmax");
    U !== null && (Z[ch] = U.MIN_EXT, Z[lh] = U.MAX_EXT);
  }
  let st = { [mf]: s.ZERO, [gf]: s.ONE, [_f]: s.SRC_COLOR, [Oa]: s.SRC_ALPHA, [bf]: s.SRC_ALPHA_SATURATE, [Mf]: s.DST_COLOR, [vf]: s.DST_ALPHA, [xf]: s.ONE_MINUS_SRC_COLOR, [Fa]: s.ONE_MINUS_SRC_ALPHA, [Sf]: s.ONE_MINUS_DST_COLOR, [yf]: s.ONE_MINUS_DST_ALPHA, [Ef]: s.CONSTANT_COLOR, [wf]: s.ONE_MINUS_CONSTANT_COLOR, [Af]: s.CONSTANT_ALPHA, [Tf]: s.ONE_MINUS_CONSTANT_ALPHA };
  function K(U, dt, F, ot, ft, qt, Kt, me, Fe, Qt) {
    if (U === An) {
      p === true && (Ht(s.BLEND), p = false);
      return;
    }
    if (p === false && (vt(s.BLEND), p = true), U !== df) {
      if (U !== w || Qt !== A) {
        if ((x !== Xn || C !== Xn) && (s.blendEquation(s.FUNC_ADD), x = Xn, C = Xn), Qt) switch (U) {
          case wi:
            s.blendFuncSeparate(s.ONE, s.ONE_MINUS_SRC_ALPHA, s.ONE, s.ONE_MINUS_SRC_ALPHA);
            break;
          case rh:
            s.blendFunc(s.ONE, s.ONE);
            break;
          case ah:
            s.blendFuncSeparate(s.ZERO, s.ONE_MINUS_SRC_COLOR, s.ZERO, s.ONE);
            break;
          case oh:
            s.blendFuncSeparate(s.ZERO, s.SRC_COLOR, s.ZERO, s.SRC_ALPHA);
            break;
          default:
            console.error("THREE.WebGLState: Invalid blending: ", U);
            break;
        }
        else switch (U) {
          case wi:
            s.blendFuncSeparate(s.SRC_ALPHA, s.ONE_MINUS_SRC_ALPHA, s.ONE, s.ONE_MINUS_SRC_ALPHA);
            break;
          case rh:
            s.blendFunc(s.SRC_ALPHA, s.ONE);
            break;
          case ah:
            s.blendFuncSeparate(s.ZERO, s.ONE_MINUS_SRC_COLOR, s.ZERO, s.ONE);
            break;
          case oh:
            s.blendFunc(s.ZERO, s.SRC_COLOR);
            break;
          default:
            console.error("THREE.WebGLState: Invalid blending: ", U);
            break;
        }
        b = null, L = null, R = null, D = null, X.set(0, 0, 0), M = 0, w = U, A = Qt;
      }
      return;
    }
    ft = ft || dt, qt = qt || F, Kt = Kt || ot, (dt !== x || ft !== C) && (s.blendEquationSeparate(Z[dt], Z[ft]), x = dt, C = ft), (F !== b || ot !== L || qt !== R || Kt !== D) && (s.blendFuncSeparate(st[F], st[ot], st[qt], st[Kt]), b = F, L = ot, R = qt, D = Kt), (me.equals(X) === false || Fe !== M) && (s.blendColor(me.r, me.g, me.b, Fe), X.copy(me), M = Fe), w = U, A = false;
  }
  r(K, "setBlending");
  function xt(U, dt) {
    U.side === un ? Ht(s.CULL_FACE) : vt(s.CULL_FACE);
    let F = U.side === Pe;
    dt && (F = !F), pt(F), U.blending === wi && U.transparent === false ? K(An) : K(U.blending, U.blendEquation, U.blendSrc, U.blendDst, U.blendEquationAlpha, U.blendSrcAlpha, U.blendDstAlpha, U.blendColor, U.blendAlpha, U.premultipliedAlpha), c.setFunc(U.depthFunc), c.setTest(U.depthTest), c.setMask(U.depthWrite), a.setMask(U.colorWrite);
    let ot = U.stencilWrite;
    l.setTest(ot), ot && (l.setMask(U.stencilWriteMask), l.setFunc(U.stencilFunc, U.stencilRef, U.stencilFuncMask), l.setOp(U.stencilFail, U.stencilZFail, U.stencilZPass)), E(U.polygonOffset, U.polygonOffsetFactor, U.polygonOffsetUnits), U.alphaToCoverage === true ? vt(s.SAMPLE_ALPHA_TO_COVERAGE) : Ht(s.SAMPLE_ALPHA_TO_COVERAGE);
  }
  r(xt, "setMaterial");
  function pt(U) {
    Q !== U && (U ? s.frontFace(s.CW) : s.frontFace(s.CCW), Q = U);
  }
  r(pt, "setFlipSided");
  function yt(U) {
    U !== lf ? (vt(s.CULL_FACE), U !== $ && (U === sh ? s.cullFace(s.BACK) : U === hf ? s.cullFace(s.FRONT) : s.cullFace(s.FRONT_AND_BACK))) : Ht(s.CULL_FACE), $ = U;
  }
  r(yt, "setCullFace");
  function Wt(U) {
    U !== I && (q2 && s.lineWidth(U), I = U);
  }
  r(Wt, "setLineWidth");
  function E(U, dt, F) {
    U ? (vt(s.POLYGON_OFFSET_FILL), (G !== dt || k !== F) && (s.polygonOffset(dt, F), G = dt, k = F)) : Ht(s.POLYGON_OFFSET_FILL);
  }
  r(E, "setPolygonOffset");
  function y(U) {
    U ? vt(s.SCISSOR_TEST) : Ht(s.SCISSOR_TEST);
  }
  r(y, "setScissorTest");
  function H(U) {
    U === void 0 && (U = s.TEXTURE0 + J - 1), nt !== U && (s.activeTexture(U), nt = U);
  }
  r(H, "activeTexture");
  function W(U, dt, F) {
    F === void 0 && (nt === null ? F = s.TEXTURE0 + J - 1 : F = nt);
    let ot = _t[F];
    ot === void 0 && (ot = { type: void 0, texture: void 0 }, _t[F] = ot), (ot.type !== U || ot.texture !== dt) && (nt !== F && (s.activeTexture(F), nt = F), s.bindTexture(U, dt || Mt[U]), ot.type = U, ot.texture = dt);
  }
  r(W, "bindTexture");
  function et() {
    let U = _t[nt];
    U !== void 0 && U.type !== void 0 && (s.bindTexture(U.type, null), U.type = void 0, U.texture = void 0);
  }
  r(et, "unbindTexture");
  function j() {
    try {
      s.compressedTexImage2D.apply(s, arguments);
    } catch (U) {
      console.error("THREE.WebGLState:", U);
    }
  }
  r(j, "compressedTexImage2D");
  function Lt() {
    try {
      s.compressedTexImage3D.apply(s, arguments);
    } catch (U) {
      console.error("THREE.WebGLState:", U);
    }
  }
  r(Lt, "compressedTexImage3D");
  function Rt() {
    try {
      s.texSubImage2D.apply(s, arguments);
    } catch (U) {
      console.error("THREE.WebGLState:", U);
    }
  }
  r(Rt, "texSubImage2D");
  function ct() {
    try {
      s.texSubImage3D.apply(s, arguments);
    } catch (U) {
      console.error("THREE.WebGLState:", U);
    }
  }
  r(ct, "texSubImage3D");
  function ut() {
    try {
      s.compressedTexSubImage2D.apply(s, arguments);
    } catch (U) {
      console.error("THREE.WebGLState:", U);
    }
  }
  r(ut, "compressedTexSubImage2D");
  function Ut() {
    try {
      s.compressedTexSubImage3D.apply(s, arguments);
    } catch (U) {
      console.error("THREE.WebGLState:", U);
    }
  }
  r(Ut, "compressedTexSubImage3D");
  function rt() {
    try {
      s.texStorage2D.apply(s, arguments);
    } catch (U) {
      console.error("THREE.WebGLState:", U);
    }
  }
  r(rt, "texStorage2D");
  function ae() {
    try {
      s.texStorage3D.apply(s, arguments);
    } catch (U) {
      console.error("THREE.WebGLState:", U);
    }
  }
  r(ae, "texStorage3D");
  function Xt() {
    try {
      s.texImage2D.apply(s, arguments);
    } catch (U) {
      console.error("THREE.WebGLState:", U);
    }
  }
  r(Xt, "texImage2D");
  function Tt() {
    try {
      s.texImage3D.apply(s, arguments);
    } catch (U) {
      console.error("THREE.WebGLState:", U);
    }
  }
  r(Tt, "texImage3D");
  function St(U) {
    tt.equals(U) === false && (s.scissor(U.x, U.y, U.z, U.w), tt.copy(U));
  }
  r(St, "scissor");
  function bt(U) {
    mt.equals(U) === false && (s.viewport(U.x, U.y, U.z, U.w), mt.copy(U));
  }
  r(bt, "viewport");
  function Yt(U, dt) {
    let F = d.get(dt);
    F === void 0 && (F = /* @__PURE__ */ new WeakMap(), d.set(dt, F));
    let ot = F.get(U);
    ot === void 0 && (ot = s.getUniformBlockIndex(dt, U.name), F.set(U, ot));
  }
  r(Yt, "updateUBOMapping");
  function Nt(U, dt) {
    let ot = d.get(dt).get(U);
    h.get(dt) !== ot && (s.uniformBlockBinding(dt, ot, U.__bindingPointIndex), h.set(dt, ot));
  }
  r(Nt, "uniformBlockBinding");
  function te() {
    s.disable(s.BLEND), s.disable(s.CULL_FACE), s.disable(s.DEPTH_TEST), s.disable(s.POLYGON_OFFSET_FILL), s.disable(s.SCISSOR_TEST), s.disable(s.STENCIL_TEST), s.disable(s.SAMPLE_ALPHA_TO_COVERAGE), s.blendEquation(s.FUNC_ADD), s.blendFunc(s.ONE, s.ZERO), s.blendFuncSeparate(s.ONE, s.ZERO, s.ONE, s.ZERO), s.blendColor(0, 0, 0, 0), s.colorMask(true, true, true, true), s.clearColor(0, 0, 0, 0), s.depthMask(true), s.depthFunc(s.LESS), s.clearDepth(1), s.stencilMask(4294967295), s.stencilFunc(s.ALWAYS, 0, 4294967295), s.stencilOp(s.KEEP, s.KEEP, s.KEEP), s.clearStencil(0), s.cullFace(s.BACK), s.frontFace(s.CCW), s.polygonOffset(0, 0), s.activeTexture(s.TEXTURE0), s.bindFramebuffer(s.FRAMEBUFFER, null), n === true && (s.bindFramebuffer(s.DRAW_FRAMEBUFFER, null), s.bindFramebuffer(s.READ_FRAMEBUFFER, null)), s.useProgram(null), s.lineWidth(1), s.scissor(0, 0, s.canvas.width, s.canvas.height), s.viewport(0, 0, s.canvas.width, s.canvas.height), f = {}, nt = null, _t = {}, g = {}, _ = /* @__PURE__ */ new WeakMap(), v = [], m = null, p = false, w = null, x = null, b = null, L = null, C = null, R = null, D = null, X = new Vt(0, 0, 0), M = 0, A = false, Q = null, $ = null, I = null, G = null, k = null, tt.set(0, 0, s.canvas.width, s.canvas.height), mt.set(0, 0, s.canvas.width, s.canvas.height), a.reset(), c.reset(), l.reset();
  }
  return r(te, "reset"), { buffers: { color: a, depth: c, stencil: l }, enable: vt, disable: Ht, bindFramebuffer: At, drawBuffers: T, useProgram: at, setBlending: K, setMaterial: xt, setFlipSided: pt, setCullFace: yt, setLineWidth: Wt, setPolygonOffset: E, setScissorTest: y, activeTexture: H, bindTexture: W, unbindTexture: et, compressedTexImage2D: j, compressedTexImage3D: Lt, texImage2D: Xt, texImage3D: Tt, updateUBOMapping: Yt, uniformBlockBinding: Nt, texStorage2D: rt, texStorage3D: ae, texSubImage2D: Rt, texSubImage3D: ct, compressedTexSubImage2D: ut, compressedTexSubImage3D: Ut, scissor: St, viewport: bt, reset: te };
}
r(ux, "WebGLState");
function dx(s, t, e, n, i, r2, o) {
  let a = i.isWebGL2, c = t.has("WEBGL_multisampled_render_to_texture") ? t.get("WEBGL_multisampled_render_to_texture") : null, l = typeof navigator > "u" ? false : /OculusBrowser/g.test(navigator.userAgent), h = new lt(), d = /* @__PURE__ */ new WeakMap(), f, g = /* @__PURE__ */ new WeakMap(), _ = false;
  try {
    _ = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function v(E, y) {
    return _ ? new OffscreenCanvas(E, y) : is("canvas");
  }
  r(v, "createCanvas");
  function m(E, y, H, W) {
    let et = 1, j = Wt(E);
    if ((j.width > W || j.height > W) && (et = W / Math.max(j.width, j.height)), et < 1 || y === true) if (typeof HTMLImageElement < "u" && E instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && E instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && E instanceof ImageBitmap || typeof VideoFrame < "u" && E instanceof VideoFrame) {
      let Lt = y ? nr : Math.floor, Rt = Lt(et * j.width), ct = Lt(et * j.height);
      f === void 0 && (f = v(Rt, ct));
      let ut = H ? v(Rt, ct) : f;
      return ut.width = Rt, ut.height = ct, ut.getContext("2d").drawImage(E, 0, 0, Rt, ct), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + j.width + "x" + j.height + ") to (" + Rt + "x" + ct + ")."), ut;
    } else return "data" in E && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + j.width + "x" + j.height + ")."), E;
    return E;
  }
  r(m, "resizeImage");
  function p(E) {
    let y = Wt(E);
    return Wa(y.width) && Wa(y.height);
  }
  r(p, "isPowerOfTwo$1");
  function w(E) {
    return a ? false : E.wrapS !== Ye || E.wrapT !== Ye || E.minFilter !== ge && E.minFilter !== Ce;
  }
  r(w, "textureNeedsPowerOfTwo");
  function x(E, y) {
    return E.generateMipmaps && y && E.minFilter !== ge && E.minFilter !== Ce;
  }
  r(x, "textureNeedsGenerateMipmaps");
  function b(E) {
    s.generateMipmap(E);
  }
  r(b, "generateMipmap");
  function L(E, y, H, W, et = false) {
    if (a === false) return y;
    if (E !== null) {
      if (s[E] !== void 0) return s[E];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + E + "'");
    }
    let j = y;
    if (y === s.RED && (H === s.FLOAT && (j = s.R32F), H === s.HALF_FLOAT && (j = s.R16F), H === s.UNSIGNED_BYTE && (j = s.R8)), y === s.RED_INTEGER && (H === s.UNSIGNED_BYTE && (j = s.R8UI), H === s.UNSIGNED_SHORT && (j = s.R16UI), H === s.UNSIGNED_INT && (j = s.R32UI), H === s.BYTE && (j = s.R8I), H === s.SHORT && (j = s.R16I), H === s.INT && (j = s.R32I)), y === s.RG && (H === s.FLOAT && (j = s.RG32F), H === s.HALF_FLOAT && (j = s.RG16F), H === s.UNSIGNED_BYTE && (j = s.RG8)), y === s.RG_INTEGER && (H === s.UNSIGNED_BYTE && (j = s.RG8UI), H === s.UNSIGNED_SHORT && (j = s.RG16UI), H === s.UNSIGNED_INT && (j = s.RG32UI), H === s.BYTE && (j = s.RG8I), H === s.SHORT && (j = s.RG16I), H === s.INT && (j = s.RG32I)), y === s.RGBA) {
      let Lt = et ? Qs : Jt.getTransfer(W);
      H === s.FLOAT && (j = s.RGBA32F), H === s.HALF_FLOAT && (j = s.RGBA16F), H === s.UNSIGNED_BYTE && (j = Lt === jt ? s.SRGB8_ALPHA8 : s.RGBA8), H === s.UNSIGNED_SHORT_4_4_4_4 && (j = s.RGBA4), H === s.UNSIGNED_SHORT_5_5_5_1 && (j = s.RGB5_A1);
    }
    return (j === s.R16F || j === s.R32F || j === s.RG16F || j === s.RG32F || j === s.RGBA16F || j === s.RGBA32F) && t.get("EXT_color_buffer_float"), j;
  }
  r(L, "getInternalFormat");
  function C(E, y, H) {
    return x(E, H) === true || E.isFramebufferTexture && E.minFilter !== ge && E.minFilter !== Ce ? Math.log2(Math.max(y.width, y.height)) + 1 : E.mipmaps !== void 0 && E.mipmaps.length > 0 ? E.mipmaps.length : E.isCompressedTexture && Array.isArray(E.image) ? y.mipmaps.length : 1;
  }
  r(C, "getMipLevels");
  function R(E) {
    return E === ge || E === uh || E === Vi ? s.NEAREST : s.LINEAR;
  }
  r(R, "filterFallback");
  function D(E) {
    let y = E.target;
    y.removeEventListener("dispose", D), M(y), y.isVideoTexture && d.delete(y);
  }
  r(D, "onTextureDispose");
  function X(E) {
    let y = E.target;
    y.removeEventListener("dispose", X), Q(y);
  }
  r(X, "onRenderTargetDispose");
  function M(E) {
    let y = n.get(E);
    if (y.__webglInit === void 0) return;
    let H = E.source, W = g.get(H);
    if (W) {
      let et = W[y.__cacheKey];
      et.usedTimes--, et.usedTimes === 0 && A(E), Object.keys(W).length === 0 && g.delete(H);
    }
    n.remove(E);
  }
  r(M, "deallocateTexture");
  function A(E) {
    let y = n.get(E);
    s.deleteTexture(y.__webglTexture);
    let H = E.source, W = g.get(H);
    delete W[y.__cacheKey], o.memory.textures--;
  }
  r(A, "deleteTexture");
  function Q(E) {
    let y = n.get(E);
    if (E.depthTexture && E.depthTexture.dispose(), E.isWebGLCubeRenderTarget) for (let W = 0; W < 6; W++) {
      if (Array.isArray(y.__webglFramebuffer[W])) for (let et = 0; et < y.__webglFramebuffer[W].length; et++) s.deleteFramebuffer(y.__webglFramebuffer[W][et]);
      else s.deleteFramebuffer(y.__webglFramebuffer[W]);
      y.__webglDepthbuffer && s.deleteRenderbuffer(y.__webglDepthbuffer[W]);
    }
    else {
      if (Array.isArray(y.__webglFramebuffer)) for (let W = 0; W < y.__webglFramebuffer.length; W++) s.deleteFramebuffer(y.__webglFramebuffer[W]);
      else s.deleteFramebuffer(y.__webglFramebuffer);
      if (y.__webglDepthbuffer && s.deleteRenderbuffer(y.__webglDepthbuffer), y.__webglMultisampledFramebuffer && s.deleteFramebuffer(y.__webglMultisampledFramebuffer), y.__webglColorRenderbuffer) for (let W = 0; W < y.__webglColorRenderbuffer.length; W++) y.__webglColorRenderbuffer[W] && s.deleteRenderbuffer(y.__webglColorRenderbuffer[W]);
      y.__webglDepthRenderbuffer && s.deleteRenderbuffer(y.__webglDepthRenderbuffer);
    }
    let H = E.textures;
    for (let W = 0, et = H.length; W < et; W++) {
      let j = n.get(H[W]);
      j.__webglTexture && (s.deleteTexture(j.__webglTexture), o.memory.textures--), n.remove(H[W]);
    }
    n.remove(E);
  }
  r(Q, "deallocateRenderTarget");
  let $ = 0;
  function I() {
    $ = 0;
  }
  r(I, "resetTextureUnits");
  function G() {
    let E = $;
    return E >= i.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + E + " texture units while this GPU supports only " + i.maxTextures), $ += 1, E;
  }
  r(G, "allocateTextureUnit");
  function k(E) {
    let y = [];
    return y.push(E.wrapS), y.push(E.wrapT), y.push(E.wrapR || 0), y.push(E.magFilter), y.push(E.minFilter), y.push(E.anisotropy), y.push(E.internalFormat), y.push(E.format), y.push(E.type), y.push(E.generateMipmaps), y.push(E.premultiplyAlpha), y.push(E.flipY), y.push(E.unpackAlignment), y.push(E.colorSpace), y.join();
  }
  r(k, "getTextureCacheKey");
  function J(E, y) {
    let H = n.get(E);
    if (E.isVideoTexture && pt(E), E.isRenderTargetTexture === false && E.version > 0 && H.__version !== E.version) {
      let W = E.image;
      if (W === null) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (W.complete === false) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        mt(H, E, y);
        return;
      }
    }
    e.bindTexture(s.TEXTURE_2D, H.__webglTexture, s.TEXTURE0 + y);
  }
  r(J, "setTexture2D");
  function q2(E, y) {
    let H = n.get(E);
    if (E.version > 0 && H.__version !== E.version) {
      mt(H, E, y);
      return;
    }
    e.bindTexture(s.TEXTURE_2D_ARRAY, H.__webglTexture, s.TEXTURE0 + y);
  }
  r(q2, "setTexture2DArray");
  function Y(E, y) {
    let H = n.get(E);
    if (E.version > 0 && H.__version !== E.version) {
      mt(H, E, y);
      return;
    }
    e.bindTexture(s.TEXTURE_3D, H.__webglTexture, s.TEXTURE0 + y);
  }
  r(Y, "setTexture3D");
  function it(E, y) {
    let H = n.get(E);
    if (E.version > 0 && H.__version !== E.version) {
      wt(H, E, y);
      return;
    }
    e.bindTexture(s.TEXTURE_CUBE_MAP, H.__webglTexture, s.TEXTURE0 + y);
  }
  r(it, "setTextureCube");
  let nt = { [ka]: s.REPEAT, [Ye]: s.CLAMP_TO_EDGE, [Va]: s.MIRRORED_REPEAT }, _t = { [ge]: s.NEAREST, [uh]: s.NEAREST_MIPMAP_NEAREST, [Vi]: s.NEAREST_MIPMAP_LINEAR, [Ce]: s.LINEAR, [Zr]: s.LINEAR_MIPMAP_NEAREST, [Yn]: s.LINEAR_MIPMAP_LINEAR }, It = { [np]: s.NEVER, [cp]: s.ALWAYS, [ip]: s.LESS, [Hd]: s.LEQUAL, [sp]: s.EQUAL, [op]: s.GEQUAL, [rp]: s.GREATER, [ap]: s.NOTEQUAL };
  function V(E, y, H) {
    if (y.type === ke && t.has("OES_texture_float_linear") === false && (y.magFilter === Ce || y.magFilter === Zr || y.magFilter === Vi || y.magFilter === Yn || y.minFilter === Ce || y.minFilter === Zr || y.minFilter === Vi || y.minFilter === Yn) && console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."), H ? (s.texParameteri(E, s.TEXTURE_WRAP_S, nt[y.wrapS]), s.texParameteri(E, s.TEXTURE_WRAP_T, nt[y.wrapT]), (E === s.TEXTURE_3D || E === s.TEXTURE_2D_ARRAY) && s.texParameteri(E, s.TEXTURE_WRAP_R, nt[y.wrapR]), s.texParameteri(E, s.TEXTURE_MAG_FILTER, _t[y.magFilter]), s.texParameteri(E, s.TEXTURE_MIN_FILTER, _t[y.minFilter])) : (s.texParameteri(E, s.TEXTURE_WRAP_S, s.CLAMP_TO_EDGE), s.texParameteri(E, s.TEXTURE_WRAP_T, s.CLAMP_TO_EDGE), (E === s.TEXTURE_3D || E === s.TEXTURE_2D_ARRAY) && s.texParameteri(E, s.TEXTURE_WRAP_R, s.CLAMP_TO_EDGE), (y.wrapS !== Ye || y.wrapT !== Ye) && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), s.texParameteri(E, s.TEXTURE_MAG_FILTER, R(y.magFilter)), s.texParameteri(E, s.TEXTURE_MIN_FILTER, R(y.minFilter)), y.minFilter !== ge && y.minFilter !== Ce && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), y.compareFunction && (s.texParameteri(E, s.TEXTURE_COMPARE_MODE, s.COMPARE_REF_TO_TEXTURE), s.texParameteri(E, s.TEXTURE_COMPARE_FUNC, It[y.compareFunction])), t.has("EXT_texture_filter_anisotropic") === true) {
      if (y.magFilter === ge || y.minFilter !== Vi && y.minFilter !== Yn || y.type === ke && t.has("OES_texture_float_linear") === false || a === false && y.type === ns && t.has("OES_texture_half_float_linear") === false) return;
      if (y.anisotropy > 1 || n.get(y).__currentAnisotropy) {
        let W = t.get("EXT_texture_filter_anisotropic");
        s.texParameterf(E, W.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(y.anisotropy, i.getMaxAnisotropy())), n.get(y).__currentAnisotropy = y.anisotropy;
      }
    }
  }
  r(V, "setTextureParameters");
  function tt(E, y) {
    let H = false;
    E.__webglInit === void 0 && (E.__webglInit = true, y.addEventListener("dispose", D));
    let W = y.source, et = g.get(W);
    et === void 0 && (et = {}, g.set(W, et));
    let j = k(y);
    if (j !== E.__cacheKey) {
      et[j] === void 0 && (et[j] = { texture: s.createTexture(), usedTimes: 0 }, o.memory.textures++, H = true), et[j].usedTimes++;
      let Lt = et[E.__cacheKey];
      Lt !== void 0 && (et[E.__cacheKey].usedTimes--, Lt.usedTimes === 0 && A(y)), E.__cacheKey = j, E.__webglTexture = et[j].texture;
    }
    return H;
  }
  r(tt, "initTexture");
  function mt(E, y, H) {
    let W = s.TEXTURE_2D;
    (y.isDataArrayTexture || y.isCompressedArrayTexture) && (W = s.TEXTURE_2D_ARRAY), y.isData3DTexture && (W = s.TEXTURE_3D);
    let et = tt(E, y), j = y.source;
    e.bindTexture(W, E.__webglTexture, s.TEXTURE0 + H);
    let Lt = n.get(j);
    if (j.version !== Lt.__version || et === true) {
      e.activeTexture(s.TEXTURE0 + H);
      let Rt = Jt.getPrimaries(Jt.workingColorSpace), ct = y.colorSpace === bn ? null : Jt.getPrimaries(y.colorSpace), ut = y.colorSpace === bn || Rt === ct ? s.NONE : s.BROWSER_DEFAULT_WEBGL;
      s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL, y.flipY), s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL, y.premultiplyAlpha), s.pixelStorei(s.UNPACK_ALIGNMENT, y.unpackAlignment), s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL, ut);
      let Ut = w(y) && p(y.image) === false, rt = m(y.image, Ut, false, i.maxTextureSize);
      rt = yt(y, rt);
      let ae = p(rt) || a, Xt = r2.convert(y.format, y.colorSpace), Tt = r2.convert(y.type), St = L(y.internalFormat, Xt, Tt, y.colorSpace, y.isVideoTexture);
      V(W, y, ae);
      let bt, Yt = y.mipmaps, Nt = a && y.isVideoTexture !== true && St !== Vd, te = Lt.__version === void 0 || et === true, U = j.dataReady, dt = C(y, rt, ae);
      if (y.isDepthTexture) St = s.DEPTH_COMPONENT, a ? y.type === ke ? St = s.DEPTH_COMPONENT32F : y.type === En ? St = s.DEPTH_COMPONENT24 : y.type === Jn ? St = s.DEPTH24_STENCIL8 : St = s.DEPTH_COMPONENT16 : y.type === ke && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), y.format === $n && St === s.DEPTH_COMPONENT && y.type !== Fo && y.type !== En && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), y.type = En, Tt = r2.convert(y.type)), y.format === Ii && St === s.DEPTH_COMPONENT && (St = s.DEPTH_STENCIL, y.type !== Jn && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), y.type = Jn, Tt = r2.convert(y.type))), te && (Nt ? e.texStorage2D(s.TEXTURE_2D, 1, St, rt.width, rt.height) : e.texImage2D(s.TEXTURE_2D, 0, St, rt.width, rt.height, 0, Xt, Tt, null));
      else if (y.isDataTexture) if (Yt.length > 0 && ae) {
        Nt && te && e.texStorage2D(s.TEXTURE_2D, dt, St, Yt[0].width, Yt[0].height);
        for (let F = 0, ot = Yt.length; F < ot; F++) bt = Yt[F], Nt ? U && e.texSubImage2D(s.TEXTURE_2D, F, 0, 0, bt.width, bt.height, Xt, Tt, bt.data) : e.texImage2D(s.TEXTURE_2D, F, St, bt.width, bt.height, 0, Xt, Tt, bt.data);
        y.generateMipmaps = false;
      } else Nt ? (te && e.texStorage2D(s.TEXTURE_2D, dt, St, rt.width, rt.height), U && e.texSubImage2D(s.TEXTURE_2D, 0, 0, 0, rt.width, rt.height, Xt, Tt, rt.data)) : e.texImage2D(s.TEXTURE_2D, 0, St, rt.width, rt.height, 0, Xt, Tt, rt.data);
      else if (y.isCompressedTexture) if (y.isCompressedArrayTexture) {
        Nt && te && e.texStorage3D(s.TEXTURE_2D_ARRAY, dt, St, Yt[0].width, Yt[0].height, rt.depth);
        for (let F = 0, ot = Yt.length; F < ot; F++) bt = Yt[F], y.format !== Oe ? Xt !== null ? Nt ? U && e.compressedTexSubImage3D(s.TEXTURE_2D_ARRAY, F, 0, 0, 0, bt.width, bt.height, rt.depth, Xt, bt.data, 0, 0) : e.compressedTexImage3D(s.TEXTURE_2D_ARRAY, F, St, bt.width, bt.height, rt.depth, 0, bt.data, 0, 0) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : Nt ? U && e.texSubImage3D(s.TEXTURE_2D_ARRAY, F, 0, 0, 0, bt.width, bt.height, rt.depth, Xt, Tt, bt.data) : e.texImage3D(s.TEXTURE_2D_ARRAY, F, St, bt.width, bt.height, rt.depth, 0, Xt, Tt, bt.data);
      } else {
        Nt && te && e.texStorage2D(s.TEXTURE_2D, dt, St, Yt[0].width, Yt[0].height);
        for (let F = 0, ot = Yt.length; F < ot; F++) bt = Yt[F], y.format !== Oe ? Xt !== null ? Nt ? U && e.compressedTexSubImage2D(s.TEXTURE_2D, F, 0, 0, bt.width, bt.height, Xt, bt.data) : e.compressedTexImage2D(s.TEXTURE_2D, F, St, bt.width, bt.height, 0, bt.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : Nt ? U && e.texSubImage2D(s.TEXTURE_2D, F, 0, 0, bt.width, bt.height, Xt, Tt, bt.data) : e.texImage2D(s.TEXTURE_2D, F, St, bt.width, bt.height, 0, Xt, Tt, bt.data);
      }
      else if (y.isDataArrayTexture) Nt ? (te && e.texStorage3D(s.TEXTURE_2D_ARRAY, dt, St, rt.width, rt.height, rt.depth), U && e.texSubImage3D(s.TEXTURE_2D_ARRAY, 0, 0, 0, 0, rt.width, rt.height, rt.depth, Xt, Tt, rt.data)) : e.texImage3D(s.TEXTURE_2D_ARRAY, 0, St, rt.width, rt.height, rt.depth, 0, Xt, Tt, rt.data);
      else if (y.isData3DTexture) Nt ? (te && e.texStorage3D(s.TEXTURE_3D, dt, St, rt.width, rt.height, rt.depth), U && e.texSubImage3D(s.TEXTURE_3D, 0, 0, 0, 0, rt.width, rt.height, rt.depth, Xt, Tt, rt.data)) : e.texImage3D(s.TEXTURE_3D, 0, St, rt.width, rt.height, rt.depth, 0, Xt, Tt, rt.data);
      else if (y.isFramebufferTexture) {
        if (te) if (Nt) e.texStorage2D(s.TEXTURE_2D, dt, St, rt.width, rt.height);
        else {
          let F = rt.width, ot = rt.height;
          for (let ft = 0; ft < dt; ft++) e.texImage2D(s.TEXTURE_2D, ft, St, F, ot, 0, Xt, Tt, null), F >>= 1, ot >>= 1;
        }
      } else if (Yt.length > 0 && ae) {
        if (Nt && te) {
          let F = Wt(Yt[0]);
          e.texStorage2D(s.TEXTURE_2D, dt, St, F.width, F.height);
        }
        for (let F = 0, ot = Yt.length; F < ot; F++) bt = Yt[F], Nt ? U && e.texSubImage2D(s.TEXTURE_2D, F, 0, 0, Xt, Tt, bt) : e.texImage2D(s.TEXTURE_2D, F, St, Xt, Tt, bt);
        y.generateMipmaps = false;
      } else if (Nt) {
        if (te) {
          let F = Wt(rt);
          e.texStorage2D(s.TEXTURE_2D, dt, St, F.width, F.height);
        }
        U && e.texSubImage2D(s.TEXTURE_2D, 0, 0, 0, Xt, Tt, rt);
      } else e.texImage2D(s.TEXTURE_2D, 0, St, Xt, Tt, rt);
      x(y, ae) && b(W), Lt.__version = j.version, y.onUpdate && y.onUpdate(y);
    }
    E.__version = y.version;
  }
  r(mt, "uploadTexture");
  function wt(E, y, H) {
    if (y.image.length !== 6) return;
    let W = tt(E, y), et = y.source;
    e.bindTexture(s.TEXTURE_CUBE_MAP, E.__webglTexture, s.TEXTURE0 + H);
    let j = n.get(et);
    if (et.version !== j.__version || W === true) {
      e.activeTexture(s.TEXTURE0 + H);
      let Lt = Jt.getPrimaries(Jt.workingColorSpace), Rt = y.colorSpace === bn ? null : Jt.getPrimaries(y.colorSpace), ct = y.colorSpace === bn || Lt === Rt ? s.NONE : s.BROWSER_DEFAULT_WEBGL;
      s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL, y.flipY), s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL, y.premultiplyAlpha), s.pixelStorei(s.UNPACK_ALIGNMENT, y.unpackAlignment), s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL, ct);
      let ut = y.isCompressedTexture || y.image[0].isCompressedTexture, Ut = y.image[0] && y.image[0].isDataTexture, rt = [];
      for (let F = 0; F < 6; F++) !ut && !Ut ? rt[F] = m(y.image[F], false, true, i.maxCubemapSize) : rt[F] = Ut ? y.image[F].image : y.image[F], rt[F] = yt(y, rt[F]);
      let ae = rt[0], Xt = p(ae) || a, Tt = r2.convert(y.format, y.colorSpace), St = r2.convert(y.type), bt = L(y.internalFormat, Tt, St, y.colorSpace), Yt = a && y.isVideoTexture !== true, Nt = j.__version === void 0 || W === true, te = et.dataReady, U = C(y, ae, Xt);
      V(s.TEXTURE_CUBE_MAP, y, Xt);
      let dt;
      if (ut) {
        Yt && Nt && e.texStorage2D(s.TEXTURE_CUBE_MAP, U, bt, ae.width, ae.height);
        for (let F = 0; F < 6; F++) {
          dt = rt[F].mipmaps;
          for (let ot = 0; ot < dt.length; ot++) {
            let ft = dt[ot];
            y.format !== Oe ? Tt !== null ? Yt ? te && e.compressedTexSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, ot, 0, 0, ft.width, ft.height, Tt, ft.data) : e.compressedTexImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, ot, bt, ft.width, ft.height, 0, ft.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : Yt ? te && e.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, ot, 0, 0, ft.width, ft.height, Tt, St, ft.data) : e.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, ot, bt, ft.width, ft.height, 0, Tt, St, ft.data);
          }
        }
      } else {
        if (dt = y.mipmaps, Yt && Nt) {
          dt.length > 0 && U++;
          let F = Wt(rt[0]);
          e.texStorage2D(s.TEXTURE_CUBE_MAP, U, bt, F.width, F.height);
        }
        for (let F = 0; F < 6; F++) if (Ut) {
          Yt ? te && e.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, 0, 0, 0, rt[F].width, rt[F].height, Tt, St, rt[F].data) : e.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, 0, bt, rt[F].width, rt[F].height, 0, Tt, St, rt[F].data);
          for (let ot = 0; ot < dt.length; ot++) {
            let qt = dt[ot].image[F].image;
            Yt ? te && e.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, ot + 1, 0, 0, qt.width, qt.height, Tt, St, qt.data) : e.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, ot + 1, bt, qt.width, qt.height, 0, Tt, St, qt.data);
          }
        } else {
          Yt ? te && e.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, 0, 0, 0, Tt, St, rt[F]) : e.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, 0, bt, Tt, St, rt[F]);
          for (let ot = 0; ot < dt.length; ot++) {
            let ft = dt[ot];
            Yt ? te && e.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, ot + 1, 0, 0, Tt, St, ft.image[F]) : e.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + F, ot + 1, bt, Tt, St, ft.image[F]);
          }
        }
      }
      x(y, Xt) && b(s.TEXTURE_CUBE_MAP), j.__version = et.version, y.onUpdate && y.onUpdate(y);
    }
    E.__version = y.version;
  }
  r(wt, "uploadCubeTexture");
  function Mt(E, y, H, W, et, j) {
    let Lt = r2.convert(H.format, H.colorSpace), Rt = r2.convert(H.type), ct = L(H.internalFormat, Lt, Rt, H.colorSpace);
    if (!n.get(y).__hasExternalTextures) {
      let Ut = Math.max(1, y.width >> j), rt = Math.max(1, y.height >> j);
      et === s.TEXTURE_3D || et === s.TEXTURE_2D_ARRAY ? e.texImage3D(et, j, ct, Ut, rt, y.depth, 0, Lt, Rt, null) : e.texImage2D(et, j, ct, Ut, rt, 0, Lt, Rt, null);
    }
    e.bindFramebuffer(s.FRAMEBUFFER, E), xt(y) ? c.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, W, et, n.get(H).__webglTexture, 0, K(y)) : (et === s.TEXTURE_2D || et >= s.TEXTURE_CUBE_MAP_POSITIVE_X && et <= s.TEXTURE_CUBE_MAP_NEGATIVE_Z) && s.framebufferTexture2D(s.FRAMEBUFFER, W, et, n.get(H).__webglTexture, j), e.bindFramebuffer(s.FRAMEBUFFER, null);
  }
  r(Mt, "setupFrameBufferTexture");
  function vt(E, y, H) {
    if (s.bindRenderbuffer(s.RENDERBUFFER, E), y.depthBuffer && !y.stencilBuffer) {
      let W = a === true ? s.DEPTH_COMPONENT24 : s.DEPTH_COMPONENT16;
      if (H || xt(y)) {
        let et = y.depthTexture;
        et && et.isDepthTexture && (et.type === ke ? W = s.DEPTH_COMPONENT32F : et.type === En && (W = s.DEPTH_COMPONENT24));
        let j = K(y);
        xt(y) ? c.renderbufferStorageMultisampleEXT(s.RENDERBUFFER, j, W, y.width, y.height) : s.renderbufferStorageMultisample(s.RENDERBUFFER, j, W, y.width, y.height);
      } else s.renderbufferStorage(s.RENDERBUFFER, W, y.width, y.height);
      s.framebufferRenderbuffer(s.FRAMEBUFFER, s.DEPTH_ATTACHMENT, s.RENDERBUFFER, E);
    } else if (y.depthBuffer && y.stencilBuffer) {
      let W = K(y);
      H && xt(y) === false ? s.renderbufferStorageMultisample(s.RENDERBUFFER, W, s.DEPTH24_STENCIL8, y.width, y.height) : xt(y) ? c.renderbufferStorageMultisampleEXT(s.RENDERBUFFER, W, s.DEPTH24_STENCIL8, y.width, y.height) : s.renderbufferStorage(s.RENDERBUFFER, s.DEPTH_STENCIL, y.width, y.height), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.DEPTH_STENCIL_ATTACHMENT, s.RENDERBUFFER, E);
    } else {
      let W = y.textures;
      for (let et = 0; et < W.length; et++) {
        let j = W[et], Lt = r2.convert(j.format, j.colorSpace), Rt = r2.convert(j.type), ct = L(j.internalFormat, Lt, Rt, j.colorSpace), ut = K(y);
        H && xt(y) === false ? s.renderbufferStorageMultisample(s.RENDERBUFFER, ut, ct, y.width, y.height) : xt(y) ? c.renderbufferStorageMultisampleEXT(s.RENDERBUFFER, ut, ct, y.width, y.height) : s.renderbufferStorage(s.RENDERBUFFER, ct, y.width, y.height);
      }
    }
    s.bindRenderbuffer(s.RENDERBUFFER, null);
  }
  r(vt, "setupRenderBufferStorage");
  function Ht(E, y) {
    if (y && y.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
    if (e.bindFramebuffer(s.FRAMEBUFFER, E), !(y.depthTexture && y.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    (!n.get(y.depthTexture).__webglTexture || y.depthTexture.image.width !== y.width || y.depthTexture.image.height !== y.height) && (y.depthTexture.image.width = y.width, y.depthTexture.image.height = y.height, y.depthTexture.needsUpdate = true), J(y.depthTexture, 0);
    let W = n.get(y.depthTexture).__webglTexture, et = K(y);
    if (y.depthTexture.format === $n) xt(y) ? c.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, s.DEPTH_ATTACHMENT, s.TEXTURE_2D, W, 0, et) : s.framebufferTexture2D(s.FRAMEBUFFER, s.DEPTH_ATTACHMENT, s.TEXTURE_2D, W, 0);
    else if (y.depthTexture.format === Ii) xt(y) ? c.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, s.DEPTH_STENCIL_ATTACHMENT, s.TEXTURE_2D, W, 0, et) : s.framebufferTexture2D(s.FRAMEBUFFER, s.DEPTH_STENCIL_ATTACHMENT, s.TEXTURE_2D, W, 0);
    else throw new Error("Unknown depthTexture format");
  }
  r(Ht, "setupDepthTexture");
  function At(E) {
    let y = n.get(E), H = E.isWebGLCubeRenderTarget === true;
    if (E.depthTexture && !y.__autoAllocateDepthBuffer) {
      if (H) throw new Error("target.depthTexture not supported in Cube render targets");
      Ht(y.__webglFramebuffer, E);
    } else if (H) {
      y.__webglDepthbuffer = [];
      for (let W = 0; W < 6; W++) e.bindFramebuffer(s.FRAMEBUFFER, y.__webglFramebuffer[W]), y.__webglDepthbuffer[W] = s.createRenderbuffer(), vt(y.__webglDepthbuffer[W], E, false);
    } else e.bindFramebuffer(s.FRAMEBUFFER, y.__webglFramebuffer), y.__webglDepthbuffer = s.createRenderbuffer(), vt(y.__webglDepthbuffer, E, false);
    e.bindFramebuffer(s.FRAMEBUFFER, null);
  }
  r(At, "setupDepthRenderbuffer");
  function T(E, y, H) {
    let W = n.get(E);
    y !== void 0 && Mt(W.__webglFramebuffer, E, E.texture, s.COLOR_ATTACHMENT0, s.TEXTURE_2D, 0), H !== void 0 && At(E);
  }
  r(T, "rebindTextures");
  function at(E) {
    let y = E.texture, H = n.get(E), W = n.get(y);
    E.addEventListener("dispose", X);
    let et = E.textures, j = E.isWebGLCubeRenderTarget === true, Lt = et.length > 1, Rt = p(E) || a;
    if (Lt || (W.__webglTexture === void 0 && (W.__webglTexture = s.createTexture()), W.__version = y.version, o.memory.textures++), j) {
      H.__webglFramebuffer = [];
      for (let ct = 0; ct < 6; ct++) if (a && y.mipmaps && y.mipmaps.length > 0) {
        H.__webglFramebuffer[ct] = [];
        for (let ut = 0; ut < y.mipmaps.length; ut++) H.__webglFramebuffer[ct][ut] = s.createFramebuffer();
      } else H.__webglFramebuffer[ct] = s.createFramebuffer();
    } else {
      if (a && y.mipmaps && y.mipmaps.length > 0) {
        H.__webglFramebuffer = [];
        for (let ct = 0; ct < y.mipmaps.length; ct++) H.__webglFramebuffer[ct] = s.createFramebuffer();
      } else H.__webglFramebuffer = s.createFramebuffer();
      if (Lt) if (i.drawBuffers) for (let ct = 0, ut = et.length; ct < ut; ct++) {
        let Ut = n.get(et[ct]);
        Ut.__webglTexture === void 0 && (Ut.__webglTexture = s.createTexture(), o.memory.textures++);
      }
      else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
      if (a && E.samples > 0 && xt(E) === false) {
        H.__webglMultisampledFramebuffer = s.createFramebuffer(), H.__webglColorRenderbuffer = [], e.bindFramebuffer(s.FRAMEBUFFER, H.__webglMultisampledFramebuffer);
        for (let ct = 0; ct < et.length; ct++) {
          let ut = et[ct];
          H.__webglColorRenderbuffer[ct] = s.createRenderbuffer(), s.bindRenderbuffer(s.RENDERBUFFER, H.__webglColorRenderbuffer[ct]);
          let Ut = r2.convert(ut.format, ut.colorSpace), rt = r2.convert(ut.type), ae = L(ut.internalFormat, Ut, rt, ut.colorSpace, E.isXRRenderTarget === true), Xt = K(E);
          s.renderbufferStorageMultisample(s.RENDERBUFFER, Xt, ae, E.width, E.height), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + ct, s.RENDERBUFFER, H.__webglColorRenderbuffer[ct]);
        }
        s.bindRenderbuffer(s.RENDERBUFFER, null), E.depthBuffer && (H.__webglDepthRenderbuffer = s.createRenderbuffer(), vt(H.__webglDepthRenderbuffer, E, true)), e.bindFramebuffer(s.FRAMEBUFFER, null);
      }
    }
    if (j) {
      e.bindTexture(s.TEXTURE_CUBE_MAP, W.__webglTexture), V(s.TEXTURE_CUBE_MAP, y, Rt);
      for (let ct = 0; ct < 6; ct++) if (a && y.mipmaps && y.mipmaps.length > 0) for (let ut = 0; ut < y.mipmaps.length; ut++) Mt(H.__webglFramebuffer[ct][ut], E, y, s.COLOR_ATTACHMENT0, s.TEXTURE_CUBE_MAP_POSITIVE_X + ct, ut);
      else Mt(H.__webglFramebuffer[ct], E, y, s.COLOR_ATTACHMENT0, s.TEXTURE_CUBE_MAP_POSITIVE_X + ct, 0);
      x(y, Rt) && b(s.TEXTURE_CUBE_MAP), e.unbindTexture();
    } else if (Lt) {
      for (let ct = 0, ut = et.length; ct < ut; ct++) {
        let Ut = et[ct], rt = n.get(Ut);
        e.bindTexture(s.TEXTURE_2D, rt.__webglTexture), V(s.TEXTURE_2D, Ut, Rt), Mt(H.__webglFramebuffer, E, Ut, s.COLOR_ATTACHMENT0 + ct, s.TEXTURE_2D, 0), x(Ut, Rt) && b(s.TEXTURE_2D);
      }
      e.unbindTexture();
    } else {
      let ct = s.TEXTURE_2D;
      if ((E.isWebGL3DRenderTarget || E.isWebGLArrayRenderTarget) && (a ? ct = E.isWebGL3DRenderTarget ? s.TEXTURE_3D : s.TEXTURE_2D_ARRAY : console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")), e.bindTexture(ct, W.__webglTexture), V(ct, y, Rt), a && y.mipmaps && y.mipmaps.length > 0) for (let ut = 0; ut < y.mipmaps.length; ut++) Mt(H.__webglFramebuffer[ut], E, y, s.COLOR_ATTACHMENT0, ct, ut);
      else Mt(H.__webglFramebuffer, E, y, s.COLOR_ATTACHMENT0, ct, 0);
      x(y, Rt) && b(ct), e.unbindTexture();
    }
    E.depthBuffer && At(E);
  }
  r(at, "setupRenderTarget");
  function Z(E) {
    let y = p(E) || a, H = E.textures;
    for (let W = 0, et = H.length; W < et; W++) {
      let j = H[W];
      if (x(j, y)) {
        let Lt = E.isWebGLCubeRenderTarget ? s.TEXTURE_CUBE_MAP : s.TEXTURE_2D, Rt = n.get(j).__webglTexture;
        e.bindTexture(Lt, Rt), b(Lt), e.unbindTexture();
      }
    }
  }
  r(Z, "updateRenderTargetMipmap");
  function st(E) {
    if (a && E.samples > 0 && xt(E) === false) {
      let y = E.textures, H = E.width, W = E.height, et = s.COLOR_BUFFER_BIT, j = [], Lt = E.stencilBuffer ? s.DEPTH_STENCIL_ATTACHMENT : s.DEPTH_ATTACHMENT, Rt = n.get(E), ct = y.length > 1;
      if (ct) for (let ut = 0; ut < y.length; ut++) e.bindFramebuffer(s.FRAMEBUFFER, Rt.__webglMultisampledFramebuffer), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + ut, s.RENDERBUFFER, null), e.bindFramebuffer(s.FRAMEBUFFER, Rt.__webglFramebuffer), s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0 + ut, s.TEXTURE_2D, null, 0);
      e.bindFramebuffer(s.READ_FRAMEBUFFER, Rt.__webglMultisampledFramebuffer), e.bindFramebuffer(s.DRAW_FRAMEBUFFER, Rt.__webglFramebuffer);
      for (let ut = 0; ut < y.length; ut++) {
        j.push(s.COLOR_ATTACHMENT0 + ut), E.depthBuffer && j.push(Lt);
        let Ut = Rt.__ignoreDepthValues !== void 0 ? Rt.__ignoreDepthValues : false;
        if (Ut === false && (E.depthBuffer && (et |= s.DEPTH_BUFFER_BIT), E.stencilBuffer && (et |= s.STENCIL_BUFFER_BIT)), ct && s.framebufferRenderbuffer(s.READ_FRAMEBUFFER, s.COLOR_ATTACHMENT0, s.RENDERBUFFER, Rt.__webglColorRenderbuffer[ut]), Ut === true && (s.invalidateFramebuffer(s.READ_FRAMEBUFFER, [Lt]), s.invalidateFramebuffer(s.DRAW_FRAMEBUFFER, [Lt])), ct) {
          let rt = n.get(y[ut]).__webglTexture;
          s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0, s.TEXTURE_2D, rt, 0);
        }
        s.blitFramebuffer(0, 0, H, W, 0, 0, H, W, et, s.NEAREST), l && s.invalidateFramebuffer(s.READ_FRAMEBUFFER, j);
      }
      if (e.bindFramebuffer(s.READ_FRAMEBUFFER, null), e.bindFramebuffer(s.DRAW_FRAMEBUFFER, null), ct) for (let ut = 0; ut < y.length; ut++) {
        e.bindFramebuffer(s.FRAMEBUFFER, Rt.__webglMultisampledFramebuffer), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + ut, s.RENDERBUFFER, Rt.__webglColorRenderbuffer[ut]);
        let Ut = n.get(y[ut]).__webglTexture;
        e.bindFramebuffer(s.FRAMEBUFFER, Rt.__webglFramebuffer), s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0 + ut, s.TEXTURE_2D, Ut, 0);
      }
      e.bindFramebuffer(s.DRAW_FRAMEBUFFER, Rt.__webglMultisampledFramebuffer);
    }
  }
  r(st, "updateMultisampleRenderTarget");
  function K(E) {
    return Math.min(i.maxSamples, E.samples);
  }
  r(K, "getRenderTargetSamples");
  function xt(E) {
    let y = n.get(E);
    return a && E.samples > 0 && t.has("WEBGL_multisampled_render_to_texture") === true && y.__useRenderToTexture !== false;
  }
  r(xt, "useMultisampledRTT");
  function pt(E) {
    let y = o.render.frame;
    d.get(E) !== y && (d.set(E, y), E.update());
  }
  r(pt, "updateVideoTexture");
  function yt(E, y) {
    let H = E.colorSpace, W = E.format, et = E.type;
    return E.isCompressedTexture === true || E.isVideoTexture === true || E.format === Ga || H !== Dn && H !== bn && (Jt.getTransfer(H) === jt ? a === false ? t.has("EXT_sRGB") === true && W === Oe ? (E.format = Ga, E.minFilter = Ce, E.generateMipmaps = false) : y = ir.sRGBToLinear(y) : (W !== Oe || et !== Rn) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", H)), y;
  }
  r(yt, "verifyColorSpace");
  function Wt(E) {
    return typeof HTMLImageElement < "u" && E instanceof HTMLImageElement ? (h.width = E.naturalWidth || E.width, h.height = E.naturalHeight || E.height) : typeof VideoFrame < "u" && E instanceof VideoFrame ? (h.width = E.displayWidth, h.height = E.displayHeight) : (h.width = E.width, h.height = E.height), h;
  }
  r(Wt, "getDimensions"), this.allocateTextureUnit = G, this.resetTextureUnits = I, this.setTexture2D = J, this.setTexture2DArray = q2, this.setTexture3D = Y, this.setTextureCube = it, this.rebindTextures = T, this.setupRenderTarget = at, this.updateRenderTargetMipmap = Z, this.updateMultisampleRenderTarget = st, this.setupDepthRenderbuffer = At, this.setupFrameBufferTexture = Mt, this.useMultisampledRTT = xt;
}
r(dx, "WebGLTextures");
function fx(s, t, e) {
  let n = e.isWebGL2;
  function i(r2, o = bn) {
    let a, c = Jt.getTransfer(o);
    if (r2 === Rn) return s.UNSIGNED_BYTE;
    if (r2 === Nd) return s.UNSIGNED_SHORT_4_4_4_4;
    if (r2 === Od) return s.UNSIGNED_SHORT_5_5_5_1;
    if (r2 === Xf) return s.BYTE;
    if (r2 === qf) return s.SHORT;
    if (r2 === Fo) return s.UNSIGNED_SHORT;
    if (r2 === Dd) return s.INT;
    if (r2 === En) return s.UNSIGNED_INT;
    if (r2 === ke) return s.FLOAT;
    if (r2 === ns) return n ? s.HALF_FLOAT : (a = t.get("OES_texture_half_float"), a !== null ? a.HALF_FLOAT_OES : null);
    if (r2 === Yf) return s.ALPHA;
    if (r2 === Oe) return s.RGBA;
    if (r2 === Zf) return s.LUMINANCE;
    if (r2 === Jf) return s.LUMINANCE_ALPHA;
    if (r2 === $n) return s.DEPTH_COMPONENT;
    if (r2 === Ii) return s.DEPTH_STENCIL;
    if (r2 === Ga) return a = t.get("EXT_sRGB"), a !== null ? a.SRGB_ALPHA_EXT : null;
    if (r2 === Fd) return s.RED;
    if (r2 === Bd) return s.RED_INTEGER;
    if (r2 === $f) return s.RG;
    if (r2 === zd) return s.RG_INTEGER;
    if (r2 === kd) return s.RGBA_INTEGER;
    if (r2 === Jr || r2 === $r || r2 === Kr || r2 === Qr) if (c === jt) if (a = t.get("WEBGL_compressed_texture_s3tc_srgb"), a !== null) {
      if (r2 === Jr) return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;
      if (r2 === $r) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
      if (r2 === Kr) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
      if (r2 === Qr) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
    } else return null;
    else if (a = t.get("WEBGL_compressed_texture_s3tc"), a !== null) {
      if (r2 === Jr) return a.COMPRESSED_RGB_S3TC_DXT1_EXT;
      if (r2 === $r) return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;
      if (r2 === Kr) return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;
      if (r2 === Qr) return a.COMPRESSED_RGBA_S3TC_DXT5_EXT;
    } else return null;
    if (r2 === dh || r2 === fh || r2 === ph || r2 === mh) if (a = t.get("WEBGL_compressed_texture_pvrtc"), a !== null) {
      if (r2 === dh) return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
      if (r2 === fh) return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
      if (r2 === ph) return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
      if (r2 === mh) return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
    } else return null;
    if (r2 === Vd) return a = t.get("WEBGL_compressed_texture_etc1"), a !== null ? a.COMPRESSED_RGB_ETC1_WEBGL : null;
    if (r2 === gh || r2 === _h) if (a = t.get("WEBGL_compressed_texture_etc"), a !== null) {
      if (r2 === gh) return c === jt ? a.COMPRESSED_SRGB8_ETC2 : a.COMPRESSED_RGB8_ETC2;
      if (r2 === _h) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : a.COMPRESSED_RGBA8_ETC2_EAC;
    } else return null;
    if (r2 === xh || r2 === vh || r2 === yh || r2 === Mh || r2 === Sh || r2 === bh || r2 === Eh || r2 === wh || r2 === Ah || r2 === Th || r2 === Rh || r2 === Ch || r2 === Ph || r2 === Ih) if (a = t.get("WEBGL_compressed_texture_astc"), a !== null) {
      if (r2 === xh) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : a.COMPRESSED_RGBA_ASTC_4x4_KHR;
      if (r2 === vh) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : a.COMPRESSED_RGBA_ASTC_5x4_KHR;
      if (r2 === yh) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : a.COMPRESSED_RGBA_ASTC_5x5_KHR;
      if (r2 === Mh) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : a.COMPRESSED_RGBA_ASTC_6x5_KHR;
      if (r2 === Sh) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : a.COMPRESSED_RGBA_ASTC_6x6_KHR;
      if (r2 === bh) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : a.COMPRESSED_RGBA_ASTC_8x5_KHR;
      if (r2 === Eh) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : a.COMPRESSED_RGBA_ASTC_8x6_KHR;
      if (r2 === wh) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : a.COMPRESSED_RGBA_ASTC_8x8_KHR;
      if (r2 === Ah) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : a.COMPRESSED_RGBA_ASTC_10x5_KHR;
      if (r2 === Th) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : a.COMPRESSED_RGBA_ASTC_10x6_KHR;
      if (r2 === Rh) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : a.COMPRESSED_RGBA_ASTC_10x8_KHR;
      if (r2 === Ch) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : a.COMPRESSED_RGBA_ASTC_10x10_KHR;
      if (r2 === Ph) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : a.COMPRESSED_RGBA_ASTC_12x10_KHR;
      if (r2 === Ih) return c === jt ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : a.COMPRESSED_RGBA_ASTC_12x12_KHR;
    } else return null;
    if (r2 === jr || r2 === Lh || r2 === Uh) if (a = t.get("EXT_texture_compression_bptc"), a !== null) {
      if (r2 === jr) return c === jt ? a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : a.COMPRESSED_RGBA_BPTC_UNORM_EXT;
      if (r2 === Lh) return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
      if (r2 === Uh) return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
    } else return null;
    if (r2 === Kf || r2 === Dh || r2 === Nh || r2 === Oh) if (a = t.get("EXT_texture_compression_rgtc"), a !== null) {
      if (r2 === jr) return a.COMPRESSED_RED_RGTC1_EXT;
      if (r2 === Dh) return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;
      if (r2 === Nh) return a.COMPRESSED_RED_GREEN_RGTC2_EXT;
      if (r2 === Oh) return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
    } else return null;
    return r2 === Jn ? n ? s.UNSIGNED_INT_24_8 : (a = t.get("WEBGL_depth_texture"), a !== null ? a.UNSIGNED_INT_24_8_WEBGL : null) : s[r2] !== void 0 ? s[r2] : null;
  }
  return r(i, "convert"), { convert: i };
}
r(fx, "WebGLUtils");
var Pc = class Pc2 extends Te {
  constructor(t = []) {
    super(), this.isArrayCamera = true, this.cameras = t;
  }
};
r(Pc, "ArrayCamera");
var io = Pc;
var Ic = class Ic2 extends le {
  constructor() {
    super(), this.isGroup = true, this.type = "Group";
  }
};
r(Ic, "Group");
var Mi = Ic;
var px = { type: "move" };
var Lc = class Lc2 {
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  getHandSpace() {
    return this._hand === null && (this._hand = new Mi(), this._hand.matrixAutoUpdate = false, this._hand.visible = false, this._hand.joints = {}, this._hand.inputState = { pinching: false }), this._hand;
  }
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new Mi(), this._targetRay.matrixAutoUpdate = false, this._targetRay.visible = false, this._targetRay.hasLinearVelocity = false, this._targetRay.linearVelocity = new P(), this._targetRay.hasAngularVelocity = false, this._targetRay.angularVelocity = new P()), this._targetRay;
  }
  getGripSpace() {
    return this._grip === null && (this._grip = new Mi(), this._grip.matrixAutoUpdate = false, this._grip.visible = false, this._grip.hasLinearVelocity = false, this._grip.linearVelocity = new P(), this._grip.hasAngularVelocity = false, this._grip.angularVelocity = new P()), this._grip;
  }
  dispatchEvent(t) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(t), this._grip !== null && this._grip.dispatchEvent(t), this._hand !== null && this._hand.dispatchEvent(t), this;
  }
  connect(t) {
    if (t && t.hand) {
      let e = this._hand;
      if (e) for (let n of t.hand.values()) this._getHandJoint(e, n);
    }
    return this.dispatchEvent({ type: "connected", data: t }), this;
  }
  disconnect(t) {
    return this.dispatchEvent({ type: "disconnected", data: t }), this._targetRay !== null && (this._targetRay.visible = false), this._grip !== null && (this._grip.visible = false), this._hand !== null && (this._hand.visible = false), this;
  }
  update(t, e, n) {
    let i = null, r2 = null, o = null, a = this._targetRay, c = this._grip, l = this._hand;
    if (t && e.session.visibilityState !== "visible-blurred") {
      if (l && t.hand) {
        o = true;
        for (let v of t.hand.values()) {
          let m = e.getJointPose(v, n), p = this._getHandJoint(l, v);
          m !== null && (p.matrix.fromArray(m.transform.matrix), p.matrix.decompose(p.position, p.rotation, p.scale), p.matrixWorldNeedsUpdate = true, p.jointRadius = m.radius), p.visible = m !== null;
        }
        let h = l.joints["index-finger-tip"], d = l.joints["thumb-tip"], f = h.position.distanceTo(d.position), g = 0.02, _ = 5e-3;
        l.inputState.pinching && f > g + _ ? (l.inputState.pinching = false, this.dispatchEvent({ type: "pinchend", handedness: t.handedness, target: this })) : !l.inputState.pinching && f <= g - _ && (l.inputState.pinching = true, this.dispatchEvent({ type: "pinchstart", handedness: t.handedness, target: this }));
      } else c !== null && t.gripSpace && (r2 = e.getPose(t.gripSpace, n), r2 !== null && (c.matrix.fromArray(r2.transform.matrix), c.matrix.decompose(c.position, c.rotation, c.scale), c.matrixWorldNeedsUpdate = true, r2.linearVelocity ? (c.hasLinearVelocity = true, c.linearVelocity.copy(r2.linearVelocity)) : c.hasLinearVelocity = false, r2.angularVelocity ? (c.hasAngularVelocity = true, c.angularVelocity.copy(r2.angularVelocity)) : c.hasAngularVelocity = false));
      a !== null && (i = e.getPose(t.targetRaySpace, n), i === null && r2 !== null && (i = r2), i !== null && (a.matrix.fromArray(i.transform.matrix), a.matrix.decompose(a.position, a.rotation, a.scale), a.matrixWorldNeedsUpdate = true, i.linearVelocity ? (a.hasLinearVelocity = true, a.linearVelocity.copy(i.linearVelocity)) : a.hasLinearVelocity = false, i.angularVelocity ? (a.hasAngularVelocity = true, a.angularVelocity.copy(i.angularVelocity)) : a.hasAngularVelocity = false, this.dispatchEvent(px)));
    }
    return a !== null && (a.visible = i !== null), c !== null && (c.visible = r2 !== null), l !== null && (l.visible = o !== null), this;
  }
  _getHandJoint(t, e) {
    if (t.joints[e.jointName] === void 0) {
      let n = new Mi();
      n.matrixAutoUpdate = false, n.visible = false, t.joints[e.jointName] = n, t.add(n);
    }
    return t.joints[e.jointName];
  }
};
r(Lc, "WebXRController");
var Ki = Lc;
var mx = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`;
var gx = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepthEXT = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepthEXT = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
var Uc = class Uc2 {
  constructor() {
    this.texture = null, this.mesh = null, this.depthNear = 0, this.depthFar = 0;
  }
  init(t, e, n) {
    if (this.texture === null) {
      let i = new be(), r2 = t.properties.get(i);
      r2.__webglTexture = e.texture, (e.depthNear != n.depthNear || e.depthFar != n.depthFar) && (this.depthNear = e.depthNear, this.depthFar = e.depthFar), this.texture = i;
    }
  }
  render(t, e) {
    if (this.texture !== null) {
      if (this.mesh === null) {
        let n = e.cameras[0].viewport, i = new tn({ extensions: { fragDepth: true }, vertexShader: mx, fragmentShader: gx, uniforms: { depthColor: { value: this.texture }, depthWidth: { value: n.z }, depthHeight: { value: n.w } } });
        this.mesh = new Me(new ur(20, 20), i);
      }
      t.render(this.mesh, e);
    }
  }
  reset() {
    this.texture = null, this.mesh = null;
  }
};
r(Uc, "WebXRDepthSensing");
var so = Uc;
var Dc = class Dc2 extends Pn {
  constructor(t, e) {
    super();
    let n = this, i = null, r2 = 1, o = null, a = "local-floor", c = 1, l = null, h = null, d = null, f = null, g = null, _ = null, v = new so(), m = e.getContextAttributes(), p = null, w = null, x = [], b = [], L = new lt(), C = null, R = new Te();
    R.layers.enable(1), R.viewport = new $t();
    let D = new Te();
    D.layers.enable(2), D.viewport = new $t();
    let X = [R, D], M = new io();
    M.layers.enable(1), M.layers.enable(2);
    let A = null, Q = null;
    this.cameraAutoUpdate = true, this.enabled = false, this.isPresenting = false, this.getController = function(V) {
      let tt = x[V];
      return tt === void 0 && (tt = new Ki(), x[V] = tt), tt.getTargetRaySpace();
    }, this.getControllerGrip = function(V) {
      let tt = x[V];
      return tt === void 0 && (tt = new Ki(), x[V] = tt), tt.getGripSpace();
    }, this.getHand = function(V) {
      let tt = x[V];
      return tt === void 0 && (tt = new Ki(), x[V] = tt), tt.getHandSpace();
    };
    function $(V) {
      let tt = b.indexOf(V.inputSource);
      if (tt === -1) return;
      let mt = x[tt];
      mt !== void 0 && (mt.update(V.inputSource, V.frame, l || o), mt.dispatchEvent({ type: V.type, data: V.inputSource }));
    }
    r($, "onSessionEvent");
    function I() {
      i.removeEventListener("select", $), i.removeEventListener("selectstart", $), i.removeEventListener("selectend", $), i.removeEventListener("squeeze", $), i.removeEventListener("squeezestart", $), i.removeEventListener("squeezeend", $), i.removeEventListener("end", I), i.removeEventListener("inputsourceschange", G);
      for (let V = 0; V < x.length; V++) {
        let tt = b[V];
        tt !== null && (b[V] = null, x[V].disconnect(tt));
      }
      A = null, Q = null, v.reset(), t.setRenderTarget(p), g = null, f = null, d = null, i = null, w = null, It.stop(), n.isPresenting = false, t.setPixelRatio(C), t.setSize(L.width, L.height, false), n.dispatchEvent({ type: "sessionend" });
    }
    r(I, "onSessionEnd"), this.setFramebufferScaleFactor = function(V) {
      r2 = V, n.isPresenting === true && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function(V) {
      a = V, n.isPresenting === true && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return l || o;
    }, this.setReferenceSpace = function(V) {
      l = V;
    }, this.getBaseLayer = function() {
      return f !== null ? f : g;
    }, this.getBinding = function() {
      return d;
    }, this.getFrame = function() {
      return _;
    }, this.getSession = function() {
      return i;
    }, this.setSession = async function(V) {
      if (i = V, i !== null) {
        if (p = t.getRenderTarget(), i.addEventListener("select", $), i.addEventListener("selectstart", $), i.addEventListener("selectend", $), i.addEventListener("squeeze", $), i.addEventListener("squeezestart", $), i.addEventListener("squeezeend", $), i.addEventListener("end", I), i.addEventListener("inputsourceschange", G), m.xrCompatible !== true && await e.makeXRCompatible(), C = t.getPixelRatio(), t.getSize(L), i.renderState.layers === void 0 || t.capabilities.isWebGL2 === false) {
          let tt = { antialias: i.renderState.layers === void 0 ? m.antialias : true, alpha: true, depth: m.depth, stencil: m.stencil, framebufferScaleFactor: r2 };
          g = new XRWebGLLayer(i, e, tt), i.updateRenderState({ baseLayer: g }), t.setPixelRatio(1), t.setSize(g.framebufferWidth, g.framebufferHeight, false), w = new fn(g.framebufferWidth, g.framebufferHeight, { format: Oe, type: Rn, colorSpace: t.outputColorSpace, stencilBuffer: m.stencil });
        } else {
          let tt = null, mt = null, wt = null;
          m.depth && (wt = m.stencil ? e.DEPTH24_STENCIL8 : e.DEPTH_COMPONENT24, tt = m.stencil ? Ii : $n, mt = m.stencil ? Jn : En);
          let Mt = { colorFormat: e.RGBA8, depthFormat: wt, scaleFactor: r2 };
          d = new XRWebGLBinding(i, e), f = d.createProjectionLayer(Mt), i.updateRenderState({ layers: [f] }), t.setPixelRatio(1), t.setSize(f.textureWidth, f.textureHeight, false), w = new fn(f.textureWidth, f.textureHeight, { format: Oe, type: Rn, depthTexture: new pr(f.textureWidth, f.textureHeight, mt, void 0, void 0, void 0, void 0, void 0, void 0, tt), stencilBuffer: m.stencil, colorSpace: t.outputColorSpace, samples: m.antialias ? 4 : 0 });
          let vt = t.properties.get(w);
          vt.__ignoreDepthValues = f.ignoreDepthValues;
        }
        w.isXRRenderTarget = true, this.setFoveation(c), l = null, o = await i.requestReferenceSpace(a), It.setContext(i), It.start(), n.isPresenting = true, n.dispatchEvent({ type: "sessionstart" });
      }
    }, this.getEnvironmentBlendMode = function() {
      if (i !== null) return i.environmentBlendMode;
    };
    function G(V) {
      for (let tt = 0; tt < V.removed.length; tt++) {
        let mt = V.removed[tt], wt = b.indexOf(mt);
        wt >= 0 && (b[wt] = null, x[wt].disconnect(mt));
      }
      for (let tt = 0; tt < V.added.length; tt++) {
        let mt = V.added[tt], wt = b.indexOf(mt);
        if (wt === -1) {
          for (let vt = 0; vt < x.length; vt++) if (vt >= b.length) {
            b.push(mt), wt = vt;
            break;
          } else if (b[vt] === null) {
            b[vt] = mt, wt = vt;
            break;
          }
          if (wt === -1) break;
        }
        let Mt = x[wt];
        Mt && Mt.connect(mt);
      }
    }
    r(G, "onInputSourcesChange");
    let k = new P(), J = new P();
    function q2(V, tt, mt) {
      k.setFromMatrixPosition(tt.matrixWorld), J.setFromMatrixPosition(mt.matrixWorld);
      let wt = k.distanceTo(J), Mt = tt.projectionMatrix.elements, vt = mt.projectionMatrix.elements, Ht = Mt[14] / (Mt[10] - 1), At = Mt[14] / (Mt[10] + 1), T = (Mt[9] + 1) / Mt[5], at = (Mt[9] - 1) / Mt[5], Z = (Mt[8] - 1) / Mt[0], st = (vt[8] + 1) / vt[0], K = Ht * Z, xt = Ht * st, pt = wt / (-Z + st), yt = pt * -Z;
      tt.matrixWorld.decompose(V.position, V.quaternion, V.scale), V.translateX(yt), V.translateZ(pt), V.matrixWorld.compose(V.position, V.quaternion, V.scale), V.matrixWorldInverse.copy(V.matrixWorld).invert();
      let Wt = Ht + pt, E = At + pt, y = K - yt, H = xt + (wt - yt), W = T * At / E * Wt, et = at * At / E * Wt;
      V.projectionMatrix.makePerspective(y, H, W, et, Wt, E), V.projectionMatrixInverse.copy(V.projectionMatrix).invert();
    }
    r(q2, "setProjectionFromUnion");
    function Y(V, tt) {
      tt === null ? V.matrixWorld.copy(V.matrix) : V.matrixWorld.multiplyMatrices(tt.matrixWorld, V.matrix), V.matrixWorldInverse.copy(V.matrixWorld).invert();
    }
    r(Y, "updateCamera"), this.updateCamera = function(V) {
      if (i === null) return;
      v.texture !== null && (V.near = v.depthNear, V.far = v.depthFar), M.near = D.near = R.near = V.near, M.far = D.far = R.far = V.far, (A !== M.near || Q !== M.far) && (i.updateRenderState({ depthNear: M.near, depthFar: M.far }), A = M.near, Q = M.far, R.near = A, R.far = Q, D.near = A, D.far = Q, R.updateProjectionMatrix(), D.updateProjectionMatrix(), V.updateProjectionMatrix());
      let tt = V.parent, mt = M.cameras;
      Y(M, tt);
      for (let wt = 0; wt < mt.length; wt++) Y(mt[wt], tt);
      mt.length === 2 ? q2(M, R, D) : M.projectionMatrix.copy(R.projectionMatrix), it(V, M, tt);
    };
    function it(V, tt, mt) {
      mt === null ? V.matrix.copy(tt.matrixWorld) : (V.matrix.copy(mt.matrixWorld), V.matrix.invert(), V.matrix.multiply(tt.matrixWorld)), V.matrix.decompose(V.position, V.quaternion, V.scale), V.updateMatrixWorld(true), V.projectionMatrix.copy(tt.projectionMatrix), V.projectionMatrixInverse.copy(tt.projectionMatrixInverse), V.isPerspectiveCamera && (V.fov = Li * 2 * Math.atan(1 / V.projectionMatrix.elements[5]), V.zoom = 1);
    }
    r(it, "updateUserCamera"), this.getCamera = function() {
      return M;
    }, this.getFoveation = function() {
      if (!(f === null && g === null)) return c;
    }, this.setFoveation = function(V) {
      c = V, f !== null && (f.fixedFoveation = V), g !== null && g.fixedFoveation !== void 0 && (g.fixedFoveation = V);
    }, this.hasDepthSensing = function() {
      return v.texture !== null;
    };
    let nt = null;
    function _t(V, tt) {
      if (h = tt.getViewerPose(l || o), _ = tt, h !== null) {
        let mt = h.views;
        g !== null && (t.setRenderTargetFramebuffer(w, g.framebuffer), t.setRenderTarget(w));
        let wt = false;
        mt.length !== M.cameras.length && (M.cameras.length = 0, wt = true);
        for (let vt = 0; vt < mt.length; vt++) {
          let Ht = mt[vt], At = null;
          if (g !== null) At = g.getViewport(Ht);
          else {
            let at = d.getViewSubImage(f, Ht);
            At = at.viewport, vt === 0 && (t.setRenderTargetTextures(w, at.colorTexture, f.ignoreDepthValues ? void 0 : at.depthStencilTexture), t.setRenderTarget(w));
          }
          let T = X[vt];
          T === void 0 && (T = new Te(), T.layers.enable(vt), T.viewport = new $t(), X[vt] = T), T.matrix.fromArray(Ht.transform.matrix), T.matrix.decompose(T.position, T.quaternion, T.scale), T.projectionMatrix.fromArray(Ht.projectionMatrix), T.projectionMatrixInverse.copy(T.projectionMatrix).invert(), T.viewport.set(At.x, At.y, At.width, At.height), vt === 0 && (M.matrix.copy(T.matrix), M.matrix.decompose(M.position, M.quaternion, M.scale)), wt === true && M.cameras.push(T);
        }
        let Mt = i.enabledFeatures;
        if (Mt && Mt.includes("depth-sensing")) {
          let vt = d.getDepthInformation(mt[0]);
          vt && vt.isValid && vt.texture && v.init(t, vt, i.renderState);
        }
      }
      for (let mt = 0; mt < x.length; mt++) {
        let wt = b[mt], Mt = x[mt];
        wt !== null && Mt !== void 0 && Mt.update(wt, tt, l || o);
      }
      v.render(t, M), nt && nt(V, tt), tt.detectedPlanes && n.dispatchEvent({ type: "planesdetected", data: tt }), _ = null;
    }
    r(_t, "onAnimationFrame");
    let It = new Yd();
    It.setAnimationLoop(_t), this.setAnimationLoop = function(V) {
      nt = V;
    }, this.dispose = function() {
    };
  }
};
r(Dc, "WebXRManager");
var ro = Dc;
var Hn = new Je();
var _x = new Ft();
function xx(s, t) {
  function e(m, p) {
    m.matrixAutoUpdate === true && m.updateMatrix(), p.value.copy(m.matrix);
  }
  r(e, "refreshTransformUniform");
  function n(m, p) {
    p.color.getRGB(m.fogColor.value, qd(s)), p.isFog ? (m.fogNear.value = p.near, m.fogFar.value = p.far) : p.isFogExp2 && (m.fogDensity.value = p.density);
  }
  r(n, "refreshFogUniforms");
  function i(m, p, w, x, b) {
    p.isMeshBasicMaterial || p.isMeshLambertMaterial ? r2(m, p) : p.isMeshToonMaterial ? (r2(m, p), d(m, p)) : p.isMeshPhongMaterial ? (r2(m, p), h(m, p)) : p.isMeshStandardMaterial ? (r2(m, p), f(m, p), p.isMeshPhysicalMaterial && g(m, p, b)) : p.isMeshMatcapMaterial ? (r2(m, p), _(m, p)) : p.isMeshDepthMaterial ? r2(m, p) : p.isMeshDistanceMaterial ? (r2(m, p), v(m, p)) : p.isMeshNormalMaterial ? r2(m, p) : p.isLineBasicMaterial ? (o(m, p), p.isLineDashedMaterial && a(m, p)) : p.isPointsMaterial ? c(m, p, w, x) : p.isSpriteMaterial ? l(m, p) : p.isShadowMaterial ? (m.color.value.copy(p.color), m.opacity.value = p.opacity) : p.isShaderMaterial && (p.uniformsNeedUpdate = false);
  }
  r(i, "refreshMaterialUniforms");
  function r2(m, p) {
    m.opacity.value = p.opacity, p.color && m.diffuse.value.copy(p.color), p.emissive && m.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity), p.map && (m.map.value = p.map, e(p.map, m.mapTransform)), p.alphaMap && (m.alphaMap.value = p.alphaMap, e(p.alphaMap, m.alphaMapTransform)), p.bumpMap && (m.bumpMap.value = p.bumpMap, e(p.bumpMap, m.bumpMapTransform), m.bumpScale.value = p.bumpScale, p.side === Pe && (m.bumpScale.value *= -1)), p.normalMap && (m.normalMap.value = p.normalMap, e(p.normalMap, m.normalMapTransform), m.normalScale.value.copy(p.normalScale), p.side === Pe && m.normalScale.value.negate()), p.displacementMap && (m.displacementMap.value = p.displacementMap, e(p.displacementMap, m.displacementMapTransform), m.displacementScale.value = p.displacementScale, m.displacementBias.value = p.displacementBias), p.emissiveMap && (m.emissiveMap.value = p.emissiveMap, e(p.emissiveMap, m.emissiveMapTransform)), p.specularMap && (m.specularMap.value = p.specularMap, e(p.specularMap, m.specularMapTransform)), p.alphaTest > 0 && (m.alphaTest.value = p.alphaTest);
    let w = t.get(p), x = w.envMap, b = w.envMapRotation;
    if (x && (m.envMap.value = x, Hn.copy(b), Hn.x *= -1, Hn.y *= -1, Hn.z *= -1, x.isCubeTexture && x.isRenderTargetTexture === false && (Hn.y *= -1, Hn.z *= -1), m.envMapRotation.value.setFromMatrix4(_x.makeRotationFromEuler(Hn)), m.flipEnvMap.value = x.isCubeTexture && x.isRenderTargetTexture === false ? -1 : 1, m.reflectivity.value = p.reflectivity, m.ior.value = p.ior, m.refractionRatio.value = p.refractionRatio), p.lightMap) {
      m.lightMap.value = p.lightMap;
      let L = s._useLegacyLights === true ? Math.PI : 1;
      m.lightMapIntensity.value = p.lightMapIntensity * L, e(p.lightMap, m.lightMapTransform);
    }
    p.aoMap && (m.aoMap.value = p.aoMap, m.aoMapIntensity.value = p.aoMapIntensity, e(p.aoMap, m.aoMapTransform));
  }
  r(r2, "refreshUniformsCommon");
  function o(m, p) {
    m.diffuse.value.copy(p.color), m.opacity.value = p.opacity, p.map && (m.map.value = p.map, e(p.map, m.mapTransform));
  }
  r(o, "refreshUniformsLine");
  function a(m, p) {
    m.dashSize.value = p.dashSize, m.totalSize.value = p.dashSize + p.gapSize, m.scale.value = p.scale;
  }
  r(a, "refreshUniformsDash");
  function c(m, p, w, x) {
    m.diffuse.value.copy(p.color), m.opacity.value = p.opacity, m.size.value = p.size * w, m.scale.value = x * 0.5, p.map && (m.map.value = p.map, e(p.map, m.uvTransform)), p.alphaMap && (m.alphaMap.value = p.alphaMap, e(p.alphaMap, m.alphaMapTransform)), p.alphaTest > 0 && (m.alphaTest.value = p.alphaTest);
  }
  r(c, "refreshUniformsPoints");
  function l(m, p) {
    m.diffuse.value.copy(p.color), m.opacity.value = p.opacity, m.rotation.value = p.rotation, p.map && (m.map.value = p.map, e(p.map, m.mapTransform)), p.alphaMap && (m.alphaMap.value = p.alphaMap, e(p.alphaMap, m.alphaMapTransform)), p.alphaTest > 0 && (m.alphaTest.value = p.alphaTest);
  }
  r(l, "refreshUniformsSprites");
  function h(m, p) {
    m.specular.value.copy(p.specular), m.shininess.value = Math.max(p.shininess, 1e-4);
  }
  r(h, "refreshUniformsPhong");
  function d(m, p) {
    p.gradientMap && (m.gradientMap.value = p.gradientMap);
  }
  r(d, "refreshUniformsToon");
  function f(m, p) {
    m.metalness.value = p.metalness, p.metalnessMap && (m.metalnessMap.value = p.metalnessMap, e(p.metalnessMap, m.metalnessMapTransform)), m.roughness.value = p.roughness, p.roughnessMap && (m.roughnessMap.value = p.roughnessMap, e(p.roughnessMap, m.roughnessMapTransform)), t.get(p).envMap && (m.envMapIntensity.value = p.envMapIntensity);
  }
  r(f, "refreshUniformsStandard");
  function g(m, p, w) {
    m.ior.value = p.ior, p.sheen > 0 && (m.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen), m.sheenRoughness.value = p.sheenRoughness, p.sheenColorMap && (m.sheenColorMap.value = p.sheenColorMap, e(p.sheenColorMap, m.sheenColorMapTransform)), p.sheenRoughnessMap && (m.sheenRoughnessMap.value = p.sheenRoughnessMap, e(p.sheenRoughnessMap, m.sheenRoughnessMapTransform))), p.clearcoat > 0 && (m.clearcoat.value = p.clearcoat, m.clearcoatRoughness.value = p.clearcoatRoughness, p.clearcoatMap && (m.clearcoatMap.value = p.clearcoatMap, e(p.clearcoatMap, m.clearcoatMapTransform)), p.clearcoatRoughnessMap && (m.clearcoatRoughnessMap.value = p.clearcoatRoughnessMap, e(p.clearcoatRoughnessMap, m.clearcoatRoughnessMapTransform)), p.clearcoatNormalMap && (m.clearcoatNormalMap.value = p.clearcoatNormalMap, e(p.clearcoatNormalMap, m.clearcoatNormalMapTransform), m.clearcoatNormalScale.value.copy(p.clearcoatNormalScale), p.side === Pe && m.clearcoatNormalScale.value.negate())), p.iridescence > 0 && (m.iridescence.value = p.iridescence, m.iridescenceIOR.value = p.iridescenceIOR, m.iridescenceThicknessMinimum.value = p.iridescenceThicknessRange[0], m.iridescenceThicknessMaximum.value = p.iridescenceThicknessRange[1], p.iridescenceMap && (m.iridescenceMap.value = p.iridescenceMap, e(p.iridescenceMap, m.iridescenceMapTransform)), p.iridescenceThicknessMap && (m.iridescenceThicknessMap.value = p.iridescenceThicknessMap, e(p.iridescenceThicknessMap, m.iridescenceThicknessMapTransform))), p.transmission > 0 && (m.transmission.value = p.transmission, m.transmissionSamplerMap.value = w.texture, m.transmissionSamplerSize.value.set(w.width, w.height), p.transmissionMap && (m.transmissionMap.value = p.transmissionMap, e(p.transmissionMap, m.transmissionMapTransform)), m.thickness.value = p.thickness, p.thicknessMap && (m.thicknessMap.value = p.thicknessMap, e(p.thicknessMap, m.thicknessMapTransform)), m.attenuationDistance.value = p.attenuationDistance, m.attenuationColor.value.copy(p.attenuationColor)), p.anisotropy > 0 && (m.anisotropyVector.value.set(p.anisotropy * Math.cos(p.anisotropyRotation), p.anisotropy * Math.sin(p.anisotropyRotation)), p.anisotropyMap && (m.anisotropyMap.value = p.anisotropyMap, e(p.anisotropyMap, m.anisotropyMapTransform))), m.specularIntensity.value = p.specularIntensity, m.specularColor.value.copy(p.specularColor), p.specularColorMap && (m.specularColorMap.value = p.specularColorMap, e(p.specularColorMap, m.specularColorMapTransform)), p.specularIntensityMap && (m.specularIntensityMap.value = p.specularIntensityMap, e(p.specularIntensityMap, m.specularIntensityMapTransform));
  }
  r(g, "refreshUniformsPhysical");
  function _(m, p) {
    p.matcap && (m.matcap.value = p.matcap);
  }
  r(_, "refreshUniformsMatcap");
  function v(m, p) {
    let w = t.get(p).light;
    m.referencePosition.value.setFromMatrixPosition(w.matrixWorld), m.nearDistance.value = w.shadow.camera.near, m.farDistance.value = w.shadow.camera.far;
  }
  return r(v, "refreshUniformsDistance"), { refreshFogUniforms: n, refreshMaterialUniforms: i };
}
r(xx, "WebGLMaterials");
function vx(s, t, e, n) {
  let i = {}, r2 = {}, o = [], a = e.isWebGL2 ? s.getParameter(s.MAX_UNIFORM_BUFFER_BINDINGS) : 0;
  function c(w, x) {
    let b = x.program;
    n.uniformBlockBinding(w, b);
  }
  r(c, "bind");
  function l(w, x) {
    let b = i[w.id];
    b === void 0 && (_(w), b = h(w), i[w.id] = b, w.addEventListener("dispose", m));
    let L = x.program;
    n.updateUBOMapping(w, L);
    let C = t.render.frame;
    r2[w.id] !== C && (f(w), r2[w.id] = C);
  }
  r(l, "update");
  function h(w) {
    let x = d();
    w.__bindingPointIndex = x;
    let b = s.createBuffer(), L = w.__size, C = w.usage;
    return s.bindBuffer(s.UNIFORM_BUFFER, b), s.bufferData(s.UNIFORM_BUFFER, L, C), s.bindBuffer(s.UNIFORM_BUFFER, null), s.bindBufferBase(s.UNIFORM_BUFFER, x, b), b;
  }
  r(h, "createBuffer");
  function d() {
    for (let w = 0; w < a; w++) if (o.indexOf(w) === -1) return o.push(w), w;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  r(d, "allocateBindingPointIndex");
  function f(w) {
    let x = i[w.id], b = w.uniforms, L = w.__cache;
    s.bindBuffer(s.UNIFORM_BUFFER, x);
    for (let C = 0, R = b.length; C < R; C++) {
      let D = Array.isArray(b[C]) ? b[C] : [b[C]];
      for (let X = 0, M = D.length; X < M; X++) {
        let A = D[X];
        if (g(A, C, X, L) === true) {
          let Q = A.__offset, $ = Array.isArray(A.value) ? A.value : [A.value], I = 0;
          for (let G = 0; G < $.length; G++) {
            let k = $[G], J = v(k);
            typeof k == "number" || typeof k == "boolean" ? (A.__data[0] = k, s.bufferSubData(s.UNIFORM_BUFFER, Q + I, A.__data)) : k.isMatrix3 ? (A.__data[0] = k.elements[0], A.__data[1] = k.elements[1], A.__data[2] = k.elements[2], A.__data[3] = 0, A.__data[4] = k.elements[3], A.__data[5] = k.elements[4], A.__data[6] = k.elements[5], A.__data[7] = 0, A.__data[8] = k.elements[6], A.__data[9] = k.elements[7], A.__data[10] = k.elements[8], A.__data[11] = 0) : (k.toArray(A.__data, I), I += J.storage / Float32Array.BYTES_PER_ELEMENT);
          }
          s.bufferSubData(s.UNIFORM_BUFFER, Q, A.__data);
        }
      }
    }
    s.bindBuffer(s.UNIFORM_BUFFER, null);
  }
  r(f, "updateBufferData");
  function g(w, x, b, L) {
    let C = w.value, R = x + "_" + b;
    if (L[R] === void 0) return typeof C == "number" || typeof C == "boolean" ? L[R] = C : L[R] = C.clone(), true;
    {
      let D = L[R];
      if (typeof C == "number" || typeof C == "boolean") {
        if (D !== C) return L[R] = C, true;
      } else if (D.equals(C) === false) return D.copy(C), true;
    }
    return false;
  }
  r(g, "hasUniformChanged");
  function _(w) {
    let x = w.uniforms, b = 0, L = 16;
    for (let R = 0, D = x.length; R < D; R++) {
      let X = Array.isArray(x[R]) ? x[R] : [x[R]];
      for (let M = 0, A = X.length; M < A; M++) {
        let Q = X[M], $ = Array.isArray(Q.value) ? Q.value : [Q.value];
        for (let I = 0, G = $.length; I < G; I++) {
          let k = $[I], J = v(k), q2 = b % L;
          q2 !== 0 && L - q2 < J.boundary && (b += L - q2), Q.__data = new Float32Array(J.storage / Float32Array.BYTES_PER_ELEMENT), Q.__offset = b, b += J.storage;
        }
      }
    }
    let C = b % L;
    return C > 0 && (b += L - C), w.__size = b, w.__cache = {}, this;
  }
  r(_, "prepareUniformsGroup");
  function v(w) {
    let x = { boundary: 0, storage: 0 };
    return typeof w == "number" || typeof w == "boolean" ? (x.boundary = 4, x.storage = 4) : w.isVector2 ? (x.boundary = 8, x.storage = 8) : w.isVector3 || w.isColor ? (x.boundary = 16, x.storage = 12) : w.isVector4 ? (x.boundary = 16, x.storage = 16) : w.isMatrix3 ? (x.boundary = 48, x.storage = 48) : w.isMatrix4 ? (x.boundary = 64, x.storage = 64) : w.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", w), x;
  }
  r(v, "getUniformSize");
  function m(w) {
    let x = w.target;
    x.removeEventListener("dispose", m);
    let b = o.indexOf(x.__bindingPointIndex);
    o.splice(b, 1), s.deleteBuffer(i[x.id]), delete i[x.id], delete r2[x.id];
  }
  r(m, "onUniformsGroupsDispose");
  function p() {
    for (let w in i) s.deleteBuffer(i[w]);
    o = [], i = {}, r2 = {};
  }
  return r(p, "dispose"), { bind: c, update: l, dispose: p };
}
r(vx, "WebGLUniformsGroups");
var Nc = class Nc2 {
  constructor(t = {}) {
    let { canvas: e = bp(), context: n = null, depth: i = true, stencil: r2 = true, alpha: o = false, antialias: a = false, premultipliedAlpha: c = true, preserveDrawingBuffer: l = false, powerPreference: h = "default", failIfMajorPerformanceCaveat: d = false } = t;
    this.isWebGLRenderer = true;
    let f;
    n !== null ? f = n.getContextAttributes().alpha : f = o;
    let g = new Uint32Array(4), _ = new Int32Array(4), v = null, m = null, p = [], w = [];
    this.domElement = e, this.debug = { checkShaderErrors: true, onShaderError: null }, this.autoClear = true, this.autoClearColor = true, this.autoClearDepth = true, this.autoClearStencil = true, this.sortObjects = true, this.clippingPlanes = [], this.localClippingEnabled = false, this._outputColorSpace = Ke, this._useLegacyLights = false, this.toneMapping = Tn, this.toneMappingExposure = 1;
    let x = this, b = false, L = 0, C = 0, R = null, D = -1, X = null, M = new $t(), A = new $t(), Q = null, $ = new Vt(0), I = 0, G = e.width, k = e.height, J = 1, q2 = null, Y = null, it = new $t(0, 0, G, k), nt = new $t(0, 0, G, k), _t = false, It = new Di(), V = false, tt = false, mt = null, wt = new Ft(), Mt = new lt(), vt = new P(), Ht = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
    function At() {
      return R === null ? J : 1;
    }
    r(At, "getTargetPixelRatio");
    let T = n;
    function at(S, N) {
      for (let B = 0; B < S.length; B++) {
        let z = S[B], O = e.getContext(z, N);
        if (O !== null) return O;
      }
      return null;
    }
    r(at, "getContext");
    try {
      let S = { alpha: true, depth: i, stencil: r2, antialias: a, premultipliedAlpha: c, preserveDrawingBuffer: l, powerPreference: h, failIfMajorPerformanceCaveat: d };
      if ("setAttribute" in e && e.setAttribute("data-engine", `three.js r${No}`), e.addEventListener("webglcontextlost", te, false), e.addEventListener("webglcontextrestored", U, false), e.addEventListener("webglcontextcreationerror", dt, false), T === null) {
        let N = ["webgl2", "webgl", "experimental-webgl"];
        if (x.isWebGL1Renderer === true && N.shift(), T = at(N, S), T === null) throw at(N) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
      typeof WebGLRenderingContext < "u" && T instanceof WebGLRenderingContext && console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."), T.getShaderPrecisionFormat === void 0 && (T.getShaderPrecisionFormat = function() {
        return { rangeMin: 1, rangeMax: 1, precision: 1 };
      });
    } catch (S) {
      throw console.error("THREE.WebGLRenderer: " + S.message), S;
    }
    let Z, st, K, xt, pt, yt, Wt, E, y, H, W, et, j, Lt, Rt, ct, ut, Ut, rt, ae, Xt, Tt, St, bt;
    function Yt() {
      Z = new N_(T), st = new C_(T, Z, t), Z.init(st), Tt = new fx(T, Z, st), K = new ux(T, Z, st), xt = new B_(T), pt = new j0(), yt = new dx(T, Z, K, pt, st, Tt, xt), Wt = new I_(x), E = new D_(x), y = new Wp(T, st), St = new T_(T, Z, y, st), H = new O_(T, y, xt, St), W = new H_(T, H, y, xt), rt = new V_(T, st, yt), ct = new P_(pt), et = new Q0(x, Wt, E, Z, st, St, ct), j = new xx(x, pt), Lt = new ex(), Rt = new ox(Z, st), Ut = new A_(x, Wt, E, K, W, f, c), ut = new hx(x, W, st), bt = new vx(T, xt, st, K), ae = new R_(T, Z, xt, st), Xt = new F_(T, Z, xt, st), xt.programs = et.programs, x.capabilities = st, x.extensions = Z, x.properties = pt, x.renderLists = Lt, x.shadowMap = ut, x.state = K, x.info = xt;
    }
    r(Yt, "initGLContext"), Yt();
    let Nt = new ro(x, T);
    this.xr = Nt, this.getContext = function() {
      return T;
    }, this.getContextAttributes = function() {
      return T.getContextAttributes();
    }, this.forceContextLoss = function() {
      let S = Z.get("WEBGL_lose_context");
      S && S.loseContext();
    }, this.forceContextRestore = function() {
      let S = Z.get("WEBGL_lose_context");
      S && S.restoreContext();
    }, this.getPixelRatio = function() {
      return J;
    }, this.setPixelRatio = function(S) {
      S !== void 0 && (J = S, this.setSize(G, k, false));
    }, this.getSize = function(S) {
      return S.set(G, k);
    }, this.setSize = function(S, N, B = true) {
      if (Nt.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      G = S, k = N, e.width = Math.floor(S * J), e.height = Math.floor(N * J), B === true && (e.style.width = S + "px", e.style.height = N + "px"), this.setViewport(0, 0, S, N);
    }, this.getDrawingBufferSize = function(S) {
      return S.set(G * J, k * J).floor();
    }, this.setDrawingBufferSize = function(S, N, B) {
      G = S, k = N, J = B, e.width = Math.floor(S * B), e.height = Math.floor(N * B), this.setViewport(0, 0, S, N);
    }, this.getCurrentViewport = function(S) {
      return S.copy(M);
    }, this.getViewport = function(S) {
      return S.copy(it);
    }, this.setViewport = function(S, N, B, z) {
      S.isVector4 ? it.set(S.x, S.y, S.z, S.w) : it.set(S, N, B, z), K.viewport(M.copy(it).multiplyScalar(J).round());
    }, this.getScissor = function(S) {
      return S.copy(nt);
    }, this.setScissor = function(S, N, B, z) {
      S.isVector4 ? nt.set(S.x, S.y, S.z, S.w) : nt.set(S, N, B, z), K.scissor(A.copy(nt).multiplyScalar(J).round());
    }, this.getScissorTest = function() {
      return _t;
    }, this.setScissorTest = function(S) {
      K.setScissorTest(_t = S);
    }, this.setOpaqueSort = function(S) {
      q2 = S;
    }, this.setTransparentSort = function(S) {
      Y = S;
    }, this.getClearColor = function(S) {
      return S.copy(Ut.getClearColor());
    }, this.setClearColor = function() {
      Ut.setClearColor.apply(Ut, arguments);
    }, this.getClearAlpha = function() {
      return Ut.getClearAlpha();
    }, this.setClearAlpha = function() {
      Ut.setClearAlpha.apply(Ut, arguments);
    }, this.clear = function(S = true, N = true, B = true) {
      let z = 0;
      if (S) {
        let O = false;
        if (R !== null) {
          let gt = R.texture.format;
          O = gt === kd || gt === zd || gt === Bd;
        }
        if (O) {
          let gt = R.texture.type, Et = gt === Rn || gt === En || gt === Fo || gt === Jn || gt === Nd || gt === Od, Ct = Ut.getClearColor(), Pt = Ut.getClearAlpha(), Gt = Ct.r, Dt = Ct.g, Ot = Ct.b;
          Et ? (g[0] = Gt, g[1] = Dt, g[2] = Ot, g[3] = Pt, T.clearBufferuiv(T.COLOR, 0, g)) : (_[0] = Gt, _[1] = Dt, _[2] = Ot, _[3] = Pt, T.clearBufferiv(T.COLOR, 0, _));
        } else z |= T.COLOR_BUFFER_BIT;
      }
      N && (z |= T.DEPTH_BUFFER_BIT), B && (z |= T.STENCIL_BUFFER_BIT, this.state.buffers.stencil.setMask(4294967295)), T.clear(z);
    }, this.clearColor = function() {
      this.clear(true, false, false);
    }, this.clearDepth = function() {
      this.clear(false, true, false);
    }, this.clearStencil = function() {
      this.clear(false, false, true);
    }, this.dispose = function() {
      e.removeEventListener("webglcontextlost", te, false), e.removeEventListener("webglcontextrestored", U, false), e.removeEventListener("webglcontextcreationerror", dt, false), Lt.dispose(), Rt.dispose(), pt.dispose(), Wt.dispose(), E.dispose(), W.dispose(), St.dispose(), bt.dispose(), et.dispose(), Nt.dispose(), Nt.removeEventListener("sessionstart", Fe), Nt.removeEventListener("sessionend", Qt), mt && (mt.dispose(), mt = null), Ee.stop();
    };
    function te(S) {
      S.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), b = true;
    }
    r(te, "onContextLost");
    function U() {
      console.log("THREE.WebGLRenderer: Context Restored."), b = false;
      let S = xt.autoReset, N = ut.enabled, B = ut.autoUpdate, z = ut.needsUpdate, O = ut.type;
      Yt(), xt.autoReset = S, ut.enabled = N, ut.autoUpdate = B, ut.needsUpdate = z, ut.type = O;
    }
    r(U, "onContextRestore");
    function dt(S) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", S.statusMessage);
    }
    r(dt, "onContextCreationError");
    function F(S) {
      let N = S.target;
      N.removeEventListener("dispose", F), ot(N);
    }
    r(F, "onMaterialDispose");
    function ot(S) {
      ft(S), pt.remove(S);
    }
    r(ot, "deallocateMaterial");
    function ft(S) {
      let N = pt.get(S).programs;
      N !== void 0 && (N.forEach(function(B) {
        et.releaseProgram(B);
      }), S.isShaderMaterial && et.releaseShaderCache(S));
    }
    r(ft, "releaseMaterialProgramReferences"), this.renderBufferDirect = function(S, N, B, z, O, gt) {
      N === null && (N = Ht);
      let Et = O.isMesh && O.matrixWorld.determinant() < 0, Ct = rf(S, N, B, z, O);
      K.setMaterial(z, Et);
      let Pt = B.index, Gt = 1;
      if (z.wireframe === true) {
        if (Pt = H.getWireframeAttribute(B), Pt === void 0) return;
        Gt = 2;
      }
      let Dt = B.drawRange, Ot = B.attributes.position, re = Dt.start * Gt, Ue = (Dt.start + Dt.count) * Gt;
      gt !== null && (re = Math.max(re, gt.start * Gt), Ue = Math.min(Ue, (gt.start + gt.count) * Gt)), Pt !== null ? (re = Math.max(re, 0), Ue = Math.min(Ue, Pt.count)) : Ot != null && (re = Math.max(re, 0), Ue = Math.min(Ue, Ot.count));
      let de = Ue - re;
      if (de < 0 || de === 1 / 0) return;
      St.setup(O, z, Ct, B, Pt);
      let en, ie = ae;
      if (Pt !== null && (en = y.get(Pt), ie = Xt, ie.setIndex(en)), O.isMesh) z.wireframe === true ? (K.setLineWidth(z.wireframeLinewidth * At()), ie.setMode(T.LINES)) : ie.setMode(T.TRIANGLES);
      else if (O.isLine) {
        let Bt = z.linewidth;
        Bt === void 0 && (Bt = 1), K.setLineWidth(Bt * At()), O.isLineSegments ? ie.setMode(T.LINES) : O.isLineLoop ? ie.setMode(T.LINE_LOOP) : ie.setMode(T.LINE_STRIP);
      } else O.isPoints ? ie.setMode(T.POINTS) : O.isSprite && ie.setMode(T.TRIANGLES);
      if (O.isBatchedMesh) ie.renderMultiDraw(O._multiDrawStarts, O._multiDrawCounts, O._multiDrawCount);
      else if (O.isInstancedMesh) ie.renderInstances(re, de, O.count);
      else if (B.isInstancedBufferGeometry) {
        let Bt = B._maxInstanceCount !== void 0 ? B._maxInstanceCount : 1 / 0, Wr = Math.min(B.instanceCount, Bt);
        ie.renderInstances(re, de, Wr);
      } else ie.render(re, de);
    };
    function qt(S, N, B) {
      S.transparent === true && S.side === un && S.forceSinglePass === false ? (S.side = Pe, S.needsUpdate = true, fs(S, N, B), S.side = Cn, S.needsUpdate = true, fs(S, N, B), S.side = un) : fs(S, N, B);
    }
    r(qt, "prepareMaterial"), this.compile = function(S, N, B = null) {
      B === null && (B = S), m = Rt.get(B), m.init(), w.push(m), B.traverseVisible(function(O) {
        O.isLight && O.layers.test(N.layers) && (m.pushLight(O), O.castShadow && m.pushShadow(O));
      }), S !== B && S.traverseVisible(function(O) {
        O.isLight && O.layers.test(N.layers) && (m.pushLight(O), O.castShadow && m.pushShadow(O));
      }), m.setupLights(x._useLegacyLights);
      let z = /* @__PURE__ */ new Set();
      return S.traverse(function(O) {
        let gt = O.material;
        if (gt) if (Array.isArray(gt)) for (let Et = 0; Et < gt.length; Et++) {
          let Ct = gt[Et];
          qt(Ct, B, O), z.add(Ct);
        }
        else qt(gt, B, O), z.add(gt);
      }), w.pop(), m = null, z;
    }, this.compileAsync = function(S, N, B = null) {
      let z = this.compile(S, N, B);
      return new Promise((O) => {
        function gt() {
          if (z.forEach(function(Et) {
            pt.get(Et).currentProgram.isReady() && z.delete(Et);
          }), z.size === 0) {
            O(S);
            return;
          }
          setTimeout(gt, 10);
        }
        r(gt, "checkMaterialsReady"), Z.get("KHR_parallel_shader_compile") !== null ? gt() : setTimeout(gt, 10);
      });
    };
    let Kt = null;
    function me(S) {
      Kt && Kt(S);
    }
    r(me, "onAnimationFrame");
    function Fe() {
      Ee.stop();
    }
    r(Fe, "onXRSessionStart");
    function Qt() {
      Ee.start();
    }
    r(Qt, "onXRSessionEnd");
    let Ee = new Yd();
    Ee.setAnimationLoop(me), typeof self < "u" && Ee.setContext(self), this.setAnimationLoop = function(S) {
      Kt = S, Nt.setAnimationLoop(S), S === null ? Ee.stop() : Ee.start();
    }, Nt.addEventListener("sessionstart", Fe), Nt.addEventListener("sessionend", Qt), this.render = function(S, N) {
      if (N !== void 0 && N.isCamera !== true) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (b === true) return;
      S.matrixWorldAutoUpdate === true && S.updateMatrixWorld(), N.parent === null && N.matrixWorldAutoUpdate === true && N.updateMatrixWorld(), Nt.enabled === true && Nt.isPresenting === true && (Nt.cameraAutoUpdate === true && Nt.updateCamera(N), N = Nt.getCamera()), S.isScene === true && S.onBeforeRender(x, S, N, R), m = Rt.get(S, w.length), m.init(), w.push(m), wt.multiplyMatrices(N.projectionMatrix, N.matrixWorldInverse), It.setFromProjectionMatrix(wt), tt = this.localClippingEnabled, V = ct.init(this.clippingPlanes, tt), v = Lt.get(S, p.length), v.init(), p.push(v), $e(S, N, 0, x.sortObjects), v.finish(), x.sortObjects === true && v.sort(q2, Y), this.info.render.frame++, V === true && ct.beginShadows();
      let B = m.state.shadowsArray;
      if (ut.render(B, S, N), V === true && ct.endShadows(), this.info.autoReset === true && this.info.reset(), (Nt.enabled === false || Nt.isPresenting === false || Nt.hasDepthSensing() === false) && Ut.render(v, S), m.setupLights(x._useLegacyLights), N.isArrayCamera) {
        let z = N.cameras;
        for (let O = 0, gt = z.length; O < gt; O++) {
          let Et = z[O];
          Kl(v, S, Et, Et.viewport);
        }
      } else Kl(v, S, N);
      R !== null && (yt.updateMultisampleRenderTarget(R), yt.updateRenderTargetMipmap(R)), S.isScene === true && S.onAfterRender(x, S, N), St.resetDefaultState(), D = -1, X = null, w.pop(), w.length > 0 ? m = w[w.length - 1] : m = null, p.pop(), p.length > 0 ? v = p[p.length - 1] : v = null;
    };
    function $e(S, N, B, z) {
      if (S.visible === false) return;
      if (S.layers.test(N.layers)) {
        if (S.isGroup) B = S.renderOrder;
        else if (S.isLOD) S.autoUpdate === true && S.update(N);
        else if (S.isLight) m.pushLight(S), S.castShadow && m.pushShadow(S);
        else if (S.isSprite) {
          if (!S.frustumCulled || It.intersectsSprite(S)) {
            z && vt.setFromMatrixPosition(S.matrixWorld).applyMatrix4(wt);
            let Et = W.update(S), Ct = S.material;
            Ct.visible && v.push(S, Et, Ct, B, vt.z, null);
          }
        } else if ((S.isMesh || S.isLine || S.isPoints) && (!S.frustumCulled || It.intersectsObject(S))) {
          let Et = W.update(S), Ct = S.material;
          if (z && (S.boundingSphere !== void 0 ? (S.boundingSphere === null && S.computeBoundingSphere(), vt.copy(S.boundingSphere.center)) : (Et.boundingSphere === null && Et.computeBoundingSphere(), vt.copy(Et.boundingSphere.center)), vt.applyMatrix4(S.matrixWorld).applyMatrix4(wt)), Array.isArray(Ct)) {
            let Pt = Et.groups;
            for (let Gt = 0, Dt = Pt.length; Gt < Dt; Gt++) {
              let Ot = Pt[Gt], re = Ct[Ot.materialIndex];
              re && re.visible && v.push(S, Et, re, B, vt.z, Ot);
            }
          } else Ct.visible && v.push(S, Et, Ct, B, vt.z, null);
        }
      }
      let gt = S.children;
      for (let Et = 0, Ct = gt.length; Et < Ct; Et++) $e(gt[Et], N, B, z);
    }
    r($e, "projectObject");
    function Kl(S, N, B, z) {
      let O = S.opaque, gt = S.transmissive, Et = S.transparent;
      m.setupLightsView(B), V === true && ct.setGlobalState(x.clippingPlanes, B), gt.length > 0 && sf(O, gt, N, B), z && K.viewport(M.copy(z)), O.length > 0 && ds(O, N, B), gt.length > 0 && ds(gt, N, B), Et.length > 0 && ds(Et, N, B), K.buffers.depth.setTest(true), K.buffers.depth.setMask(true), K.buffers.color.setMask(true), K.setPolygonOffset(false);
    }
    r(Kl, "renderScene");
    function sf(S, N, B, z) {
      if ((B.isScene === true ? B.overrideMaterial : null) !== null) return;
      let gt = st.isWebGL2;
      mt === null && (mt = new fn(1, 1, { generateMipmaps: true, type: Z.has("EXT_color_buffer_half_float") ? ns : Rn, minFilter: Yn, samples: gt ? 4 : 0 })), x.getDrawingBufferSize(Mt), gt ? mt.setSize(Mt.x, Mt.y) : mt.setSize(nr(Mt.x), nr(Mt.y));
      let Et = x.getRenderTarget();
      x.setRenderTarget(mt), x.getClearColor($), I = x.getClearAlpha(), I < 1 && x.setClearColor(16777215, 0.5), x.clear();
      let Ct = x.toneMapping;
      x.toneMapping = Tn, ds(S, B, z), yt.updateMultisampleRenderTarget(mt), yt.updateRenderTargetMipmap(mt);
      let Pt = false;
      for (let Gt = 0, Dt = N.length; Gt < Dt; Gt++) {
        let Ot = N[Gt], re = Ot.object, Ue = Ot.geometry, de = Ot.material, en = Ot.group;
        if (de.side === un && re.layers.test(z.layers)) {
          let ie = de.side;
          de.side = Pe, de.needsUpdate = true, Ql(re, B, z, Ue, de, en), de.side = ie, de.needsUpdate = true, Pt = true;
        }
      }
      Pt === true && (yt.updateMultisampleRenderTarget(mt), yt.updateRenderTargetMipmap(mt)), x.setRenderTarget(Et), x.setClearColor($, I), x.toneMapping = Ct;
    }
    r(sf, "renderTransmissionPass");
    function ds(S, N, B) {
      let z = N.isScene === true ? N.overrideMaterial : null;
      for (let O = 0, gt = S.length; O < gt; O++) {
        let Et = S[O], Ct = Et.object, Pt = Et.geometry, Gt = z === null ? Et.material : z, Dt = Et.group;
        Ct.layers.test(B.layers) && Ql(Ct, N, B, Pt, Gt, Dt);
      }
    }
    r(ds, "renderObjects");
    function Ql(S, N, B, z, O, gt) {
      S.onBeforeRender(x, N, B, z, O, gt), S.modelViewMatrix.multiplyMatrices(B.matrixWorldInverse, S.matrixWorld), S.normalMatrix.getNormalMatrix(S.modelViewMatrix), O.onBeforeRender(x, N, B, z, S, gt), O.transparent === true && O.side === un && O.forceSinglePass === false ? (O.side = Pe, O.needsUpdate = true, x.renderBufferDirect(B, N, z, O, S, gt), O.side = Cn, O.needsUpdate = true, x.renderBufferDirect(B, N, z, O, S, gt), O.side = un) : x.renderBufferDirect(B, N, z, O, S, gt), S.onAfterRender(x, N, B, z, O, gt);
    }
    r(Ql, "renderObject");
    function fs(S, N, B) {
      N.isScene !== true && (N = Ht);
      let z = pt.get(S), O = m.state.lights, gt = m.state.shadowsArray, Et = O.state.version, Ct = et.getParameters(S, O.state, gt, N, B), Pt = et.getProgramCacheKey(Ct), Gt = z.programs;
      z.environment = S.isMeshStandardMaterial ? N.environment : null, z.fog = N.fog, z.envMap = (S.isMeshStandardMaterial ? E : Wt).get(S.envMap || z.environment), z.envMapRotation = z.environment !== null && S.envMap === null ? N.environmentRotation : S.envMapRotation, Gt === void 0 && (S.addEventListener("dispose", F), Gt = /* @__PURE__ */ new Map(), z.programs = Gt);
      let Dt = Gt.get(Pt);
      if (Dt !== void 0) {
        if (z.currentProgram === Dt && z.lightsStateVersion === Et) return th(S, Ct), Dt;
      } else Ct.uniforms = et.getUniforms(S), S.onBuild(B, Ct, x), S.onBeforeCompile(Ct, x), Dt = et.acquireProgram(Ct, Pt), Gt.set(Pt, Dt), z.uniforms = Ct.uniforms;
      let Ot = z.uniforms;
      return (!S.isShaderMaterial && !S.isRawShaderMaterial || S.clipping === true) && (Ot.clippingPlanes = ct.uniform), th(S, Ct), z.needsLights = of(S), z.lightsStateVersion = Et, z.needsLights && (Ot.ambientLightColor.value = O.state.ambient, Ot.lightProbe.value = O.state.probe, Ot.directionalLights.value = O.state.directional, Ot.directionalLightShadows.value = O.state.directionalShadow, Ot.spotLights.value = O.state.spot, Ot.spotLightShadows.value = O.state.spotShadow, Ot.rectAreaLights.value = O.state.rectArea, Ot.ltc_1.value = O.state.rectAreaLTC1, Ot.ltc_2.value = O.state.rectAreaLTC2, Ot.pointLights.value = O.state.point, Ot.pointLightShadows.value = O.state.pointShadow, Ot.hemisphereLights.value = O.state.hemi, Ot.directionalShadowMap.value = O.state.directionalShadowMap, Ot.directionalShadowMatrix.value = O.state.directionalShadowMatrix, Ot.spotShadowMap.value = O.state.spotShadowMap, Ot.spotLightMatrix.value = O.state.spotLightMatrix, Ot.spotLightMap.value = O.state.spotLightMap, Ot.pointShadowMap.value = O.state.pointShadowMap, Ot.pointShadowMatrix.value = O.state.pointShadowMatrix), z.currentProgram = Dt, z.uniformsList = null, Dt;
    }
    r(fs, "getProgram");
    function jl(S) {
      if (S.uniformsList === null) {
        let N = S.currentProgram.getUniforms();
        S.uniformsList = Ri.seqWithValue(N.seq, S.uniforms);
      }
      return S.uniformsList;
    }
    r(jl, "getUniformList");
    function th(S, N) {
      let B = pt.get(S);
      B.outputColorSpace = N.outputColorSpace, B.batching = N.batching, B.instancing = N.instancing, B.instancingColor = N.instancingColor, B.instancingMorph = N.instancingMorph, B.skinning = N.skinning, B.morphTargets = N.morphTargets, B.morphNormals = N.morphNormals, B.morphColors = N.morphColors, B.morphTargetsCount = N.morphTargetsCount, B.numClippingPlanes = N.numClippingPlanes, B.numIntersection = N.numClipIntersection, B.vertexAlphas = N.vertexAlphas, B.vertexTangents = N.vertexTangents, B.toneMapping = N.toneMapping;
    }
    r(th, "updateCommonMaterialProperties");
    function rf(S, N, B, z, O) {
      N.isScene !== true && (N = Ht), yt.resetTextureUnits();
      let gt = N.fog, Et = z.isMeshStandardMaterial ? N.environment : null, Ct = R === null ? x.outputColorSpace : R.isXRRenderTarget === true ? R.texture.colorSpace : Dn, Pt = (z.isMeshStandardMaterial ? E : Wt).get(z.envMap || Et), Gt = z.vertexColors === true && !!B.attributes.color && B.attributes.color.itemSize === 4, Dt = !!B.attributes.tangent && (!!z.normalMap || z.anisotropy > 0), Ot = !!B.morphAttributes.position, re = !!B.morphAttributes.normal, Ue = !!B.morphAttributes.color, de = Tn;
      z.toneMapped && (R === null || R.isXRRenderTarget === true) && (de = x.toneMapping);
      let en = B.morphAttributes.position || B.morphAttributes.normal || B.morphAttributes.color, ie = en !== void 0 ? en.length : 0, Bt = pt.get(z), Wr = m.state.lights;
      if (V === true && (tt === true || S !== X)) {
        let Be = S === X && z.id === D;
        ct.setState(z, S, Be);
      }
      let ee = false;
      z.version === Bt.__version ? (Bt.needsLights && Bt.lightsStateVersion !== Wr.state.version || Bt.outputColorSpace !== Ct || O.isBatchedMesh && Bt.batching === false || !O.isBatchedMesh && Bt.batching === true || O.isInstancedMesh && Bt.instancing === false || !O.isInstancedMesh && Bt.instancing === true || O.isSkinnedMesh && Bt.skinning === false || !O.isSkinnedMesh && Bt.skinning === true || O.isInstancedMesh && Bt.instancingColor === true && O.instanceColor === null || O.isInstancedMesh && Bt.instancingColor === false && O.instanceColor !== null || O.isInstancedMesh && Bt.instancingMorph === true && O.morphTexture === null || O.isInstancedMesh && Bt.instancingMorph === false && O.morphTexture !== null || Bt.envMap !== Pt || z.fog === true && Bt.fog !== gt || Bt.numClippingPlanes !== void 0 && (Bt.numClippingPlanes !== ct.numPlanes || Bt.numIntersection !== ct.numIntersection) || Bt.vertexAlphas !== Gt || Bt.vertexTangents !== Dt || Bt.morphTargets !== Ot || Bt.morphNormals !== re || Bt.morphColors !== Ue || Bt.toneMapping !== de || st.isWebGL2 === true && Bt.morphTargetsCount !== ie) && (ee = true) : (ee = true, Bt.__version = z.version);
      let Nn = Bt.currentProgram;
      ee === true && (Nn = fs(z, N, O));
      let eh = false, ki = false, Xr = false, _e = Nn.getUniforms(), On = Bt.uniforms;
      if (K.useProgram(Nn.program) && (eh = true, ki = true, Xr = true), z.id !== D && (D = z.id, ki = true), eh || X !== S) {
        _e.setValue(T, "projectionMatrix", S.projectionMatrix), _e.setValue(T, "viewMatrix", S.matrixWorldInverse);
        let Be = _e.map.cameraPosition;
        Be !== void 0 && Be.setValue(T, vt.setFromMatrixPosition(S.matrixWorld)), st.logarithmicDepthBuffer && _e.setValue(T, "logDepthBufFC", 2 / (Math.log(S.far + 1) / Math.LN2)), (z.isMeshPhongMaterial || z.isMeshToonMaterial || z.isMeshLambertMaterial || z.isMeshBasicMaterial || z.isMeshStandardMaterial || z.isShaderMaterial) && _e.setValue(T, "isOrthographic", S.isOrthographicCamera === true), X !== S && (X = S, ki = true, Xr = true);
      }
      if (O.isSkinnedMesh) {
        _e.setOptional(T, O, "bindMatrix"), _e.setOptional(T, O, "bindMatrixInverse");
        let Be = O.skeleton;
        Be && (st.floatVertexTextures ? (Be.boneTexture === null && Be.computeBoneTexture(), _e.setValue(T, "boneTexture", Be.boneTexture, yt)) : console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."));
      }
      O.isBatchedMesh && (_e.setOptional(T, O, "batchingTexture"), _e.setValue(T, "batchingTexture", O._matricesTexture, yt));
      let qr = B.morphAttributes;
      if ((qr.position !== void 0 || qr.normal !== void 0 || qr.color !== void 0 && st.isWebGL2 === true) && rt.update(O, B, Nn), (ki || Bt.receiveShadow !== O.receiveShadow) && (Bt.receiveShadow = O.receiveShadow, _e.setValue(T, "receiveShadow", O.receiveShadow)), z.isMeshGouraudMaterial && z.envMap !== null && (On.envMap.value = Pt, On.flipEnvMap.value = Pt.isCubeTexture && Pt.isRenderTargetTexture === false ? -1 : 1), ki && (_e.setValue(T, "toneMappingExposure", x.toneMappingExposure), Bt.needsLights && af(On, Xr), gt && z.fog === true && j.refreshFogUniforms(On, gt), j.refreshMaterialUniforms(On, z, J, k, mt), Ri.upload(T, jl(Bt), On, yt)), z.isShaderMaterial && z.uniformsNeedUpdate === true && (Ri.upload(T, jl(Bt), On, yt), z.uniformsNeedUpdate = false), z.isSpriteMaterial && _e.setValue(T, "center", O.center), _e.setValue(T, "modelViewMatrix", O.modelViewMatrix), _e.setValue(T, "normalMatrix", O.normalMatrix), _e.setValue(T, "modelMatrix", O.matrixWorld), z.isShaderMaterial || z.isRawShaderMaterial) {
        let Be = z.uniformsGroups;
        for (let Yr = 0, cf = Be.length; Yr < cf; Yr++) if (st.isWebGL2) {
          let nh = Be[Yr];
          bt.update(nh, Nn), bt.bind(nh, Nn);
        } else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.");
      }
      return Nn;
    }
    r(rf, "setProgram");
    function af(S, N) {
      S.ambientLightColor.needsUpdate = N, S.lightProbe.needsUpdate = N, S.directionalLights.needsUpdate = N, S.directionalLightShadows.needsUpdate = N, S.pointLights.needsUpdate = N, S.pointLightShadows.needsUpdate = N, S.spotLights.needsUpdate = N, S.spotLightShadows.needsUpdate = N, S.rectAreaLights.needsUpdate = N, S.hemisphereLights.needsUpdate = N;
    }
    r(af, "markUniformsLightsNeedsUpdate");
    function of(S) {
      return S.isMeshLambertMaterial || S.isMeshToonMaterial || S.isMeshPhongMaterial || S.isMeshStandardMaterial || S.isShadowMaterial || S.isShaderMaterial && S.lights === true;
    }
    r(of, "materialNeedsLights"), this.getActiveCubeFace = function() {
      return L;
    }, this.getActiveMipmapLevel = function() {
      return C;
    }, this.getRenderTarget = function() {
      return R;
    }, this.setRenderTargetTextures = function(S, N, B) {
      pt.get(S.texture).__webglTexture = N, pt.get(S.depthTexture).__webglTexture = B;
      let z = pt.get(S);
      z.__hasExternalTextures = true, z.__autoAllocateDepthBuffer = B === void 0, z.__autoAllocateDepthBuffer || Z.has("WEBGL_multisampled_render_to_texture") === true && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), z.__useRenderToTexture = false);
    }, this.setRenderTargetFramebuffer = function(S, N) {
      let B = pt.get(S);
      B.__webglFramebuffer = N, B.__useDefaultFramebuffer = N === void 0;
    }, this.setRenderTarget = function(S, N = 0, B = 0) {
      R = S, L = N, C = B;
      let z = true, O = null, gt = false, Et = false;
      if (S) {
        let Pt = pt.get(S);
        Pt.__useDefaultFramebuffer !== void 0 ? (K.bindFramebuffer(T.FRAMEBUFFER, null), z = false) : Pt.__webglFramebuffer === void 0 ? yt.setupRenderTarget(S) : Pt.__hasExternalTextures && yt.rebindTextures(S, pt.get(S.texture).__webglTexture, pt.get(S.depthTexture).__webglTexture);
        let Gt = S.texture;
        (Gt.isData3DTexture || Gt.isDataArrayTexture || Gt.isCompressedArrayTexture) && (Et = true);
        let Dt = pt.get(S).__webglFramebuffer;
        S.isWebGLCubeRenderTarget ? (Array.isArray(Dt[N]) ? O = Dt[N][B] : O = Dt[N], gt = true) : st.isWebGL2 && S.samples > 0 && yt.useMultisampledRTT(S) === false ? O = pt.get(S).__webglMultisampledFramebuffer : Array.isArray(Dt) ? O = Dt[B] : O = Dt, M.copy(S.viewport), A.copy(S.scissor), Q = S.scissorTest;
      } else M.copy(it).multiplyScalar(J).floor(), A.copy(nt).multiplyScalar(J).floor(), Q = _t;
      if (K.bindFramebuffer(T.FRAMEBUFFER, O) && st.drawBuffers && z && K.drawBuffers(S, O), K.viewport(M), K.scissor(A), K.setScissorTest(Q), gt) {
        let Pt = pt.get(S.texture);
        T.framebufferTexture2D(T.FRAMEBUFFER, T.COLOR_ATTACHMENT0, T.TEXTURE_CUBE_MAP_POSITIVE_X + N, Pt.__webglTexture, B);
      } else if (Et) {
        let Pt = pt.get(S.texture), Gt = N || 0;
        T.framebufferTextureLayer(T.FRAMEBUFFER, T.COLOR_ATTACHMENT0, Pt.__webglTexture, B || 0, Gt);
      }
      D = -1;
    }, this.readRenderTargetPixels = function(S, N, B, z, O, gt, Et) {
      if (!(S && S.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let Ct = pt.get(S).__webglFramebuffer;
      if (S.isWebGLCubeRenderTarget && Et !== void 0 && (Ct = Ct[Et]), Ct) {
        K.bindFramebuffer(T.FRAMEBUFFER, Ct);
        try {
          let Pt = S.texture, Gt = Pt.format, Dt = Pt.type;
          if (Gt !== Oe && Tt.convert(Gt) !== T.getParameter(T.IMPLEMENTATION_COLOR_READ_FORMAT)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          let Ot = Dt === ns && (Z.has("EXT_color_buffer_half_float") || st.isWebGL2 && Z.has("EXT_color_buffer_float"));
          if (Dt !== Rn && Tt.convert(Dt) !== T.getParameter(T.IMPLEMENTATION_COLOR_READ_TYPE) && !(Dt === ke && (st.isWebGL2 || Z.has("OES_texture_float") || Z.has("WEBGL_color_buffer_float"))) && !Ot) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          N >= 0 && N <= S.width - z && B >= 0 && B <= S.height - O && T.readPixels(N, B, z, O, Tt.convert(Gt), Tt.convert(Dt), gt);
        } finally {
          let Pt = R !== null ? pt.get(R).__webglFramebuffer : null;
          K.bindFramebuffer(T.FRAMEBUFFER, Pt);
        }
      }
    }, this.copyFramebufferToTexture = function(S, N, B = 0) {
      let z = Math.pow(2, -B), O = Math.floor(N.image.width * z), gt = Math.floor(N.image.height * z);
      yt.setTexture2D(N, 0), T.copyTexSubImage2D(T.TEXTURE_2D, B, 0, 0, S.x, S.y, O, gt), K.unbindTexture();
    }, this.copyTextureToTexture = function(S, N, B, z = 0) {
      let O = N.image.width, gt = N.image.height, Et = Tt.convert(B.format), Ct = Tt.convert(B.type);
      yt.setTexture2D(B, 0), T.pixelStorei(T.UNPACK_FLIP_Y_WEBGL, B.flipY), T.pixelStorei(T.UNPACK_PREMULTIPLY_ALPHA_WEBGL, B.premultiplyAlpha), T.pixelStorei(T.UNPACK_ALIGNMENT, B.unpackAlignment), N.isDataTexture ? T.texSubImage2D(T.TEXTURE_2D, z, S.x, S.y, O, gt, Et, Ct, N.image.data) : N.isCompressedTexture ? T.compressedTexSubImage2D(T.TEXTURE_2D, z, S.x, S.y, N.mipmaps[0].width, N.mipmaps[0].height, Et, N.mipmaps[0].data) : T.texSubImage2D(T.TEXTURE_2D, z, S.x, S.y, Et, Ct, N.image), z === 0 && B.generateMipmaps && T.generateMipmap(T.TEXTURE_2D), K.unbindTexture();
    }, this.copyTextureToTexture3D = function(S, N, B, z, O = 0) {
      if (x.isWebGL1Renderer) {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
        return;
      }
      let gt = Math.round(S.max.x - S.min.x), Et = Math.round(S.max.y - S.min.y), Ct = S.max.z - S.min.z + 1, Pt = Tt.convert(z.format), Gt = Tt.convert(z.type), Dt;
      if (z.isData3DTexture) yt.setTexture3D(z, 0), Dt = T.TEXTURE_3D;
      else if (z.isDataArrayTexture || z.isCompressedArrayTexture) yt.setTexture2DArray(z, 0), Dt = T.TEXTURE_2D_ARRAY;
      else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      T.pixelStorei(T.UNPACK_FLIP_Y_WEBGL, z.flipY), T.pixelStorei(T.UNPACK_PREMULTIPLY_ALPHA_WEBGL, z.premultiplyAlpha), T.pixelStorei(T.UNPACK_ALIGNMENT, z.unpackAlignment);
      let Ot = T.getParameter(T.UNPACK_ROW_LENGTH), re = T.getParameter(T.UNPACK_IMAGE_HEIGHT), Ue = T.getParameter(T.UNPACK_SKIP_PIXELS), de = T.getParameter(T.UNPACK_SKIP_ROWS), en = T.getParameter(T.UNPACK_SKIP_IMAGES), ie = B.isCompressedTexture ? B.mipmaps[O] : B.image;
      T.pixelStorei(T.UNPACK_ROW_LENGTH, ie.width), T.pixelStorei(T.UNPACK_IMAGE_HEIGHT, ie.height), T.pixelStorei(T.UNPACK_SKIP_PIXELS, S.min.x), T.pixelStorei(T.UNPACK_SKIP_ROWS, S.min.y), T.pixelStorei(T.UNPACK_SKIP_IMAGES, S.min.z), B.isDataTexture || B.isData3DTexture ? T.texSubImage3D(Dt, O, N.x, N.y, N.z, gt, Et, Ct, Pt, Gt, ie.data) : z.isCompressedArrayTexture ? T.compressedTexSubImage3D(Dt, O, N.x, N.y, N.z, gt, Et, Ct, Pt, ie.data) : T.texSubImage3D(Dt, O, N.x, N.y, N.z, gt, Et, Ct, Pt, Gt, ie), T.pixelStorei(T.UNPACK_ROW_LENGTH, Ot), T.pixelStorei(T.UNPACK_IMAGE_HEIGHT, re), T.pixelStorei(T.UNPACK_SKIP_PIXELS, Ue), T.pixelStorei(T.UNPACK_SKIP_ROWS, de), T.pixelStorei(T.UNPACK_SKIP_IMAGES, en), O === 0 && z.generateMipmaps && T.generateMipmap(Dt), K.unbindTexture();
    }, this.initTexture = function(S) {
      S.isCubeTexture ? yt.setTextureCube(S, 0) : S.isData3DTexture ? yt.setTexture3D(S, 0) : S.isDataArrayTexture || S.isCompressedArrayTexture ? yt.setTexture2DArray(S, 0) : yt.setTexture2D(S, 0), K.unbindTexture();
    }, this.resetState = function() {
      L = 0, C = 0, R = null, K.reset(), St.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  get coordinateSystem() {
    return dn;
  }
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(t) {
    this._outputColorSpace = t;
    let e = this.getContext();
    e.drawingBufferColorSpace = t === zo ? "display-p3" : "srgb", e.unpackColorSpace = Jt.workingColorSpace === Vr ? "display-p3" : "srgb";
  }
  get useLegacyLights() {
    return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights;
  }
  set useLegacyLights(t) {
    console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights = t;
  }
};
r(Nc, "WebGLRenderer");
var ao = Nc;
var Oc = class Oc2 extends ao {
};
r(Oc, "WebGL1Renderer");
var oo = Oc;
oo.prototype.isWebGL1Renderer = true;
var Fc = class Fc2 extends le {
  constructor() {
    super(), this.isScene = true, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.backgroundRotation = new Je(), this.environmentRotation = new Je(), this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(t, e) {
    return super.copy(t, e), t.background !== null && (this.background = t.background.clone()), t.environment !== null && (this.environment = t.environment.clone()), t.fog !== null && (this.fog = t.fog.clone()), this.backgroundBlurriness = t.backgroundBlurriness, this.backgroundIntensity = t.backgroundIntensity, this.backgroundRotation.copy(t.backgroundRotation), this.environmentRotation.copy(t.environmentRotation), t.overrideMaterial !== null && (this.overrideMaterial = t.overrideMaterial.clone()), this.matrixAutoUpdate = t.matrixAutoUpdate, this;
  }
  toJSON(t) {
    let e = super.toJSON(t);
    return this.fog !== null && (e.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (e.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (e.object.backgroundIntensity = this.backgroundIntensity), e.object.backgroundRotation = this.backgroundRotation.toArray(), e.object.environmentRotation = this.environmentRotation.toArray(), e;
  }
};
r(Fc, "Scene");
var Ru = Fc;
var Bc = class Bc2 {
  constructor(t, e) {
    this.isInterleavedBuffer = true, this.array = t, this.stride = e, this.count = t !== void 0 ? t.length / e : 0, this.usage = Ha, this._updateRange = { offset: 0, count: -1 }, this.updateRanges = [], this.version = 0, this.uuid = Ve();
  }
  onUploadCallback() {
  }
  set needsUpdate(t) {
    t === true && this.version++;
  }
  get updateRange() {
    return Wd("THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."), this._updateRange;
  }
  setUsage(t) {
    return this.usage = t, this;
  }
  addUpdateRange(t, e) {
    this.updateRanges.push({ start: t, count: e });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(t) {
    return this.array = new t.array.constructor(t.array), this.count = t.count, this.stride = t.stride, this.usage = t.usage, this;
  }
  copyAt(t, e, n) {
    t *= this.stride, n *= e.stride;
    for (let i = 0, r2 = this.stride; i < r2; i++) this.array[t + i] = e.array[n + i];
    return this;
  }
  set(t, e = 0) {
    return this.array.set(t, e), this;
  }
  clone(t) {
    t.arrayBuffers === void 0 && (t.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Ve()), t.arrayBuffers[this.array.buffer._uuid] === void 0 && (t.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    let e = new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(e, this.stride);
    return n.setUsage(this.usage), n;
  }
  onUpload(t) {
    return this.onUploadCallback = t, this;
  }
  toJSON(t) {
    return t.arrayBuffers === void 0 && (t.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Ve()), t.arrayBuffers[this.array.buffer._uuid] === void 0 && (t.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), { uuid: this.uuid, buffer: this.array.buffer._uuid, type: this.array.constructor.name, stride: this.stride };
  }
};
r(Bc, "InterleavedBuffer");
var Cu = Bc;
var we = new P();
var Ur = class Ur2 {
  constructor(t, e, n, i = false) {
    this.isInterleavedBufferAttribute = true, this.name = "", this.data = t, this.itemSize = e, this.offset = n, this.normalized = i;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(t) {
    this.data.needsUpdate = t;
  }
  applyMatrix4(t) {
    for (let e = 0, n = this.data.count; e < n; e++) we.fromBufferAttribute(this, e), we.applyMatrix4(t), this.setXYZ(e, we.x, we.y, we.z);
    return this;
  }
  applyNormalMatrix(t) {
    for (let e = 0, n = this.count; e < n; e++) we.fromBufferAttribute(this, e), we.applyNormalMatrix(t), this.setXYZ(e, we.x, we.y, we.z);
    return this;
  }
  transformDirection(t) {
    for (let e = 0, n = this.count; e < n; e++) we.fromBufferAttribute(this, e), we.transformDirection(t), this.setXYZ(e, we.x, we.y, we.z);
    return this;
  }
  getComponent(t, e) {
    let n = this.array[t * this.data.stride + this.offset + e];
    return this.normalized && (n = Ze(n, this.array)), n;
  }
  setComponent(t, e, n) {
    return this.normalized && (n = Zt(n, this.array)), this.data.array[t * this.data.stride + this.offset + e] = n, this;
  }
  setX(t, e) {
    return this.normalized && (e = Zt(e, this.array)), this.data.array[t * this.data.stride + this.offset] = e, this;
  }
  setY(t, e) {
    return this.normalized && (e = Zt(e, this.array)), this.data.array[t * this.data.stride + this.offset + 1] = e, this;
  }
  setZ(t, e) {
    return this.normalized && (e = Zt(e, this.array)), this.data.array[t * this.data.stride + this.offset + 2] = e, this;
  }
  setW(t, e) {
    return this.normalized && (e = Zt(e, this.array)), this.data.array[t * this.data.stride + this.offset + 3] = e, this;
  }
  getX(t) {
    let e = this.data.array[t * this.data.stride + this.offset];
    return this.normalized && (e = Ze(e, this.array)), e;
  }
  getY(t) {
    let e = this.data.array[t * this.data.stride + this.offset + 1];
    return this.normalized && (e = Ze(e, this.array)), e;
  }
  getZ(t) {
    let e = this.data.array[t * this.data.stride + this.offset + 2];
    return this.normalized && (e = Ze(e, this.array)), e;
  }
  getW(t) {
    let e = this.data.array[t * this.data.stride + this.offset + 3];
    return this.normalized && (e = Ze(e, this.array)), e;
  }
  setXY(t, e, n) {
    return t = t * this.data.stride + this.offset, this.normalized && (e = Zt(e, this.array), n = Zt(n, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = n, this;
  }
  setXYZ(t, e, n, i) {
    return t = t * this.data.stride + this.offset, this.normalized && (e = Zt(e, this.array), n = Zt(n, this.array), i = Zt(i, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = n, this.data.array[t + 2] = i, this;
  }
  setXYZW(t, e, n, i, r2) {
    return t = t * this.data.stride + this.offset, this.normalized && (e = Zt(e, this.array), n = Zt(n, this.array), i = Zt(i, this.array), r2 = Zt(r2, this.array)), this.data.array[t + 0] = e, this.data.array[t + 1] = n, this.data.array[t + 2] = i, this.data.array[t + 3] = r2, this;
  }
  clone(t) {
    if (t === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      let e = [];
      for (let n = 0; n < this.count; n++) {
        let i = n * this.data.stride + this.offset;
        for (let r2 = 0; r2 < this.itemSize; r2++) e.push(this.data.array[i + r2]);
      }
      return new Se(new this.array.constructor(e), this.itemSize, this.normalized);
    } else return t.interleavedBuffers === void 0 && (t.interleavedBuffers = {}), t.interleavedBuffers[this.data.uuid] === void 0 && (t.interleavedBuffers[this.data.uuid] = this.data.clone(t)), new Ur2(t.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
  }
  toJSON(t) {
    if (t === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      let e = [];
      for (let n = 0; n < this.count; n++) {
        let i = n * this.data.stride + this.offset;
        for (let r2 = 0; r2 < this.itemSize; r2++) e.push(this.data.array[i + r2]);
      }
      return { itemSize: this.itemSize, type: this.array.constructor.name, array: e, normalized: this.normalized };
    } else return t.interleavedBuffers === void 0 && (t.interleavedBuffers = {}), t.interleavedBuffers[this.data.uuid] === void 0 && (t.interleavedBuffers[this.data.uuid] = this.data.toJSON(t)), { isInterleavedBufferAttribute: true, itemSize: this.itemSize, data: this.data.uuid, offset: this.offset, normalized: this.normalized };
  }
};
r(Ur, "InterleavedBufferAttribute");
var Pu = Ur;
var Iu = new P();
var Lu = new $t();
var Uu = new $t();
var yx = new P();
var Du = new Ft();
var Ns = new P();
var wa = new Re();
var Nu = new Ft();
var Aa = new Kn();
var zc = class zc2 extends Me {
  constructor(t, e) {
    super(t, e), this.isSkinnedMesh = true, this.type = "SkinnedMesh", this.bindMode = hh, this.bindMatrix = new Ft(), this.bindMatrixInverse = new Ft(), this.boundingBox = null, this.boundingSphere = null;
  }
  computeBoundingBox() {
    let t = this.geometry;
    this.boundingBox === null && (this.boundingBox = new Ie()), this.boundingBox.makeEmpty();
    let e = t.getAttribute("position");
    for (let n = 0; n < e.count; n++) this.getVertexPosition(n, Ns), this.boundingBox.expandByPoint(Ns);
  }
  computeBoundingSphere() {
    let t = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new Re()), this.boundingSphere.makeEmpty();
    let e = t.getAttribute("position");
    for (let n = 0; n < e.count; n++) this.getVertexPosition(n, Ns), this.boundingSphere.expandByPoint(Ns);
  }
  copy(t, e) {
    return super.copy(t, e), this.bindMode = t.bindMode, this.bindMatrix.copy(t.bindMatrix), this.bindMatrixInverse.copy(t.bindMatrixInverse), this.skeleton = t.skeleton, t.boundingBox !== null && (this.boundingBox = t.boundingBox.clone()), t.boundingSphere !== null && (this.boundingSphere = t.boundingSphere.clone()), this;
  }
  raycast(t, e) {
    let n = this.material, i = this.matrixWorld;
    n !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), wa.copy(this.boundingSphere), wa.applyMatrix4(i), t.ray.intersectsSphere(wa) !== false && (Nu.copy(i).invert(), Aa.copy(t.ray).applyMatrix4(Nu), !(this.boundingBox !== null && Aa.intersectsBox(this.boundingBox) === false) && this._computeIntersections(t, e, Aa)));
  }
  getVertexPosition(t, e) {
    return super.getVertexPosition(t, e), this.applyBoneTransform(t, e), e;
  }
  bind(t, e) {
    this.skeleton = t, e === void 0 && (this.updateMatrixWorld(true), this.skeleton.calculateInverses(), e = this.matrixWorld), this.bindMatrix.copy(e), this.bindMatrixInverse.copy(e).invert();
  }
  pose() {
    this.skeleton.pose();
  }
  normalizeSkinWeights() {
    let t = new $t(), e = this.geometry.attributes.skinWeight;
    for (let n = 0, i = e.count; n < i; n++) {
      t.fromBufferAttribute(e, n);
      let r2 = 1 / t.manhattanLength();
      r2 !== 1 / 0 ? t.multiplyScalar(r2) : t.set(1, 0, 0, 0), e.setXYZW(n, t.x, t.y, t.z, t.w);
    }
  }
  updateMatrixWorld(t) {
    super.updateMatrixWorld(t), this.bindMode === hh ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === Wf ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  applyBoneTransform(t, e) {
    let n = this.skeleton, i = this.geometry;
    Lu.fromBufferAttribute(i.attributes.skinIndex, t), Uu.fromBufferAttribute(i.attributes.skinWeight, t), Iu.copy(e).applyMatrix4(this.bindMatrix), e.set(0, 0, 0);
    for (let r2 = 0; r2 < 4; r2++) {
      let o = Uu.getComponent(r2);
      if (o !== 0) {
        let a = Lu.getComponent(r2);
        Du.multiplyMatrices(n.bones[a].matrixWorld, n.boneInverses[a]), e.addScaledVector(yx.copy(Iu).applyMatrix4(Du), o);
      }
    }
    return e.applyMatrix4(this.bindMatrixInverse);
  }
};
r(zc, "SkinnedMesh");
var Ou = zc;
var kc = class kc2 extends le {
  constructor() {
    super(), this.isBone = true, this.type = "Bone";
  }
};
r(kc, "Bone");
var co = kc;
var Vc = class Vc2 extends be {
  constructor(t = null, e = 1, n = 1, i, r2, o, a, c, l = ge, h = ge, d, f) {
    super(null, o, a, c, l, h, i, r2, d, f), this.isDataTexture = true, this.image = { data: t, width: e, height: n }, this.generateMipmaps = false, this.flipY = false, this.unpackAlignment = 1;
  }
};
r(Vc, "DataTexture");
var as = Vc;
var Fu = new Ft();
var Mx = new Ft();
var Dr = class Dr2 {
  constructor(t = [], e = []) {
    this.uuid = Ve(), this.bones = t.slice(0), this.boneInverses = e, this.boneMatrices = null, this.boneTexture = null, this.init();
  }
  init() {
    let t = this.bones, e = this.boneInverses;
    if (this.boneMatrices = new Float32Array(t.length * 16), e.length === 0) this.calculateInverses();
    else if (t.length !== e.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
      for (let n = 0, i = this.bones.length; n < i; n++) this.boneInverses.push(new Ft());
    }
  }
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let t = 0, e = this.bones.length; t < e; t++) {
      let n = new Ft();
      this.bones[t] && n.copy(this.bones[t].matrixWorld).invert(), this.boneInverses.push(n);
    }
  }
  pose() {
    for (let t = 0, e = this.bones.length; t < e; t++) {
      let n = this.bones[t];
      n && n.matrixWorld.copy(this.boneInverses[t]).invert();
    }
    for (let t = 0, e = this.bones.length; t < e; t++) {
      let n = this.bones[t];
      n && (n.parent && n.parent.isBone ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld)) : n.matrix.copy(n.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale));
    }
  }
  update() {
    let t = this.bones, e = this.boneInverses, n = this.boneMatrices, i = this.boneTexture;
    for (let r2 = 0, o = t.length; r2 < o; r2++) {
      let a = t[r2] ? t[r2].matrixWorld : Mx;
      Fu.multiplyMatrices(a, e[r2]), Fu.toArray(n, r2 * 16);
    }
    i !== null && (i.needsUpdate = true);
  }
  clone() {
    return new Dr2(this.bones, this.boneInverses);
  }
  computeBoneTexture() {
    let t = Math.sqrt(this.bones.length * 4);
    t = Math.ceil(t / 4) * 4, t = Math.max(t, 4);
    let e = new Float32Array(t * t * 4);
    e.set(this.boneMatrices);
    let n = new as(e, t, t, Oe, ke);
    return n.needsUpdate = true, this.boneMatrices = e, this.boneTexture = n, this;
  }
  getBoneByName(t) {
    for (let e = 0, n = this.bones.length; e < n; e++) {
      let i = this.bones[e];
      if (i.name === t) return i;
    }
  }
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
  }
  fromJSON(t, e) {
    this.uuid = t.uuid;
    for (let n = 0, i = t.bones.length; n < i; n++) {
      let r2 = t.bones[n], o = e[r2];
      o === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", r2), o = new co()), this.bones.push(o), this.boneInverses.push(new Ft().fromArray(t.boneInverses[n]));
    }
    return this.init(), this;
  }
  toJSON() {
    let t = { metadata: { version: 4.6, type: "Skeleton", generator: "Skeleton.toJSON" }, bones: [], boneInverses: [] };
    t.uuid = this.uuid;
    let e = this.bones, n = this.boneInverses;
    for (let i = 0, r2 = e.length; i < r2; i++) {
      let o = e[i];
      t.bones.push(o.uuid);
      let a = n[i];
      t.boneInverses.push(a.toArray());
    }
    return t;
  }
};
r(Dr, "Skeleton");
var Bu = Dr;
var Hc = class Hc2 extends Se {
  constructor(t, e, n, i = 1) {
    super(t, e, n), this.isInstancedBufferAttribute = true, this.meshPerAttribute = i;
  }
  copy(t) {
    return super.copy(t), this.meshPerAttribute = t.meshPerAttribute, this;
  }
  toJSON() {
    let t = super.toJSON();
    return t.meshPerAttribute = this.meshPerAttribute, t.isInstancedBufferAttribute = true, t;
  }
};
r(Hc, "InstancedBufferAttribute");
var mr = Hc;
var _i = new Ft();
var zu = new Ft();
var Os = [];
var ku = new Ie();
var Sx = new Ft();
var qi = new Me();
var Yi = new Re();
var Gc = class Gc2 extends Me {
  constructor(t, e, n) {
    super(t, e), this.isInstancedMesh = true, this.instanceMatrix = new mr(new Float32Array(n * 16), 16), this.instanceColor = null, this.morphTexture = null, this.count = n, this.boundingBox = null, this.boundingSphere = null;
    for (let i = 0; i < n; i++) this.setMatrixAt(i, Sx);
  }
  computeBoundingBox() {
    let t = this.geometry, e = this.count;
    this.boundingBox === null && (this.boundingBox = new Ie()), t.boundingBox === null && t.computeBoundingBox(), this.boundingBox.makeEmpty();
    for (let n = 0; n < e; n++) this.getMatrixAt(n, _i), ku.copy(t.boundingBox).applyMatrix4(_i), this.boundingBox.union(ku);
  }
  computeBoundingSphere() {
    let t = this.geometry, e = this.count;
    this.boundingSphere === null && (this.boundingSphere = new Re()), t.boundingSphere === null && t.computeBoundingSphere(), this.boundingSphere.makeEmpty();
    for (let n = 0; n < e; n++) this.getMatrixAt(n, _i), Yi.copy(t.boundingSphere).applyMatrix4(_i), this.boundingSphere.union(Yi);
  }
  copy(t, e) {
    return super.copy(t, e), this.instanceMatrix.copy(t.instanceMatrix), t.instanceColor !== null && (this.instanceColor = t.instanceColor.clone()), this.count = t.count, t.boundingBox !== null && (this.boundingBox = t.boundingBox.clone()), t.boundingSphere !== null && (this.boundingSphere = t.boundingSphere.clone()), this;
  }
  getColorAt(t, e) {
    e.fromArray(this.instanceColor.array, t * 3);
  }
  getMatrixAt(t, e) {
    e.fromArray(this.instanceMatrix.array, t * 16);
  }
  getMorphAt(t, e) {
    let n = e.morphTargetInfluences, i = this.morphTexture.source.data.data, r2 = n.length + 1, o = t * r2 + 1;
    for (let a = 0; a < n.length; a++) n[a] = i[o + a];
  }
  raycast(t, e) {
    let n = this.matrixWorld, i = this.count;
    if (qi.geometry = this.geometry, qi.material = this.material, qi.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), Yi.copy(this.boundingSphere), Yi.applyMatrix4(n), t.ray.intersectsSphere(Yi) !== false)) for (let r2 = 0; r2 < i; r2++) {
      this.getMatrixAt(r2, _i), zu.multiplyMatrices(n, _i), qi.matrixWorld = zu, qi.raycast(t, Os);
      for (let o = 0, a = Os.length; o < a; o++) {
        let c = Os[o];
        c.instanceId = r2, c.object = this, e.push(c);
      }
      Os.length = 0;
    }
  }
  setColorAt(t, e) {
    this.instanceColor === null && (this.instanceColor = new mr(new Float32Array(this.instanceMatrix.count * 3), 3)), e.toArray(this.instanceColor.array, t * 3);
  }
  setMatrixAt(t, e) {
    e.toArray(this.instanceMatrix.array, t * 16);
  }
  setMorphAt(t, e) {
    let n = e.morphTargetInfluences, i = n.length + 1;
    this.morphTexture === null && (this.morphTexture = new as(new Float32Array(i * this.count), i, this.count, Fd, ke));
    let r2 = this.morphTexture.source.data.data, o = 0;
    for (let l = 0; l < n.length; l++) o += n[l];
    let a = this.geometry.morphTargetsRelative ? 1 : 1 - o, c = i * t;
    r2[c] = a, r2.set(n, c + 1);
  }
  updateMorphTargets() {
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
};
r(Gc, "InstancedMesh");
var Vu = Gc;
function bx(s, t) {
  return s.z - t.z;
}
r(bx, "sortOpaque");
function Ex(s, t) {
  return t.z - s.z;
}
r(Ex, "sortTransparent");
var Wc = class Wc2 {
  constructor() {
    this.index = 0, this.pool = [], this.list = [];
  }
  push(t, e) {
    let n = this.pool, i = this.list;
    this.index >= n.length && n.push({ start: -1, count: -1, z: -1 });
    let r2 = n[this.index];
    i.push(r2), this.index++, r2.start = t.start, r2.count = t.count, r2.z = e;
  }
  reset() {
    this.list.length = 0, this.index = 0;
  }
};
r(Wc, "MultiDrawRenderList");
var lo = Wc;
var xi = "batchId";
var yn = new Ft();
var Hu = new Ft();
var wx = new Ft();
var Gu = new Ft();
var Ta = new Di();
var Fs = new Ie();
var Gn = new Re();
var Zi = new P();
var Ra = new lo();
var ye = new Me();
var Bs = [];
function Ax(s, t, e = 0) {
  let n = t.itemSize;
  if (s.isInterleavedBufferAttribute || s.array.constructor !== t.array.constructor) {
    let i = s.count;
    for (let r2 = 0; r2 < i; r2++) for (let o = 0; o < n; o++) t.setComponent(r2 + e, o, s.getComponent(r2, o));
  } else t.array.set(s.array, e * n);
  t.needsUpdate = true;
}
r(Ax, "copyAttributeData");
var Xc = class Xc2 extends Me {
  get maxGeometryCount() {
    return this._maxGeometryCount;
  }
  constructor(t, e, n = e * 2, i) {
    super(new Le(), i), this.isBatchedMesh = true, this.perObjectFrustumCulled = true, this.sortObjects = true, this.boundingBox = null, this.boundingSphere = null, this.customSort = null, this._drawRanges = [], this._reservedRanges = [], this._visibility = [], this._active = [], this._bounds = [], this._maxGeometryCount = t, this._maxVertexCount = e, this._maxIndexCount = n, this._geometryInitialized = false, this._geometryCount = 0, this._multiDrawCounts = new Int32Array(t), this._multiDrawStarts = new Int32Array(t), this._multiDrawCount = 0, this._visibilityChanged = true, this._matricesTexture = null, this._initMatricesTexture();
  }
  _initMatricesTexture() {
    let t = Math.sqrt(this._maxGeometryCount * 4);
    t = Math.ceil(t / 4) * 4, t = Math.max(t, 4);
    let e = new Float32Array(t * t * 4), n = new as(e, t, t, Oe, ke);
    this._matricesTexture = n;
  }
  _initializeGeometry(t) {
    let e = this.geometry, n = this._maxVertexCount, i = this._maxGeometryCount, r2 = this._maxIndexCount;
    if (this._geometryInitialized === false) {
      for (let a in t.attributes) {
        let c = t.getAttribute(a), { array: l, itemSize: h, normalized: d } = c, f = new l.constructor(n * h), g = new c.constructor(f, h, d);
        g.setUsage(c.usage), e.setAttribute(a, g);
      }
      if (t.getIndex() !== null) {
        let a = n > 65536 ? new Uint32Array(r2) : new Uint16Array(r2);
        e.setIndex(new Se(a, 1));
      }
      let o = i > 65536 ? new Uint32Array(n) : new Uint16Array(n);
      e.setAttribute(xi, new Se(o, 1)), this._geometryInitialized = true;
    }
  }
  _validateGeometry(t) {
    if (t.getAttribute(xi)) throw new Error(`BatchedMesh: Geometry cannot use attribute "${xi}"`);
    let e = this.geometry;
    if (!!t.getIndex() != !!e.getIndex()) throw new Error('BatchedMesh: All geometries must consistently have "index".');
    for (let n in e.attributes) {
      if (n === xi) continue;
      if (!t.hasAttribute(n)) throw new Error(`BatchedMesh: Added geometry missing "${n}". All geometries must have consistent attributes.`);
      let i = t.getAttribute(n), r2 = e.getAttribute(n);
      if (i.itemSize !== r2.itemSize || i.normalized !== r2.normalized) throw new Error("BatchedMesh: All attributes must have a consistent itemSize and normalized value.");
    }
  }
  setCustomSort(t) {
    return this.customSort = t, this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Ie());
    let t = this._geometryCount, e = this.boundingBox, n = this._active;
    e.makeEmpty();
    for (let i = 0; i < t; i++) n[i] !== false && (this.getMatrixAt(i, yn), this.getBoundingBoxAt(i, Fs).applyMatrix4(yn), e.union(Fs));
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new Re());
    let t = this._geometryCount, e = this.boundingSphere, n = this._active;
    e.makeEmpty();
    for (let i = 0; i < t; i++) n[i] !== false && (this.getMatrixAt(i, yn), this.getBoundingSphereAt(i, Gn).applyMatrix4(yn), e.union(Gn));
  }
  addGeometry(t, e = -1, n = -1) {
    if (this._initializeGeometry(t), this._validateGeometry(t), this._geometryCount >= this._maxGeometryCount) throw new Error("BatchedMesh: Maximum geometry count reached.");
    let i = { vertexStart: -1, vertexCount: -1, indexStart: -1, indexCount: -1 }, r2 = null, o = this._reservedRanges, a = this._drawRanges, c = this._bounds;
    this._geometryCount !== 0 && (r2 = o[o.length - 1]), e === -1 ? i.vertexCount = t.getAttribute("position").count : i.vertexCount = e, r2 === null ? i.vertexStart = 0 : i.vertexStart = r2.vertexStart + r2.vertexCount;
    let l = t.getIndex(), h = l !== null;
    if (h && (n === -1 ? i.indexCount = l.count : i.indexCount = n, r2 === null ? i.indexStart = 0 : i.indexStart = r2.indexStart + r2.indexCount), i.indexStart !== -1 && i.indexStart + i.indexCount > this._maxIndexCount || i.vertexStart + i.vertexCount > this._maxVertexCount) throw new Error("BatchedMesh: Reserved space request exceeds the maximum buffer size.");
    let d = this._visibility, f = this._active, g = this._matricesTexture, _ = this._matricesTexture.image.data;
    d.push(true), f.push(true);
    let v = this._geometryCount;
    this._geometryCount++, wx.toArray(_, v * 16), g.needsUpdate = true, o.push(i), a.push({ start: h ? i.indexStart : i.vertexStart, count: -1 }), c.push({ boxInitialized: false, box: new Ie(), sphereInitialized: false, sphere: new Re() });
    let m = this.geometry.getAttribute(xi);
    for (let p = 0; p < i.vertexCount; p++) m.setX(i.vertexStart + p, v);
    return m.needsUpdate = true, this.setGeometryAt(v, t), v;
  }
  setGeometryAt(t, e) {
    if (t >= this._geometryCount) throw new Error("BatchedMesh: Maximum geometry count reached.");
    this._validateGeometry(e);
    let n = this.geometry, i = n.getIndex() !== null, r2 = n.getIndex(), o = e.getIndex(), a = this._reservedRanges[t];
    if (i && o.count > a.indexCount || e.attributes.position.count > a.vertexCount) throw new Error("BatchedMesh: Reserved space not large enough for provided geometry.");
    let c = a.vertexStart, l = a.vertexCount;
    for (let g in n.attributes) {
      if (g === xi) continue;
      let _ = e.getAttribute(g), v = n.getAttribute(g);
      Ax(_, v, c);
      let m = _.itemSize;
      for (let p = _.count, w = l; p < w; p++) {
        let x = c + p;
        for (let b = 0; b < m; b++) v.setComponent(x, b, 0);
      }
      v.needsUpdate = true;
    }
    if (i) {
      let g = a.indexStart;
      for (let _ = 0; _ < o.count; _++) r2.setX(g + _, c + o.getX(_));
      for (let _ = o.count, v = a.indexCount; _ < v; _++) r2.setX(g + _, c);
      r2.needsUpdate = true;
    }
    let h = this._bounds[t];
    e.boundingBox !== null ? (h.box.copy(e.boundingBox), h.boxInitialized = true) : h.boxInitialized = false, e.boundingSphere !== null ? (h.sphere.copy(e.boundingSphere), h.sphereInitialized = true) : h.sphereInitialized = false;
    let d = this._drawRanges[t], f = e.getAttribute("position");
    return d.count = i ? o.count : f.count, this._visibilityChanged = true, t;
  }
  deleteGeometry(t) {
    let e = this._active;
    return t >= e.length || e[t] === false ? this : (e[t] = false, this._visibilityChanged = true, this);
  }
  getBoundingBoxAt(t, e) {
    if (this._active[t] === false) return null;
    let i = this._bounds[t], r2 = i.box, o = this.geometry;
    if (i.boxInitialized === false) {
      r2.makeEmpty();
      let a = o.index, c = o.attributes.position, l = this._drawRanges[t];
      for (let h = l.start, d = l.start + l.count; h < d; h++) {
        let f = h;
        a && (f = a.getX(f)), r2.expandByPoint(Zi.fromBufferAttribute(c, f));
      }
      i.boxInitialized = true;
    }
    return e.copy(r2), e;
  }
  getBoundingSphereAt(t, e) {
    if (this._active[t] === false) return null;
    let i = this._bounds[t], r2 = i.sphere, o = this.geometry;
    if (i.sphereInitialized === false) {
      r2.makeEmpty(), this.getBoundingBoxAt(t, Fs), Fs.getCenter(r2.center);
      let a = o.index, c = o.attributes.position, l = this._drawRanges[t], h = 0;
      for (let d = l.start, f = l.start + l.count; d < f; d++) {
        let g = d;
        a && (g = a.getX(g)), Zi.fromBufferAttribute(c, g), h = Math.max(h, r2.center.distanceToSquared(Zi));
      }
      r2.radius = Math.sqrt(h), i.sphereInitialized = true;
    }
    return e.copy(r2), e;
  }
  setMatrixAt(t, e) {
    let n = this._active, i = this._matricesTexture, r2 = this._matricesTexture.image.data, o = this._geometryCount;
    return t >= o || n[t] === false ? this : (e.toArray(r2, t * 16), i.needsUpdate = true, this);
  }
  getMatrixAt(t, e) {
    let n = this._active, i = this._matricesTexture.image.data, r2 = this._geometryCount;
    return t >= r2 || n[t] === false ? null : e.fromArray(i, t * 16);
  }
  setVisibleAt(t, e) {
    let n = this._visibility, i = this._active, r2 = this._geometryCount;
    return t >= r2 || i[t] === false || n[t] === e ? this : (n[t] = e, this._visibilityChanged = true, this);
  }
  getVisibleAt(t) {
    let e = this._visibility, n = this._active, i = this._geometryCount;
    return t >= i || n[t] === false ? false : e[t];
  }
  raycast(t, e) {
    let n = this._visibility, i = this._active, r2 = this._drawRanges, o = this._geometryCount, a = this.matrixWorld, c = this.geometry;
    ye.material = this.material, ye.geometry.index = c.index, ye.geometry.attributes = c.attributes, ye.geometry.boundingBox === null && (ye.geometry.boundingBox = new Ie()), ye.geometry.boundingSphere === null && (ye.geometry.boundingSphere = new Re());
    for (let l = 0; l < o; l++) {
      if (!n[l] || !i[l]) continue;
      let h = r2[l];
      ye.geometry.setDrawRange(h.start, h.count), this.getMatrixAt(l, ye.matrixWorld).premultiply(a), this.getBoundingBoxAt(l, ye.geometry.boundingBox), this.getBoundingSphereAt(l, ye.geometry.boundingSphere), ye.raycast(t, Bs);
      for (let d = 0, f = Bs.length; d < f; d++) {
        let g = Bs[d];
        g.object = this, g.batchId = l, e.push(g);
      }
      Bs.length = 0;
    }
    ye.material = null, ye.geometry.index = null, ye.geometry.attributes = {}, ye.geometry.setDrawRange(0, 1 / 0);
  }
  copy(t) {
    return super.copy(t), this.geometry = t.geometry.clone(), this.perObjectFrustumCulled = t.perObjectFrustumCulled, this.sortObjects = t.sortObjects, this.boundingBox = t.boundingBox !== null ? t.boundingBox.clone() : null, this.boundingSphere = t.boundingSphere !== null ? t.boundingSphere.clone() : null, this._drawRanges = t._drawRanges.map((e) => ({ ...e })), this._reservedRanges = t._reservedRanges.map((e) => ({ ...e })), this._visibility = t._visibility.slice(), this._active = t._active.slice(), this._bounds = t._bounds.map((e) => ({ boxInitialized: e.boxInitialized, box: e.box.clone(), sphereInitialized: e.sphereInitialized, sphere: e.sphere.clone() })), this._maxGeometryCount = t._maxGeometryCount, this._maxVertexCount = t._maxVertexCount, this._maxIndexCount = t._maxIndexCount, this._geometryInitialized = t._geometryInitialized, this._geometryCount = t._geometryCount, this._multiDrawCounts = t._multiDrawCounts.slice(), this._multiDrawStarts = t._multiDrawStarts.slice(), this._matricesTexture = t._matricesTexture.clone(), this._matricesTexture.image.data = this._matricesTexture.image.slice(), this;
  }
  dispose() {
    return this.geometry.dispose(), this._matricesTexture.dispose(), this._matricesTexture = null, this;
  }
  onBeforeRender(t, e, n, i, r2) {
    if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects) return;
    let o = i.getIndex(), a = o === null ? 1 : o.array.BYTES_PER_ELEMENT, c = this._active, l = this._visibility, h = this._multiDrawStarts, d = this._multiDrawCounts, f = this._drawRanges, g = this.perObjectFrustumCulled;
    g && (Gu.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse).multiply(this.matrixWorld), Ta.setFromProjectionMatrix(Gu, t.coordinateSystem));
    let _ = 0;
    if (this.sortObjects) {
      Hu.copy(this.matrixWorld).invert(), Zi.setFromMatrixPosition(n.matrixWorld).applyMatrix4(Hu);
      for (let p = 0, w = l.length; p < w; p++) if (l[p] && c[p]) {
        this.getMatrixAt(p, yn), this.getBoundingSphereAt(p, Gn).applyMatrix4(yn);
        let x = false;
        if (g && (x = !Ta.intersectsSphere(Gn)), !x) {
          let b = Zi.distanceTo(Gn.center);
          Ra.push(f[p], b);
        }
      }
      let v = Ra.list, m = this.customSort;
      m === null ? v.sort(r2.transparent ? Ex : bx) : m.call(this, v, n);
      for (let p = 0, w = v.length; p < w; p++) {
        let x = v[p];
        h[_] = x.start * a, d[_] = x.count, _++;
      }
      Ra.reset();
    } else for (let v = 0, m = l.length; v < m; v++) if (l[v] && c[v]) {
      let p = false;
      if (g && (this.getMatrixAt(v, yn), this.getBoundingSphereAt(v, Gn).applyMatrix4(yn), p = !Ta.intersectsSphere(Gn)), !p) {
        let w = f[v];
        h[_] = w.start * a, d[_] = w.count, _++;
      }
    }
    this._multiDrawCount = _, this._visibilityChanged = false;
  }
  onBeforeShadow(t, e, n, i, r2, o) {
    this.onBeforeRender(t, null, i, r2, o);
  }
};
r(Xc, "BatchedMesh");
var Wu = Xc;
var qc = class qc2 extends je {
  constructor(t) {
    super(), this.isLineBasicMaterial = true, this.type = "LineBasicMaterial", this.color = new Vt(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = true, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.map = t.map, this.linewidth = t.linewidth, this.linecap = t.linecap, this.linejoin = t.linejoin, this.fog = t.fog, this;
  }
};
r(qc, "LineBasicMaterial");
var ho = qc;
var Xu = new P();
var qu = new P();
var Yu = new Ft();
var Ca = new Kn();
var zs = new Re();
var Yc = class Yc2 extends le {
  constructor(t = new Le(), e = new ho()) {
    super(), this.isLine = true, this.type = "Line", this.geometry = t, this.material = e, this.updateMorphTargets();
  }
  copy(t, e) {
    return super.copy(t, e), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this;
  }
  computeLineDistances() {
    let t = this.geometry;
    if (t.index === null) {
      let e = t.attributes.position, n = [0];
      for (let i = 1, r2 = e.count; i < r2; i++) Xu.fromBufferAttribute(e, i - 1), qu.fromBufferAttribute(e, i), n[i] = n[i - 1], n[i] += Xu.distanceTo(qu);
      t.setAttribute("lineDistance", new ce(n, 1));
    } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  raycast(t, e) {
    let n = this.geometry, i = this.matrixWorld, r2 = t.params.Line.threshold, o = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), zs.copy(n.boundingSphere), zs.applyMatrix4(i), zs.radius += r2, t.ray.intersectsSphere(zs) === false) return;
    Yu.copy(i).invert(), Ca.copy(t.ray).applyMatrix4(Yu);
    let a = r2 / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = a * a, l = new P(), h = new P(), d = new P(), f = new P(), g = this.isLineSegments ? 2 : 1, _ = n.index, m = n.attributes.position;
    if (_ !== null) {
      let p = Math.max(0, o.start), w = Math.min(_.count, o.start + o.count);
      for (let x = p, b = w - 1; x < b; x += g) {
        let L = _.getX(x), C = _.getX(x + 1);
        if (l.fromBufferAttribute(m, L), h.fromBufferAttribute(m, C), Ca.distanceSqToSegment(l, h, f, d) > c) continue;
        f.applyMatrix4(this.matrixWorld);
        let D = t.ray.origin.distanceTo(f);
        D < t.near || D > t.far || e.push({ distance: D, point: d.clone().applyMatrix4(this.matrixWorld), index: x, face: null, faceIndex: null, object: this });
      }
    } else {
      let p = Math.max(0, o.start), w = Math.min(m.count, o.start + o.count);
      for (let x = p, b = w - 1; x < b; x += g) {
        if (l.fromBufferAttribute(m, x), h.fromBufferAttribute(m, x + 1), Ca.distanceSqToSegment(l, h, f, d) > c) continue;
        f.applyMatrix4(this.matrixWorld);
        let C = t.ray.origin.distanceTo(f);
        C < t.near || C > t.far || e.push({ distance: C, point: d.clone().applyMatrix4(this.matrixWorld), index: x, face: null, faceIndex: null, object: this });
      }
    }
  }
  updateMorphTargets() {
    let e = this.geometry.morphAttributes, n = Object.keys(e);
    if (n.length > 0) {
      let i = e[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let r2 = 0, o = i.length; r2 < o; r2++) {
          let a = i[r2].name || String(r2);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = r2;
        }
      }
    }
  }
};
r(Yc, "Line");
var gr = Yc;
var Zu = new P();
var Ju = new P();
var Zc = class Zc2 extends gr {
  constructor(t, e) {
    super(t, e), this.isLineSegments = true, this.type = "LineSegments";
  }
  computeLineDistances() {
    let t = this.geometry;
    if (t.index === null) {
      let e = t.attributes.position, n = [];
      for (let i = 0, r2 = e.count; i < r2; i += 2) Zu.fromBufferAttribute(e, i), Ju.fromBufferAttribute(e, i + 1), n[i] = i === 0 ? 0 : n[i - 1], n[i + 1] = n[i] + Zu.distanceTo(Ju);
      t.setAttribute("lineDistance", new ce(n, 1));
    } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
};
r(Zc, "LineSegments");
var $u = Zc;
var Jc = class Jc2 extends gr {
  constructor(t, e) {
    super(t, e), this.isLineLoop = true, this.type = "LineLoop";
  }
};
r(Jc, "LineLoop");
var Ku = Jc;
var $c = class $c2 extends je {
  constructor(t) {
    super(), this.isPointsMaterial = true, this.type = "PointsMaterial", this.color = new Vt(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = true, this.fog = true, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.map = t.map, this.alphaMap = t.alphaMap, this.size = t.size, this.sizeAttenuation = t.sizeAttenuation, this.fog = t.fog, this;
  }
};
r($c, "PointsMaterial");
var uo = $c;
var Qu = new Ft();
var fo = new Kn();
var ks = new Re();
var Vs = new P();
var Kc = class Kc2 extends le {
  constructor(t = new Le(), e = new uo()) {
    super(), this.isPoints = true, this.type = "Points", this.geometry = t, this.material = e, this.updateMorphTargets();
  }
  copy(t, e) {
    return super.copy(t, e), this.material = Array.isArray(t.material) ? t.material.slice() : t.material, this.geometry = t.geometry, this;
  }
  raycast(t, e) {
    let n = this.geometry, i = this.matrixWorld, r2 = t.params.Points.threshold, o = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), ks.copy(n.boundingSphere), ks.applyMatrix4(i), ks.radius += r2, t.ray.intersectsSphere(ks) === false) return;
    Qu.copy(i).invert(), fo.copy(t.ray).applyMatrix4(Qu);
    let a = r2 / ((this.scale.x + this.scale.y + this.scale.z) / 3), c = a * a, l = n.index, d = n.attributes.position;
    if (l !== null) {
      let f = Math.max(0, o.start), g = Math.min(l.count, o.start + o.count);
      for (let _ = f, v = g; _ < v; _++) {
        let m = l.getX(_);
        Vs.fromBufferAttribute(d, m), td(Vs, m, c, i, t, e, this);
      }
    } else {
      let f = Math.max(0, o.start), g = Math.min(d.count, o.start + o.count);
      for (let _ = f, v = g; _ < v; _++) Vs.fromBufferAttribute(d, _), td(Vs, _, c, i, t, e, this);
    }
  }
  updateMorphTargets() {
    let e = this.geometry.morphAttributes, n = Object.keys(e);
    if (n.length > 0) {
      let i = e[n[0]];
      if (i !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let r2 = 0, o = i.length; r2 < o; r2++) {
          let a = i[r2].name || String(r2);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = r2;
        }
      }
    }
  }
};
r(Kc, "Points");
var ju = Kc;
function td(s, t, e, n, i, r2, o) {
  let a = fo.distanceSqToPoint(s);
  if (a < e) {
    let c = new P();
    fo.closestPointToPoint(s, c), c.applyMatrix4(n);
    let l = i.ray.origin.distanceTo(c);
    if (l < i.near || l > i.far) return;
    r2.push({ distance: l, distanceToRay: Math.sqrt(a), point: c, index: t, face: null, object: o });
  }
}
r(td, "testPoint");
var Qc = class Qc2 extends be {
  constructor(t, e, n, i, r2, o, a, c, l, h, d, f) {
    super(null, o, a, c, l, h, i, r2, d, f), this.isCompressedTexture = true, this.image = { width: e, height: n }, this.mipmaps = t, this.flipY = false, this.generateMipmaps = false;
  }
};
r(Qc, "CompressedTexture");
var ed = Qc;
var jc = class jc2 extends be {
  constructor(t, e, n, i, r2, o, a, c, l) {
    super(t, e, n, i, r2, o, a, c, l), this.isCanvasTexture = true, this.needsUpdate = true;
  }
};
r(jc, "CanvasTexture");
var nd = jc;
var tl = class tl2 {
  constructor() {
    this.type = "Curve", this.arcLengthDivisions = 200;
  }
  getPoint() {
    return console.warn("THREE.Curve: .getPoint() not implemented."), null;
  }
  getPointAt(t, e) {
    let n = this.getUtoTmapping(t);
    return this.getPoint(n, e);
  }
  getPoints(t = 5) {
    let e = [];
    for (let n = 0; n <= t; n++) e.push(this.getPoint(n / t));
    return e;
  }
  getSpacedPoints(t = 5) {
    let e = [];
    for (let n = 0; n <= t; n++) e.push(this.getPointAt(n / t));
    return e;
  }
  getLength() {
    let t = this.getLengths();
    return t[t.length - 1];
  }
  getLengths(t = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate) return this.cacheArcLengths;
    this.needsUpdate = false;
    let e = [], n, i = this.getPoint(0), r2 = 0;
    e.push(0);
    for (let o = 1; o <= t; o++) n = this.getPoint(o / t), r2 += n.distanceTo(i), e.push(r2), i = n;
    return this.cacheArcLengths = e, e;
  }
  updateArcLengths() {
    this.needsUpdate = true, this.getLengths();
  }
  getUtoTmapping(t, e) {
    let n = this.getLengths(), i = 0, r2 = n.length, o;
    e ? o = e : o = t * n[r2 - 1];
    let a = 0, c = r2 - 1, l;
    for (; a <= c; ) if (i = Math.floor(a + (c - a) / 2), l = n[i] - o, l < 0) a = i + 1;
    else if (l > 0) c = i - 1;
    else {
      c = i;
      break;
    }
    if (i = c, n[i] === o) return i / (r2 - 1);
    let h = n[i], f = n[i + 1] - h, g = (o - h) / f;
    return (i + g) / (r2 - 1);
  }
  getTangent(t, e) {
    let i = t - 1e-4, r2 = t + 1e-4;
    i < 0 && (i = 0), r2 > 1 && (r2 = 1);
    let o = this.getPoint(i), a = this.getPoint(r2), c = e || (o.isVector2 ? new lt() : new P());
    return c.copy(a).sub(o).normalize(), c;
  }
  getTangentAt(t, e) {
    let n = this.getUtoTmapping(t);
    return this.getTangent(n, e);
  }
  computeFrenetFrames(t, e) {
    let n = new P(), i = [], r2 = [], o = [], a = new P(), c = new Ft();
    for (let g = 0; g <= t; g++) {
      let _ = g / t;
      i[g] = this.getTangentAt(_, new P());
    }
    r2[0] = new P(), o[0] = new P();
    let l = Number.MAX_VALUE, h = Math.abs(i[0].x), d = Math.abs(i[0].y), f = Math.abs(i[0].z);
    h <= l && (l = h, n.set(1, 0, 0)), d <= l && (l = d, n.set(0, 1, 0)), f <= l && n.set(0, 0, 1), a.crossVectors(i[0], n).normalize(), r2[0].crossVectors(i[0], a), o[0].crossVectors(i[0], r2[0]);
    for (let g = 1; g <= t; g++) {
      if (r2[g] = r2[g - 1].clone(), o[g] = o[g - 1].clone(), a.crossVectors(i[g - 1], i[g]), a.length() > Number.EPSILON) {
        a.normalize();
        let _ = Math.acos(pe(i[g - 1].dot(i[g]), -1, 1));
        r2[g].applyMatrix4(c.makeRotationAxis(a, _));
      }
      o[g].crossVectors(i[g], r2[g]);
    }
    if (e === true) {
      let g = Math.acos(pe(r2[0].dot(r2[t]), -1, 1));
      g /= t, i[0].dot(a.crossVectors(r2[0], r2[t])) > 0 && (g = -g);
      for (let _ = 1; _ <= t; _++) r2[_].applyMatrix4(c.makeRotationAxis(i[_], g * _)), o[_].crossVectors(i[_], r2[_]);
    }
    return { tangents: i, normals: r2, binormals: o };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(t) {
    return this.arcLengthDivisions = t.arcLengthDivisions, this;
  }
  toJSON() {
    let t = { metadata: { version: 4.6, type: "Curve", generator: "Curve.toJSON" } };
    return t.arcLengthDivisions = this.arcLengthDivisions, t.type = this.type, t;
  }
  fromJSON(t) {
    return this.arcLengthDivisions = t.arcLengthDivisions, this;
  }
};
r(tl, "Curve");
var He = tl;
var el = class el2 extends He {
  constructor(t = 0, e = 0, n = 1, i = 1, r2 = 0, o = Math.PI * 2, a = false, c = 0) {
    super(), this.isEllipseCurve = true, this.type = "EllipseCurve", this.aX = t, this.aY = e, this.xRadius = n, this.yRadius = i, this.aStartAngle = r2, this.aEndAngle = o, this.aClockwise = a, this.aRotation = c;
  }
  getPoint(t, e = new lt()) {
    let n = e, i = Math.PI * 2, r2 = this.aEndAngle - this.aStartAngle, o = Math.abs(r2) < Number.EPSILON;
    for (; r2 < 0; ) r2 += i;
    for (; r2 > i; ) r2 -= i;
    r2 < Number.EPSILON && (o ? r2 = 0 : r2 = i), this.aClockwise === true && !o && (r2 === i ? r2 = -i : r2 = r2 - i);
    let a = this.aStartAngle + t * r2, c = this.aX + this.xRadius * Math.cos(a), l = this.aY + this.yRadius * Math.sin(a);
    if (this.aRotation !== 0) {
      let h = Math.cos(this.aRotation), d = Math.sin(this.aRotation), f = c - this.aX, g = l - this.aY;
      c = f * h - g * d + this.aX, l = f * d + g * h + this.aY;
    }
    return n.set(c, l);
  }
  copy(t) {
    return super.copy(t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this;
  }
  toJSON() {
    let t = super.toJSON();
    return t.aX = this.aX, t.aY = this.aY, t.xRadius = this.xRadius, t.yRadius = this.yRadius, t.aStartAngle = this.aStartAngle, t.aEndAngle = this.aEndAngle, t.aClockwise = this.aClockwise, t.aRotation = this.aRotation, t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this;
  }
};
r(el, "EllipseCurve");
var os = el;
var nl = class nl2 extends os {
  constructor(t, e, n, i, r2, o) {
    super(t, e, n, n, i, r2, o), this.isArcCurve = true, this.type = "ArcCurve";
  }
};
r(nl, "ArcCurve");
var po = nl;
function Ho() {
  let s = 0, t = 0, e = 0, n = 0;
  function i(r2, o, a, c) {
    s = r2, t = a, e = -3 * r2 + 3 * o - 2 * a - c, n = 2 * r2 - 2 * o + a + c;
  }
  return r(i, "init"), { initCatmullRom: function(r2, o, a, c, l) {
    i(o, a, l * (a - r2), l * (c - o));
  }, initNonuniformCatmullRom: function(r2, o, a, c, l, h, d) {
    let f = (o - r2) / l - (a - r2) / (l + h) + (a - o) / h, g = (a - o) / h - (c - o) / (h + d) + (c - a) / d;
    f *= h, g *= h, i(o, a, f, g);
  }, calc: function(r2) {
    let o = r2 * r2, a = o * r2;
    return s + t * r2 + e * o + n * a;
  } };
}
r(Ho, "CubicPoly");
var Hs = new P();
var Pa = new Ho();
var Ia = new Ho();
var La = new Ho();
var il = class il2 extends He {
  constructor(t = [], e = false, n = "centripetal", i = 0.5) {
    super(), this.isCatmullRomCurve3 = true, this.type = "CatmullRomCurve3", this.points = t, this.closed = e, this.curveType = n, this.tension = i;
  }
  getPoint(t, e = new P()) {
    let n = e, i = this.points, r2 = i.length, o = (r2 - (this.closed ? 0 : 1)) * t, a = Math.floor(o), c = o - a;
    this.closed ? a += a > 0 ? 0 : (Math.floor(Math.abs(a) / r2) + 1) * r2 : c === 0 && a === r2 - 1 && (a = r2 - 2, c = 1);
    let l, h;
    this.closed || a > 0 ? l = i[(a - 1) % r2] : (Hs.subVectors(i[0], i[1]).add(i[0]), l = Hs);
    let d = i[a % r2], f = i[(a + 1) % r2];
    if (this.closed || a + 2 < r2 ? h = i[(a + 2) % r2] : (Hs.subVectors(i[r2 - 1], i[r2 - 2]).add(i[r2 - 1]), h = Hs), this.curveType === "centripetal" || this.curveType === "chordal") {
      let g = this.curveType === "chordal" ? 0.5 : 0.25, _ = Math.pow(l.distanceToSquared(d), g), v = Math.pow(d.distanceToSquared(f), g), m = Math.pow(f.distanceToSquared(h), g);
      v < 1e-4 && (v = 1), _ < 1e-4 && (_ = v), m < 1e-4 && (m = v), Pa.initNonuniformCatmullRom(l.x, d.x, f.x, h.x, _, v, m), Ia.initNonuniformCatmullRom(l.y, d.y, f.y, h.y, _, v, m), La.initNonuniformCatmullRom(l.z, d.z, f.z, h.z, _, v, m);
    } else this.curveType === "catmullrom" && (Pa.initCatmullRom(l.x, d.x, f.x, h.x, this.tension), Ia.initCatmullRom(l.y, d.y, f.y, h.y, this.tension), La.initCatmullRom(l.z, d.z, f.z, h.z, this.tension));
    return n.set(Pa.calc(c), Ia.calc(c), La.calc(c)), n;
  }
  copy(t) {
    super.copy(t), this.points = [];
    for (let e = 0, n = t.points.length; e < n; e++) {
      let i = t.points[e];
      this.points.push(i.clone());
    }
    return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this;
  }
  toJSON() {
    let t = super.toJSON();
    t.points = [];
    for (let e = 0, n = this.points.length; e < n; e++) {
      let i = this.points[e];
      t.points.push(i.toArray());
    }
    return t.closed = this.closed, t.curveType = this.curveType, t.tension = this.tension, t;
  }
  fromJSON(t) {
    super.fromJSON(t), this.points = [];
    for (let e = 0, n = t.points.length; e < n; e++) {
      let i = t.points[e];
      this.points.push(new P().fromArray(i));
    }
    return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this;
  }
};
r(il, "CatmullRomCurve3");
var mo = il;
function id(s, t, e, n, i) {
  let r2 = (n - t) * 0.5, o = (i - e) * 0.5, a = s * s, c = s * a;
  return (2 * e - 2 * n + r2 + o) * c + (-3 * e + 3 * n - 2 * r2 - o) * a + r2 * s + e;
}
r(id, "CatmullRom");
function Tx(s, t) {
  let e = 1 - s;
  return e * e * t;
}
r(Tx, "QuadraticBezierP0");
function Rx(s, t) {
  return 2 * (1 - s) * s * t;
}
r(Rx, "QuadraticBezierP1");
function Cx(s, t) {
  return s * s * t;
}
r(Cx, "QuadraticBezierP2");
function Qi(s, t, e, n) {
  return Tx(s, t) + Rx(s, e) + Cx(s, n);
}
r(Qi, "QuadraticBezier");
function Px(s, t) {
  let e = 1 - s;
  return e * e * e * t;
}
r(Px, "CubicBezierP0");
function Ix(s, t) {
  let e = 1 - s;
  return 3 * e * e * s * t;
}
r(Ix, "CubicBezierP1");
function Lx(s, t) {
  return 3 * (1 - s) * s * s * t;
}
r(Lx, "CubicBezierP2");
function Ux(s, t) {
  return s * s * s * t;
}
r(Ux, "CubicBezierP3");
function ji(s, t, e, n, i) {
  return Px(s, t) + Ix(s, e) + Lx(s, n) + Ux(s, i);
}
r(ji, "CubicBezier");
var sl = class sl2 extends He {
  constructor(t = new lt(), e = new lt(), n = new lt(), i = new lt()) {
    super(), this.isCubicBezierCurve = true, this.type = "CubicBezierCurve", this.v0 = t, this.v1 = e, this.v2 = n, this.v3 = i;
  }
  getPoint(t, e = new lt()) {
    let n = e, i = this.v0, r2 = this.v1, o = this.v2, a = this.v3;
    return n.set(ji(t, i.x, r2.x, o.x, a.x), ji(t, i.y, r2.y, o.y, a.y)), n;
  }
  copy(t) {
    return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
  }
  toJSON() {
    let t = super.toJSON();
    return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
  }
};
r(sl, "CubicBezierCurve");
var _r = sl;
var rl = class rl2 extends He {
  constructor(t = new P(), e = new P(), n = new P(), i = new P()) {
    super(), this.isCubicBezierCurve3 = true, this.type = "CubicBezierCurve3", this.v0 = t, this.v1 = e, this.v2 = n, this.v3 = i;
  }
  getPoint(t, e = new P()) {
    let n = e, i = this.v0, r2 = this.v1, o = this.v2, a = this.v3;
    return n.set(ji(t, i.x, r2.x, o.x, a.x), ji(t, i.y, r2.y, o.y, a.y), ji(t, i.z, r2.z, o.z, a.z)), n;
  }
  copy(t) {
    return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this;
  }
  toJSON() {
    let t = super.toJSON();
    return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this;
  }
};
r(rl, "CubicBezierCurve3");
var go = rl;
var al = class al2 extends He {
  constructor(t = new lt(), e = new lt()) {
    super(), this.isLineCurve = true, this.type = "LineCurve", this.v1 = t, this.v2 = e;
  }
  getPoint(t, e = new lt()) {
    let n = e;
    return t === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n;
  }
  getPointAt(t, e) {
    return this.getPoint(t, e);
  }
  getTangent(t, e = new lt()) {
    return e.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(t, e) {
    return this.getTangent(t, e);
  }
  copy(t) {
    return super.copy(t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
  }
  toJSON() {
    let t = super.toJSON();
    return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
  }
};
r(al, "LineCurve");
var xr = al;
var ol = class ol2 extends He {
  constructor(t = new P(), e = new P()) {
    super(), this.isLineCurve3 = true, this.type = "LineCurve3", this.v1 = t, this.v2 = e;
  }
  getPoint(t, e = new P()) {
    let n = e;
    return t === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n;
  }
  getPointAt(t, e) {
    return this.getPoint(t, e);
  }
  getTangent(t, e = new P()) {
    return e.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(t, e) {
    return this.getTangent(t, e);
  }
  copy(t) {
    return super.copy(t), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
  }
  toJSON() {
    let t = super.toJSON();
    return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
  }
};
r(ol, "LineCurve3");
var _o = ol;
var cl = class cl2 extends He {
  constructor(t = new lt(), e = new lt(), n = new lt()) {
    super(), this.isQuadraticBezierCurve = true, this.type = "QuadraticBezierCurve", this.v0 = t, this.v1 = e, this.v2 = n;
  }
  getPoint(t, e = new lt()) {
    let n = e, i = this.v0, r2 = this.v1, o = this.v2;
    return n.set(Qi(t, i.x, r2.x, o.x), Qi(t, i.y, r2.y, o.y)), n;
  }
  copy(t) {
    return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
  }
  toJSON() {
    let t = super.toJSON();
    return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
  }
};
r(cl, "QuadraticBezierCurve");
var vr = cl;
var ll = class ll2 extends He {
  constructor(t = new P(), e = new P(), n = new P()) {
    super(), this.isQuadraticBezierCurve3 = true, this.type = "QuadraticBezierCurve3", this.v0 = t, this.v1 = e, this.v2 = n;
  }
  getPoint(t, e = new P()) {
    let n = e, i = this.v0, r2 = this.v1, o = this.v2;
    return n.set(Qi(t, i.x, r2.x, o.x), Qi(t, i.y, r2.y, o.y), Qi(t, i.z, r2.z, o.z)), n;
  }
  copy(t) {
    return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this;
  }
  toJSON() {
    let t = super.toJSON();
    return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this;
  }
};
r(ll, "QuadraticBezierCurve3");
var yr = ll;
var hl = class hl2 extends He {
  constructor(t = []) {
    super(), this.isSplineCurve = true, this.type = "SplineCurve", this.points = t;
  }
  getPoint(t, e = new lt()) {
    let n = e, i = this.points, r2 = (i.length - 1) * t, o = Math.floor(r2), a = r2 - o, c = i[o === 0 ? o : o - 1], l = i[o], h = i[o > i.length - 2 ? i.length - 1 : o + 1], d = i[o > i.length - 3 ? i.length - 1 : o + 2];
    return n.set(id(a, c.x, l.x, h.x, d.x), id(a, c.y, l.y, h.y, d.y)), n;
  }
  copy(t) {
    super.copy(t), this.points = [];
    for (let e = 0, n = t.points.length; e < n; e++) {
      let i = t.points[e];
      this.points.push(i.clone());
    }
    return this;
  }
  toJSON() {
    let t = super.toJSON();
    t.points = [];
    for (let e = 0, n = this.points.length; e < n; e++) {
      let i = this.points[e];
      t.points.push(i.toArray());
    }
    return t;
  }
  fromJSON(t) {
    super.fromJSON(t), this.points = [];
    for (let e = 0, n = t.points.length; e < n; e++) {
      let i = t.points[e];
      this.points.push(new lt().fromArray(i));
    }
    return this;
  }
};
r(hl, "SplineCurve");
var Mr = hl;
var Sr = Object.freeze({ __proto__: null, ArcCurve: po, CatmullRomCurve3: mo, CubicBezierCurve: _r, CubicBezierCurve3: go, EllipseCurve: os, LineCurve: xr, LineCurve3: _o, QuadraticBezierCurve: vr, QuadraticBezierCurve3: yr, SplineCurve: Mr });
var ul = class ul2 extends He {
  constructor() {
    super(), this.type = "CurvePath", this.curves = [], this.autoClose = false;
  }
  add(t) {
    this.curves.push(t);
  }
  closePath() {
    let t = this.curves[0].getPoint(0), e = this.curves[this.curves.length - 1].getPoint(1);
    if (!t.equals(e)) {
      let n = t.isVector2 === true ? "LineCurve" : "LineCurve3";
      this.curves.push(new Sr[n](e, t));
    }
    return this;
  }
  getPoint(t, e) {
    let n = t * this.getLength(), i = this.getCurveLengths(), r2 = 0;
    for (; r2 < i.length; ) {
      if (i[r2] >= n) {
        let o = i[r2] - n, a = this.curves[r2], c = a.getLength(), l = c === 0 ? 0 : 1 - o / c;
        return a.getPointAt(l, e);
      }
      r2++;
    }
    return null;
  }
  getLength() {
    let t = this.getCurveLengths();
    return t[t.length - 1];
  }
  updateArcLengths() {
    this.needsUpdate = true, this.cacheLengths = null, this.getCurveLengths();
  }
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths;
    let t = [], e = 0;
    for (let n = 0, i = this.curves.length; n < i; n++) e += this.curves[n].getLength(), t.push(e);
    return this.cacheLengths = t, t;
  }
  getSpacedPoints(t = 40) {
    let e = [];
    for (let n = 0; n <= t; n++) e.push(this.getPoint(n / t));
    return this.autoClose && e.push(e[0]), e;
  }
  getPoints(t = 12) {
    let e = [], n;
    for (let i = 0, r2 = this.curves; i < r2.length; i++) {
      let o = r2[i], a = o.isEllipseCurve ? t * 2 : o.isLineCurve || o.isLineCurve3 ? 1 : o.isSplineCurve ? t * o.points.length : t, c = o.getPoints(a);
      for (let l = 0; l < c.length; l++) {
        let h = c[l];
        n && n.equals(h) || (e.push(h), n = h);
      }
    }
    return this.autoClose && e.length > 1 && !e[e.length - 1].equals(e[0]) && e.push(e[0]), e;
  }
  copy(t) {
    super.copy(t), this.curves = [];
    for (let e = 0, n = t.curves.length; e < n; e++) {
      let i = t.curves[e];
      this.curves.push(i.clone());
    }
    return this.autoClose = t.autoClose, this;
  }
  toJSON() {
    let t = super.toJSON();
    t.autoClose = this.autoClose, t.curves = [];
    for (let e = 0, n = this.curves.length; e < n; e++) {
      let i = this.curves[e];
      t.curves.push(i.toJSON());
    }
    return t;
  }
  fromJSON(t) {
    super.fromJSON(t), this.autoClose = t.autoClose, this.curves = [];
    for (let e = 0, n = t.curves.length; e < n; e++) {
      let i = t.curves[e];
      this.curves.push(new Sr[i.type]().fromJSON(i));
    }
    return this;
  }
};
r(ul, "CurvePath");
var xo = ul;
var dl = class dl2 extends xo {
  constructor(t) {
    super(), this.type = "Path", this.currentPoint = new lt(), t && this.setFromPoints(t);
  }
  setFromPoints(t) {
    this.moveTo(t[0].x, t[0].y);
    for (let e = 1, n = t.length; e < n; e++) this.lineTo(t[e].x, t[e].y);
    return this;
  }
  moveTo(t, e) {
    return this.currentPoint.set(t, e), this;
  }
  lineTo(t, e) {
    let n = new xr(this.currentPoint.clone(), new lt(t, e));
    return this.curves.push(n), this.currentPoint.set(t, e), this;
  }
  quadraticCurveTo(t, e, n, i) {
    let r2 = new vr(this.currentPoint.clone(), new lt(t, e), new lt(n, i));
    return this.curves.push(r2), this.currentPoint.set(n, i), this;
  }
  bezierCurveTo(t, e, n, i, r2, o) {
    let a = new _r(this.currentPoint.clone(), new lt(t, e), new lt(n, i), new lt(r2, o));
    return this.curves.push(a), this.currentPoint.set(r2, o), this;
  }
  splineThru(t) {
    let e = [this.currentPoint.clone()].concat(t), n = new Mr(e);
    return this.curves.push(n), this.currentPoint.copy(t[t.length - 1]), this;
  }
  arc(t, e, n, i, r2, o) {
    let a = this.currentPoint.x, c = this.currentPoint.y;
    return this.absarc(t + a, e + c, n, i, r2, o), this;
  }
  absarc(t, e, n, i, r2, o) {
    return this.absellipse(t, e, n, n, i, r2, o), this;
  }
  ellipse(t, e, n, i, r2, o, a, c) {
    let l = this.currentPoint.x, h = this.currentPoint.y;
    return this.absellipse(t + l, e + h, n, i, r2, o, a, c), this;
  }
  absellipse(t, e, n, i, r2, o, a, c) {
    let l = new os(t, e, n, i, r2, o, a, c);
    if (this.curves.length > 0) {
      let d = l.getPoint(0);
      d.equals(this.currentPoint) || this.lineTo(d.x, d.y);
    }
    this.curves.push(l);
    let h = l.getPoint(1);
    return this.currentPoint.copy(h), this;
  }
  copy(t) {
    return super.copy(t), this.currentPoint.copy(t.currentPoint), this;
  }
  toJSON() {
    let t = super.toJSON();
    return t.currentPoint = this.currentPoint.toArray(), t;
  }
  fromJSON(t) {
    return super.fromJSON(t), this.currentPoint.fromArray(t.currentPoint), this;
  }
};
r(dl, "Path");
var br = dl;
var Nr = class Nr2 extends Le {
  constructor(t = 1, e = 1, n = 1, i = 32, r2 = 1, o = false, a = 0, c = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = { radiusTop: t, radiusBottom: e, height: n, radialSegments: i, heightSegments: r2, openEnded: o, thetaStart: a, thetaLength: c };
    let l = this;
    i = Math.floor(i), r2 = Math.floor(r2);
    let h = [], d = [], f = [], g = [], _ = 0, v = [], m = n / 2, p = 0;
    w(), o === false && (t > 0 && x(true), e > 0 && x(false)), this.setIndex(h), this.setAttribute("position", new ce(d, 3)), this.setAttribute("normal", new ce(f, 3)), this.setAttribute("uv", new ce(g, 2));
    function w() {
      let b = new P(), L = new P(), C = 0, R = (e - t) / n;
      for (let D = 0; D <= r2; D++) {
        let X = [], M = D / r2, A = M * (e - t) + t;
        for (let Q = 0; Q <= i; Q++) {
          let $ = Q / i, I = $ * c + a, G = Math.sin(I), k = Math.cos(I);
          L.x = A * G, L.y = -M * n + m, L.z = A * k, d.push(L.x, L.y, L.z), b.set(G, R, k).normalize(), f.push(b.x, b.y, b.z), g.push($, 1 - M), X.push(_++);
        }
        v.push(X);
      }
      for (let D = 0; D < i; D++) for (let X = 0; X < r2; X++) {
        let M = v[X][D], A = v[X + 1][D], Q = v[X + 1][D + 1], $ = v[X][D + 1];
        h.push(M, A, $), h.push(A, Q, $), C += 6;
      }
      l.addGroup(p, C, 0), p += C;
    }
    r(w, "generateTorso");
    function x(b) {
      let L = _, C = new lt(), R = new P(), D = 0, X = b === true ? t : e, M = b === true ? 1 : -1;
      for (let Q = 1; Q <= i; Q++) d.push(0, m * M, 0), f.push(0, M, 0), g.push(0.5, 0.5), _++;
      let A = _;
      for (let Q = 0; Q <= i; Q++) {
        let I = Q / i * c + a, G = Math.cos(I), k = Math.sin(I);
        R.x = X * k, R.y = m * M, R.z = X * G, d.push(R.x, R.y, R.z), f.push(0, M, 0), C.x = G * 0.5 + 0.5, C.y = k * 0.5 * M + 0.5, g.push(C.x, C.y), _++;
      }
      for (let Q = 0; Q < i; Q++) {
        let $ = L + Q, I = A + Q;
        b === true ? h.push(I, I + 1, $) : h.push(I + 1, I, $), D += 3;
      }
      l.addGroup(p, D, b === true ? 1 : 2), p += D;
    }
    r(x, "generateCap");
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  static fromJSON(t) {
    return new Nr2(t.radiusTop, t.radiusBottom, t.height, t.radialSegments, t.heightSegments, t.openEnded, t.thetaStart, t.thetaLength);
  }
};
r(Nr, "CylinderGeometry");
var sd = Nr;
var Gs = new P();
var Ws = new P();
var Ua = new P();
var Xs = new Zn();
var fl = class fl2 extends Le {
  constructor(t = null, e = 1) {
    if (super(), this.type = "EdgesGeometry", this.parameters = { geometry: t, thresholdAngle: e }, t !== null) {
      let i = Math.pow(10, 4), r2 = Math.cos(Ai * e), o = t.getIndex(), a = t.getAttribute("position"), c = o ? o.count : a.count, l = [0, 0, 0], h = ["a", "b", "c"], d = new Array(3), f = {}, g = [];
      for (let _ = 0; _ < c; _ += 3) {
        o ? (l[0] = o.getX(_), l[1] = o.getX(_ + 1), l[2] = o.getX(_ + 2)) : (l[0] = _, l[1] = _ + 1, l[2] = _ + 2);
        let { a: v, b: m, c: p } = Xs;
        if (v.fromBufferAttribute(a, l[0]), m.fromBufferAttribute(a, l[1]), p.fromBufferAttribute(a, l[2]), Xs.getNormal(Ua), d[0] = `${Math.round(v.x * i)},${Math.round(v.y * i)},${Math.round(v.z * i)}`, d[1] = `${Math.round(m.x * i)},${Math.round(m.y * i)},${Math.round(m.z * i)}`, d[2] = `${Math.round(p.x * i)},${Math.round(p.y * i)},${Math.round(p.z * i)}`, !(d[0] === d[1] || d[1] === d[2] || d[2] === d[0])) for (let w = 0; w < 3; w++) {
          let x = (w + 1) % 3, b = d[w], L = d[x], C = Xs[h[w]], R = Xs[h[x]], D = `${b}_${L}`, X = `${L}_${b}`;
          X in f && f[X] ? (Ua.dot(f[X].normal) <= r2 && (g.push(C.x, C.y, C.z), g.push(R.x, R.y, R.z)), f[X] = null) : D in f || (f[D] = { index0: l[w], index1: l[x], normal: Ua.clone() });
        }
      }
      for (let _ in f) if (f[_]) {
        let { index0: v, index1: m } = f[_];
        Gs.fromBufferAttribute(a, v), Ws.fromBufferAttribute(a, m), g.push(Gs.x, Gs.y, Gs.z), g.push(Ws.x, Ws.y, Ws.z);
      }
      this.setAttribute("position", new ce(g, 3));
    }
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
};
r(fl, "EdgesGeometry");
var rd = fl;
var pl = class pl2 extends br {
  constructor(t) {
    super(t), this.uuid = Ve(), this.type = "Shape", this.holes = [];
  }
  getPointsHoles(t) {
    let e = [];
    for (let n = 0, i = this.holes.length; n < i; n++) e[n] = this.holes[n].getPoints(t);
    return e;
  }
  extractPoints(t) {
    return { shape: this.getPoints(t), holes: this.getPointsHoles(t) };
  }
  copy(t) {
    super.copy(t), this.holes = [];
    for (let e = 0, n = t.holes.length; e < n; e++) {
      let i = t.holes[e];
      this.holes.push(i.clone());
    }
    return this;
  }
  toJSON() {
    let t = super.toJSON();
    t.uuid = this.uuid, t.holes = [];
    for (let e = 0, n = this.holes.length; e < n; e++) {
      let i = this.holes[e];
      t.holes.push(i.toJSON());
    }
    return t;
  }
  fromJSON(t) {
    super.fromJSON(t), this.uuid = t.uuid, this.holes = [];
    for (let e = 0, n = t.holes.length; e < n; e++) {
      let i = t.holes[e];
      this.holes.push(new br().fromJSON(i));
    }
    return this;
  }
};
r(pl, "Shape");
var vo = pl;
var Dx = { triangulate: function(s, t, e = 2) {
  let n = t && t.length, i = n ? t[0] * e : s.length, r2 = jd(s, 0, i, e, true), o = [];
  if (!r2 || r2.next === r2.prev) return o;
  let a, c, l, h, d, f, g;
  if (n && (r2 = zx(s, t, r2, e)), s.length > 80 * e) {
    a = l = s[0], c = h = s[1];
    for (let _ = e; _ < i; _ += e) d = s[_], f = s[_ + 1], d < a && (a = d), f < c && (c = f), d > l && (l = d), f > h && (h = f);
    g = Math.max(l - a, h - c), g = g !== 0 ? 32767 / g : 0;
  }
  return cs(r2, o, e, a, c, g, 0), o;
} };
function jd(s, t, e, n, i) {
  let r2, o;
  if (i === $x(s, t, e, n) > 0) for (r2 = t; r2 < e; r2 += n) o = ad(r2, s[r2], s[r2 + 1], o);
  else for (r2 = e - n; r2 >= t; r2 -= n) o = ad(r2, s[r2], s[r2 + 1], o);
  return o && Gr(o, o.next) && (hs(o), o = o.next), o;
}
r(jd, "linkedList");
function Qn(s, t) {
  if (!s) return s;
  t || (t = s);
  let e = s, n;
  do
    if (n = false, !e.steiner && (Gr(e, e.next) || se(e.prev, e, e.next) === 0)) {
      if (hs(e), e = t = e.prev, e === e.next) break;
      n = true;
    } else e = e.next;
  while (n || e !== t);
  return t;
}
r(Qn, "filterPoints");
function cs(s, t, e, n, i, r2, o) {
  if (!s) return;
  !o && r2 && Wx(s, n, i, r2);
  let a = s, c, l;
  for (; s.prev !== s.next; ) {
    if (c = s.prev, l = s.next, r2 ? Ox(s, n, i, r2) : Nx(s)) {
      t.push(c.i / e | 0), t.push(s.i / e | 0), t.push(l.i / e | 0), hs(s), s = l.next, a = l.next;
      continue;
    }
    if (s = l, s === a) {
      o ? o === 1 ? (s = Fx(Qn(s), t, e), cs(s, t, e, n, i, r2, 2)) : o === 2 && Bx(s, t, e, n, i, r2) : cs(Qn(s), t, e, n, i, r2, 1);
      break;
    }
  }
}
r(cs, "earcutLinked");
function Nx(s) {
  let t = s.prev, e = s, n = s.next;
  if (se(t, e, n) >= 0) return false;
  let i = t.x, r2 = e.x, o = n.x, a = t.y, c = e.y, l = n.y, h = i < r2 ? i < o ? i : o : r2 < o ? r2 : o, d = a < c ? a < l ? a : l : c < l ? c : l, f = i > r2 ? i > o ? i : o : r2 > o ? r2 : o, g = a > c ? a > l ? a : l : c > l ? c : l, _ = n.next;
  for (; _ !== t; ) {
    if (_.x >= h && _.x <= f && _.y >= d && _.y <= g && Si(i, a, r2, c, o, l, _.x, _.y) && se(_.prev, _, _.next) >= 0) return false;
    _ = _.next;
  }
  return true;
}
r(Nx, "isEar");
function Ox(s, t, e, n) {
  let i = s.prev, r2 = s, o = s.next;
  if (se(i, r2, o) >= 0) return false;
  let a = i.x, c = r2.x, l = o.x, h = i.y, d = r2.y, f = o.y, g = a < c ? a < l ? a : l : c < l ? c : l, _ = h < d ? h < f ? h : f : d < f ? d : f, v = a > c ? a > l ? a : l : c > l ? c : l, m = h > d ? h > f ? h : f : d > f ? d : f, p = yo(g, _, t, e, n), w = yo(v, m, t, e, n), x = s.prevZ, b = s.nextZ;
  for (; x && x.z >= p && b && b.z <= w; ) {
    if (x.x >= g && x.x <= v && x.y >= _ && x.y <= m && x !== i && x !== o && Si(a, h, c, d, l, f, x.x, x.y) && se(x.prev, x, x.next) >= 0 || (x = x.prevZ, b.x >= g && b.x <= v && b.y >= _ && b.y <= m && b !== i && b !== o && Si(a, h, c, d, l, f, b.x, b.y) && se(b.prev, b, b.next) >= 0)) return false;
    b = b.nextZ;
  }
  for (; x && x.z >= p; ) {
    if (x.x >= g && x.x <= v && x.y >= _ && x.y <= m && x !== i && x !== o && Si(a, h, c, d, l, f, x.x, x.y) && se(x.prev, x, x.next) >= 0) return false;
    x = x.prevZ;
  }
  for (; b && b.z <= w; ) {
    if (b.x >= g && b.x <= v && b.y >= _ && b.y <= m && b !== i && b !== o && Si(a, h, c, d, l, f, b.x, b.y) && se(b.prev, b, b.next) >= 0) return false;
    b = b.nextZ;
  }
  return true;
}
r(Ox, "isEarHashed");
function Fx(s, t, e) {
  let n = s;
  do {
    let i = n.prev, r2 = n.next.next;
    !Gr(i, r2) && tf(i, n, n.next, r2) && ls(i, r2) && ls(r2, i) && (t.push(i.i / e | 0), t.push(n.i / e | 0), t.push(r2.i / e | 0), hs(n), hs(n.next), n = s = r2), n = n.next;
  } while (n !== s);
  return Qn(n);
}
r(Fx, "cureLocalIntersections");
function Bx(s, t, e, n, i, r2) {
  let o = s;
  do {
    let a = o.next.next;
    for (; a !== o.prev; ) {
      if (o.i !== a.i && Yx(o, a)) {
        let c = ef(o, a);
        o = Qn(o, o.next), c = Qn(c, c.next), cs(o, t, e, n, i, r2, 0), cs(c, t, e, n, i, r2, 0);
        return;
      }
      a = a.next;
    }
    o = o.next;
  } while (o !== s);
}
r(Bx, "splitEarcut");
function zx(s, t, e, n) {
  let i = [], r2, o, a, c, l;
  for (r2 = 0, o = t.length; r2 < o; r2++) a = t[r2] * n, c = r2 < o - 1 ? t[r2 + 1] * n : s.length, l = jd(s, a, c, n, false), l === l.next && (l.steiner = true), i.push(qx(l));
  for (i.sort(kx), r2 = 0; r2 < i.length; r2++) e = Vx(i[r2], e);
  return e;
}
r(zx, "eliminateHoles");
function kx(s, t) {
  return s.x - t.x;
}
r(kx, "compareX");
function Vx(s, t) {
  let e = Hx(s, t);
  if (!e) return t;
  let n = ef(e, s);
  return Qn(n, n.next), Qn(e, e.next);
}
r(Vx, "eliminateHole");
function Hx(s, t) {
  let e = t, n = -1 / 0, i, r2 = s.x, o = s.y;
  do {
    if (o <= e.y && o >= e.next.y && e.next.y !== e.y) {
      let f = e.x + (o - e.y) * (e.next.x - e.x) / (e.next.y - e.y);
      if (f <= r2 && f > n && (n = f, i = e.x < e.next.x ? e : e.next, f === r2)) return i;
    }
    e = e.next;
  } while (e !== t);
  if (!i) return null;
  let a = i, c = i.x, l = i.y, h = 1 / 0, d;
  e = i;
  do
    r2 >= e.x && e.x >= c && r2 !== e.x && Si(o < l ? r2 : n, o, c, l, o < l ? n : r2, o, e.x, e.y) && (d = Math.abs(o - e.y) / (r2 - e.x), ls(e, s) && (d < h || d === h && (e.x > i.x || e.x === i.x && Gx(i, e))) && (i = e, h = d)), e = e.next;
  while (e !== a);
  return i;
}
r(Hx, "findHoleBridge");
function Gx(s, t) {
  return se(s.prev, s, t.prev) < 0 && se(t.next, s, s.next) < 0;
}
r(Gx, "sectorContainsSector");
function Wx(s, t, e, n) {
  let i = s;
  do
    i.z === 0 && (i.z = yo(i.x, i.y, t, e, n)), i.prevZ = i.prev, i.nextZ = i.next, i = i.next;
  while (i !== s);
  i.prevZ.nextZ = null, i.prevZ = null, Xx(i);
}
r(Wx, "indexCurve");
function Xx(s) {
  let t, e, n, i, r2, o, a, c, l = 1;
  do {
    for (e = s, s = null, r2 = null, o = 0; e; ) {
      for (o++, n = e, a = 0, t = 0; t < l && (a++, n = n.nextZ, !!n); t++) ;
      for (c = l; a > 0 || c > 0 && n; ) a !== 0 && (c === 0 || !n || e.z <= n.z) ? (i = e, e = e.nextZ, a--) : (i = n, n = n.nextZ, c--), r2 ? r2.nextZ = i : s = i, i.prevZ = r2, r2 = i;
      e = n;
    }
    r2.nextZ = null, l *= 2;
  } while (o > 1);
  return s;
}
r(Xx, "sortLinked");
function yo(s, t, e, n, i) {
  return s = (s - e) * i | 0, t = (t - n) * i | 0, s = (s | s << 8) & 16711935, s = (s | s << 4) & 252645135, s = (s | s << 2) & 858993459, s = (s | s << 1) & 1431655765, t = (t | t << 8) & 16711935, t = (t | t << 4) & 252645135, t = (t | t << 2) & 858993459, t = (t | t << 1) & 1431655765, s | t << 1;
}
r(yo, "zOrder");
function qx(s) {
  let t = s, e = s;
  do
    (t.x < e.x || t.x === e.x && t.y < e.y) && (e = t), t = t.next;
  while (t !== s);
  return e;
}
r(qx, "getLeftmost");
function Si(s, t, e, n, i, r2, o, a) {
  return (i - o) * (t - a) >= (s - o) * (r2 - a) && (s - o) * (n - a) >= (e - o) * (t - a) && (e - o) * (r2 - a) >= (i - o) * (n - a);
}
r(Si, "pointInTriangle");
function Yx(s, t) {
  return s.next.i !== t.i && s.prev.i !== t.i && !Zx(s, t) && (ls(s, t) && ls(t, s) && Jx(s, t) && (se(s.prev, s, t.prev) || se(s, t.prev, t)) || Gr(s, t) && se(s.prev, s, s.next) > 0 && se(t.prev, t, t.next) > 0);
}
r(Yx, "isValidDiagonal");
function se(s, t, e) {
  return (t.y - s.y) * (e.x - t.x) - (t.x - s.x) * (e.y - t.y);
}
r(se, "area");
function Gr(s, t) {
  return s.x === t.x && s.y === t.y;
}
r(Gr, "equals");
function tf(s, t, e, n) {
  let i = Ys(se(s, t, e)), r2 = Ys(se(s, t, n)), o = Ys(se(e, n, s)), a = Ys(se(e, n, t));
  return !!(i !== r2 && o !== a || i === 0 && qs(s, e, t) || r2 === 0 && qs(s, n, t) || o === 0 && qs(e, s, n) || a === 0 && qs(e, t, n));
}
r(tf, "intersects");
function qs(s, t, e) {
  return t.x <= Math.max(s.x, e.x) && t.x >= Math.min(s.x, e.x) && t.y <= Math.max(s.y, e.y) && t.y >= Math.min(s.y, e.y);
}
r(qs, "onSegment");
function Ys(s) {
  return s > 0 ? 1 : s < 0 ? -1 : 0;
}
r(Ys, "sign");
function Zx(s, t) {
  let e = s;
  do {
    if (e.i !== s.i && e.next.i !== s.i && e.i !== t.i && e.next.i !== t.i && tf(e, e.next, s, t)) return true;
    e = e.next;
  } while (e !== s);
  return false;
}
r(Zx, "intersectsPolygon");
function ls(s, t) {
  return se(s.prev, s, s.next) < 0 ? se(s, t, s.next) >= 0 && se(s, s.prev, t) >= 0 : se(s, t, s.prev) < 0 || se(s, s.next, t) < 0;
}
r(ls, "locallyInside");
function Jx(s, t) {
  let e = s, n = false, i = (s.x + t.x) / 2, r2 = (s.y + t.y) / 2;
  do
    e.y > r2 != e.next.y > r2 && e.next.y !== e.y && i < (e.next.x - e.x) * (r2 - e.y) / (e.next.y - e.y) + e.x && (n = !n), e = e.next;
  while (e !== s);
  return n;
}
r(Jx, "middleInside");
function ef(s, t) {
  let e = new Mo(s.i, s.x, s.y), n = new Mo(t.i, t.x, t.y), i = s.next, r2 = t.prev;
  return s.next = t, t.prev = s, e.next = i, i.prev = e, n.next = e, e.prev = n, r2.next = n, n.prev = r2, n;
}
r(ef, "splitPolygon");
function ad(s, t, e, n) {
  let i = new Mo(s, t, e);
  return n ? (i.next = n.next, i.prev = n, n.next.prev = i, n.next = i) : (i.prev = i, i.next = i), i;
}
r(ad, "insertNode");
function hs(s) {
  s.next.prev = s.prev, s.prev.next = s.next, s.prevZ && (s.prevZ.nextZ = s.nextZ), s.nextZ && (s.nextZ.prevZ = s.prevZ);
}
r(hs, "removeNode");
function Mo(s, t, e) {
  this.i = s, this.x = t, this.y = e, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = false;
}
r(Mo, "Node");
function $x(s, t, e, n) {
  let i = 0;
  for (let r2 = t, o = e - n; r2 < e; r2 += n) i += (s[o] - s[r2]) * (s[r2 + 1] + s[o + 1]), o = r2;
  return i;
}
r($x, "signedArea");
var Or = class Or2 {
  static area(t) {
    let e = t.length, n = 0;
    for (let i = e - 1, r2 = 0; r2 < e; i = r2++) n += t[i].x * t[r2].y - t[r2].x * t[i].y;
    return n * 0.5;
  }
  static isClockWise(t) {
    return Or2.area(t) < 0;
  }
  static triangulateShape(t, e) {
    let n = [], i = [], r2 = [];
    od(t), cd(n, t);
    let o = t.length;
    e.forEach(od);
    for (let c = 0; c < e.length; c++) i.push(o), o += e[c].length, cd(n, e[c]);
    let a = Dx.triangulate(n, i);
    for (let c = 0; c < a.length; c += 3) r2.push(a.slice(c, c + 3));
    return r2;
  }
};
r(Or, "ShapeUtils");
var ts = Or;
function od(s) {
  let t = s.length;
  t > 2 && s[t - 1].equals(s[0]) && s.pop();
}
r(od, "removeDupEndPts");
function cd(s, t) {
  for (let e = 0; e < t.length; e++) s.push(t[e].x), s.push(t[e].y);
}
r(cd, "addContour");
var Fr = class Fr2 extends Le {
  constructor(t = new vo([new lt(0.5, 0.5), new lt(-0.5, 0.5), new lt(-0.5, -0.5), new lt(0.5, -0.5)]), e = {}) {
    super(), this.type = "ExtrudeGeometry", this.parameters = { shapes: t, options: e }, t = Array.isArray(t) ? t : [t];
    let n = this, i = [], r2 = [];
    for (let a = 0, c = t.length; a < c; a++) {
      let l = t[a];
      o(l);
    }
    this.setAttribute("position", new ce(i, 3)), this.setAttribute("uv", new ce(r2, 2)), this.computeVertexNormals();
    function o(a) {
      let c = [], l = e.curveSegments !== void 0 ? e.curveSegments : 12, h = e.steps !== void 0 ? e.steps : 1, d = e.depth !== void 0 ? e.depth : 1, f = e.bevelEnabled !== void 0 ? e.bevelEnabled : true, g = e.bevelThickness !== void 0 ? e.bevelThickness : 0.2, _ = e.bevelSize !== void 0 ? e.bevelSize : g - 0.1, v = e.bevelOffset !== void 0 ? e.bevelOffset : 0, m = e.bevelSegments !== void 0 ? e.bevelSegments : 3, p = e.extrudePath, w = e.UVGenerator !== void 0 ? e.UVGenerator : Kx, x, b = false, L, C, R, D;
      p && (x = p.getSpacedPoints(h), b = true, f = false, L = p.computeFrenetFrames(h, false), C = new P(), R = new P(), D = new P()), f || (m = 0, g = 0, _ = 0, v = 0);
      let X = a.extractPoints(l), M = X.shape, A = X.holes;
      if (!ts.isClockWise(M)) {
        M = M.reverse();
        for (let T = 0, at = A.length; T < at; T++) {
          let Z = A[T];
          ts.isClockWise(Z) && (A[T] = Z.reverse());
        }
      }
      let $ = ts.triangulateShape(M, A), I = M;
      for (let T = 0, at = A.length; T < at; T++) {
        let Z = A[T];
        M = M.concat(Z);
      }
      function G(T, at, Z) {
        return at || console.error("THREE.ExtrudeGeometry: vec does not exist"), T.clone().addScaledVector(at, Z);
      }
      r(G, "scalePt2");
      let k = M.length, J = $.length;
      function q2(T, at, Z) {
        let st, K, xt, pt = T.x - at.x, yt = T.y - at.y, Wt = Z.x - T.x, E = Z.y - T.y, y = pt * pt + yt * yt, H = pt * E - yt * Wt;
        if (Math.abs(H) > Number.EPSILON) {
          let W = Math.sqrt(y), et = Math.sqrt(Wt * Wt + E * E), j = at.x - yt / W, Lt = at.y + pt / W, Rt = Z.x - E / et, ct = Z.y + Wt / et, ut = ((Rt - j) * E - (ct - Lt) * Wt) / (pt * E - yt * Wt);
          st = j + pt * ut - T.x, K = Lt + yt * ut - T.y;
          let Ut = st * st + K * K;
          if (Ut <= 2) return new lt(st, K);
          xt = Math.sqrt(Ut / 2);
        } else {
          let W = false;
          pt > Number.EPSILON ? Wt > Number.EPSILON && (W = true) : pt < -Number.EPSILON ? Wt < -Number.EPSILON && (W = true) : Math.sign(yt) === Math.sign(E) && (W = true), W ? (st = -yt, K = pt, xt = Math.sqrt(y)) : (st = pt, K = yt, xt = Math.sqrt(y / 2));
        }
        return new lt(st / xt, K / xt);
      }
      r(q2, "getBevelVec");
      let Y = [];
      for (let T = 0, at = I.length, Z = at - 1, st = T + 1; T < at; T++, Z++, st++) Z === at && (Z = 0), st === at && (st = 0), Y[T] = q2(I[T], I[Z], I[st]);
      let it = [], nt, _t = Y.concat();
      for (let T = 0, at = A.length; T < at; T++) {
        let Z = A[T];
        nt = [];
        for (let st = 0, K = Z.length, xt = K - 1, pt = st + 1; st < K; st++, xt++, pt++) xt === K && (xt = 0), pt === K && (pt = 0), nt[st] = q2(Z[st], Z[xt], Z[pt]);
        it.push(nt), _t = _t.concat(nt);
      }
      for (let T = 0; T < m; T++) {
        let at = T / m, Z = g * Math.cos(at * Math.PI / 2), st = _ * Math.sin(at * Math.PI / 2) + v;
        for (let K = 0, xt = I.length; K < xt; K++) {
          let pt = G(I[K], Y[K], st);
          wt(pt.x, pt.y, -Z);
        }
        for (let K = 0, xt = A.length; K < xt; K++) {
          let pt = A[K];
          nt = it[K];
          for (let yt = 0, Wt = pt.length; yt < Wt; yt++) {
            let E = G(pt[yt], nt[yt], st);
            wt(E.x, E.y, -Z);
          }
        }
      }
      let It = _ + v;
      for (let T = 0; T < k; T++) {
        let at = f ? G(M[T], _t[T], It) : M[T];
        b ? (R.copy(L.normals[0]).multiplyScalar(at.x), C.copy(L.binormals[0]).multiplyScalar(at.y), D.copy(x[0]).add(R).add(C), wt(D.x, D.y, D.z)) : wt(at.x, at.y, 0);
      }
      for (let T = 1; T <= h; T++) for (let at = 0; at < k; at++) {
        let Z = f ? G(M[at], _t[at], It) : M[at];
        b ? (R.copy(L.normals[T]).multiplyScalar(Z.x), C.copy(L.binormals[T]).multiplyScalar(Z.y), D.copy(x[T]).add(R).add(C), wt(D.x, D.y, D.z)) : wt(Z.x, Z.y, d / h * T);
      }
      for (let T = m - 1; T >= 0; T--) {
        let at = T / m, Z = g * Math.cos(at * Math.PI / 2), st = _ * Math.sin(at * Math.PI / 2) + v;
        for (let K = 0, xt = I.length; K < xt; K++) {
          let pt = G(I[K], Y[K], st);
          wt(pt.x, pt.y, d + Z);
        }
        for (let K = 0, xt = A.length; K < xt; K++) {
          let pt = A[K];
          nt = it[K];
          for (let yt = 0, Wt = pt.length; yt < Wt; yt++) {
            let E = G(pt[yt], nt[yt], st);
            b ? wt(E.x, E.y + x[h - 1].y, x[h - 1].x + Z) : wt(E.x, E.y, d + Z);
          }
        }
      }
      V(), tt();
      function V() {
        let T = i.length / 3;
        if (f) {
          let at = 0, Z = k * at;
          for (let st = 0; st < J; st++) {
            let K = $[st];
            Mt(K[2] + Z, K[1] + Z, K[0] + Z);
          }
          at = h + m * 2, Z = k * at;
          for (let st = 0; st < J; st++) {
            let K = $[st];
            Mt(K[0] + Z, K[1] + Z, K[2] + Z);
          }
        } else {
          for (let at = 0; at < J; at++) {
            let Z = $[at];
            Mt(Z[2], Z[1], Z[0]);
          }
          for (let at = 0; at < J; at++) {
            let Z = $[at];
            Mt(Z[0] + k * h, Z[1] + k * h, Z[2] + k * h);
          }
        }
        n.addGroup(T, i.length / 3 - T, 0);
      }
      r(V, "buildLidFaces");
      function tt() {
        let T = i.length / 3, at = 0;
        mt(I, at), at += I.length;
        for (let Z = 0, st = A.length; Z < st; Z++) {
          let K = A[Z];
          mt(K, at), at += K.length;
        }
        n.addGroup(T, i.length / 3 - T, 1);
      }
      r(tt, "buildSideFaces");
      function mt(T, at) {
        let Z = T.length;
        for (; --Z >= 0; ) {
          let st = Z, K = Z - 1;
          K < 0 && (K = T.length - 1);
          for (let xt = 0, pt = h + m * 2; xt < pt; xt++) {
            let yt = k * xt, Wt = k * (xt + 1), E = at + st + yt, y = at + K + yt, H = at + K + Wt, W = at + st + Wt;
            vt(E, y, H, W);
          }
        }
      }
      r(mt, "sidewalls");
      function wt(T, at, Z) {
        c.push(T), c.push(at), c.push(Z);
      }
      r(wt, "v");
      function Mt(T, at, Z) {
        Ht(T), Ht(at), Ht(Z);
        let st = i.length / 3, K = w.generateTopUV(n, i, st - 3, st - 2, st - 1);
        At(K[0]), At(K[1]), At(K[2]);
      }
      r(Mt, "f3");
      function vt(T, at, Z, st) {
        Ht(T), Ht(at), Ht(st), Ht(at), Ht(Z), Ht(st);
        let K = i.length / 3, xt = w.generateSideWallUV(n, i, K - 6, K - 3, K - 2, K - 1);
        At(xt[0]), At(xt[1]), At(xt[3]), At(xt[1]), At(xt[2]), At(xt[3]);
      }
      r(vt, "f4");
      function Ht(T) {
        i.push(c[T * 3 + 0]), i.push(c[T * 3 + 1]), i.push(c[T * 3 + 2]);
      }
      r(Ht, "addVertex");
      function At(T) {
        r2.push(T.x), r2.push(T.y);
      }
      r(At, "addUV");
    }
    r(o, "addShape");
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  toJSON() {
    let t = super.toJSON(), e = this.parameters.shapes, n = this.parameters.options;
    return Qx(e, n, t);
  }
  static fromJSON(t, e) {
    let n = [];
    for (let r2 = 0, o = t.shapes.length; r2 < o; r2++) {
      let a = e[t.shapes[r2]];
      n.push(a);
    }
    let i = t.options.extrudePath;
    return i !== void 0 && (t.options.extrudePath = new Sr[i.type]().fromJSON(i)), new Fr2(n, t.options);
  }
};
r(Fr, "ExtrudeGeometry");
var ld = Fr;
var Kx = { generateTopUV: function(s, t, e, n, i) {
  let r2 = t[e * 3], o = t[e * 3 + 1], a = t[n * 3], c = t[n * 3 + 1], l = t[i * 3], h = t[i * 3 + 1];
  return [new lt(r2, o), new lt(a, c), new lt(l, h)];
}, generateSideWallUV: function(s, t, e, n, i, r2) {
  let o = t[e * 3], a = t[e * 3 + 1], c = t[e * 3 + 2], l = t[n * 3], h = t[n * 3 + 1], d = t[n * 3 + 2], f = t[i * 3], g = t[i * 3 + 1], _ = t[i * 3 + 2], v = t[r2 * 3], m = t[r2 * 3 + 1], p = t[r2 * 3 + 2];
  return Math.abs(a - h) < Math.abs(o - l) ? [new lt(o, 1 - c), new lt(l, 1 - d), new lt(f, 1 - _), new lt(v, 1 - p)] : [new lt(a, 1 - c), new lt(h, 1 - d), new lt(g, 1 - _), new lt(m, 1 - p)];
} };
function Qx(s, t, e) {
  if (e.shapes = [], Array.isArray(s)) for (let n = 0, i = s.length; n < i; n++) {
    let r2 = s[n];
    e.shapes.push(r2.uuid);
  }
  else e.shapes.push(s.uuid);
  return e.options = Object.assign({}, t), t.extrudePath !== void 0 && (e.options.extrudePath = t.extrudePath.toJSON()), e;
}
r(Qx, "toJSON$1");
var Br = class Br2 extends Le {
  constructor(t = new yr(new P(-1, -1, 0), new P(-1, 1, 0), new P(1, 1, 0)), e = 64, n = 1, i = 8, r2 = false) {
    super(), this.type = "TubeGeometry", this.parameters = { path: t, tubularSegments: e, radius: n, radialSegments: i, closed: r2 };
    let o = t.computeFrenetFrames(e, r2);
    this.tangents = o.tangents, this.normals = o.normals, this.binormals = o.binormals;
    let a = new P(), c = new P(), l = new lt(), h = new P(), d = [], f = [], g = [], _ = [];
    v(), this.setIndex(_), this.setAttribute("position", new ce(d, 3)), this.setAttribute("normal", new ce(f, 3)), this.setAttribute("uv", new ce(g, 2));
    function v() {
      for (let x = 0; x < e; x++) m(x);
      m(r2 === false ? e : 0), w(), p();
    }
    r(v, "generateBufferData");
    function m(x) {
      h = t.getPointAt(x / e, h);
      let b = o.normals[x], L = o.binormals[x];
      for (let C = 0; C <= i; C++) {
        let R = C / i * Math.PI * 2, D = Math.sin(R), X = -Math.cos(R);
        c.x = X * b.x + D * L.x, c.y = X * b.y + D * L.y, c.z = X * b.z + D * L.z, c.normalize(), f.push(c.x, c.y, c.z), a.x = h.x + n * c.x, a.y = h.y + n * c.y, a.z = h.z + n * c.z, d.push(a.x, a.y, a.z);
      }
    }
    r(m, "generateSegment");
    function p() {
      for (let x = 1; x <= e; x++) for (let b = 1; b <= i; b++) {
        let L = (i + 1) * (x - 1) + (b - 1), C = (i + 1) * x + (b - 1), R = (i + 1) * x + b, D = (i + 1) * (x - 1) + b;
        _.push(L, C, D), _.push(C, R, D);
      }
    }
    r(p, "generateIndices");
    function w() {
      for (let x = 0; x <= e; x++) for (let b = 0; b <= i; b++) l.x = x / e, l.y = b / i, g.push(l.x, l.y);
    }
    r(w, "generateUVs");
  }
  copy(t) {
    return super.copy(t), this.parameters = Object.assign({}, t.parameters), this;
  }
  toJSON() {
    let t = super.toJSON();
    return t.path = this.parameters.path.toJSON(), t;
  }
  static fromJSON(t) {
    return new Br2(new Sr[t.path.type]().fromJSON(t.path), t.tubularSegments, t.radius, t.radialSegments, t.closed);
  }
};
r(Br, "TubeGeometry");
var hd = Br;
var ml = class ml2 extends je {
  constructor(t) {
    super(), this.isMeshStandardMaterial = true, this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new Vt(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Vt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Bo, this.normalScale = new lt(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Je(), this.envMapIntensity = 1, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = false, this.fog = true, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.defines = { STANDARD: "" }, this.color.copy(t.color), this.roughness = t.roughness, this.metalness = t.metalness, this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.roughnessMap = t.roughnessMap, this.metalnessMap = t.metalnessMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapRotation.copy(t.envMapRotation), this.envMapIntensity = t.envMapIntensity, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this;
  }
};
r(ml, "MeshStandardMaterial");
var So = ml;
var gl = class gl2 extends So {
  constructor(t) {
    super(), this.isMeshPhysicalMaterial = true, this.defines = { STANDARD: "", PHYSICAL: "" }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new lt(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", { get: function() {
      return pe(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
    }, set: function(e) {
      this.ior = (1 + 0.4 * e) / (1 - 0.4 * e);
    } }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new Vt(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new Vt(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new Vt(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(t);
  }
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(t) {
    this._anisotropy > 0 != t > 0 && this.version++, this._anisotropy = t;
  }
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(t) {
    this._clearcoat > 0 != t > 0 && this.version++, this._clearcoat = t;
  }
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(t) {
    this._iridescence > 0 != t > 0 && this.version++, this._iridescence = t;
  }
  get sheen() {
    return this._sheen;
  }
  set sheen(t) {
    this._sheen > 0 != t > 0 && this.version++, this._sheen = t;
  }
  get transmission() {
    return this._transmission;
  }
  set transmission(t) {
    this._transmission > 0 != t > 0 && this.version++, this._transmission = t;
  }
  copy(t) {
    return super.copy(t), this.defines = { STANDARD: "", PHYSICAL: "" }, this.anisotropy = t.anisotropy, this.anisotropyRotation = t.anisotropyRotation, this.anisotropyMap = t.anisotropyMap, this.clearcoat = t.clearcoat, this.clearcoatMap = t.clearcoatMap, this.clearcoatRoughness = t.clearcoatRoughness, this.clearcoatRoughnessMap = t.clearcoatRoughnessMap, this.clearcoatNormalMap = t.clearcoatNormalMap, this.clearcoatNormalScale.copy(t.clearcoatNormalScale), this.ior = t.ior, this.iridescence = t.iridescence, this.iridescenceMap = t.iridescenceMap, this.iridescenceIOR = t.iridescenceIOR, this.iridescenceThicknessRange = [...t.iridescenceThicknessRange], this.iridescenceThicknessMap = t.iridescenceThicknessMap, this.sheen = t.sheen, this.sheenColor.copy(t.sheenColor), this.sheenColorMap = t.sheenColorMap, this.sheenRoughness = t.sheenRoughness, this.sheenRoughnessMap = t.sheenRoughnessMap, this.transmission = t.transmission, this.transmissionMap = t.transmissionMap, this.thickness = t.thickness, this.thicknessMap = t.thicknessMap, this.attenuationDistance = t.attenuationDistance, this.attenuationColor.copy(t.attenuationColor), this.specularIntensity = t.specularIntensity, this.specularIntensityMap = t.specularIntensityMap, this.specularColor.copy(t.specularColor), this.specularColorMap = t.specularColorMap, this;
  }
};
r(gl, "MeshPhysicalMaterial");
var ud = gl;
var _l = class _l2 extends je {
  constructor(t) {
    super(), this.isMeshLambertMaterial = true, this.type = "MeshLambertMaterial", this.color = new Vt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Vt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Bo, this.normalScale = new lt(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Je(), this.combine = Oo, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = false, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = false, this.fog = true, this.setValues(t);
  }
  copy(t) {
    return super.copy(t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.envMapRotation.copy(t.envMapRotation), this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this;
  }
};
r(_l, "MeshLambertMaterial");
var dd = _l;
function Zs(s, t, e) {
  return !s || !e && s.constructor === t ? s : typeof t.BYTES_PER_ELEMENT == "number" ? new t(s) : Array.prototype.slice.call(s);
}
r(Zs, "convertArray");
function jx(s) {
  return ArrayBuffer.isView(s) && !(s instanceof DataView);
}
r(jx, "isTypedArray");
function tv(s) {
  function t(i, r2) {
    return s[i] - s[r2];
  }
  r(t, "compareTime");
  let e = s.length, n = new Array(e);
  for (let i = 0; i !== e; ++i) n[i] = i;
  return n.sort(t), n;
}
r(tv, "getKeyframeOrder");
function fd(s, t, e) {
  let n = s.length, i = new s.constructor(n);
  for (let r2 = 0, o = 0; o !== n; ++r2) {
    let a = e[r2] * t;
    for (let c = 0; c !== t; ++c) i[o++] = s[a + c];
  }
  return i;
}
r(fd, "sortedArray");
function nf(s, t, e, n) {
  let i = 1, r2 = s[0];
  for (; r2 !== void 0 && r2[n] === void 0; ) r2 = s[i++];
  if (r2 === void 0) return;
  let o = r2[n];
  if (o !== void 0) if (Array.isArray(o)) do
    o = r2[n], o !== void 0 && (t.push(r2.time), e.push.apply(e, o)), r2 = s[i++];
  while (r2 !== void 0);
  else if (o.toArray !== void 0) do
    o = r2[n], o !== void 0 && (t.push(r2.time), o.toArray(e, e.length)), r2 = s[i++];
  while (r2 !== void 0);
  else do
    o = r2[n], o !== void 0 && (t.push(r2.time), e.push(o)), r2 = s[i++];
  while (r2 !== void 0);
}
r(nf, "flattenJSON");
var xl = class xl2 {
  constructor(t, e, n, i) {
    this.parameterPositions = t, this._cachedIndex = 0, this.resultBuffer = i !== void 0 ? i : new e.constructor(n), this.sampleValues = e, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {};
  }
  evaluate(t) {
    let e = this.parameterPositions, n = this._cachedIndex, i = e[n], r2 = e[n - 1];
    n: {
      t: {
        let o;
        e: {
          i: if (!(t < i)) {
            for (let a = n + 2; ; ) {
              if (i === void 0) {
                if (t < r2) break i;
                return n = e.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
              }
              if (n === a) break;
              if (r2 = i, i = e[++n], t < i) break t;
            }
            o = e.length;
            break e;
          }
          if (!(t >= r2)) {
            let a = e[1];
            t < a && (n = 2, r2 = a);
            for (let c = n - 2; ; ) {
              if (r2 === void 0) return this._cachedIndex = 0, this.copySampleValue_(0);
              if (n === c) break;
              if (i = r2, r2 = e[--n - 1], t >= r2) break t;
            }
            o = n, n = 0;
            break e;
          }
          break n;
        }
        for (; n < o; ) {
          let a = n + o >>> 1;
          t < e[a] ? o = a : n = a + 1;
        }
        if (i = e[n], r2 = e[n - 1], r2 === void 0) return this._cachedIndex = 0, this.copySampleValue_(0);
        if (i === void 0) return n = e.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
      }
      this._cachedIndex = n, this.intervalChanged_(n, r2, i);
    }
    return this.interpolate_(n, r2, t, i);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(t) {
    let e = this.resultBuffer, n = this.sampleValues, i = this.valueSize, r2 = t * i;
    for (let o = 0; o !== i; ++o) e[o] = n[r2 + o];
    return e;
  }
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {
  }
};
r(xl, "Interpolant");
var Ni = xl;
var vl = class vl2 extends Ni {
  constructor(t, e, n, i) {
    super(t, e, n, i), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = { endingStart: Fh, endingEnd: Fh };
  }
  intervalChanged_(t, e, n) {
    let i = this.parameterPositions, r2 = t - 2, o = t + 1, a = i[r2], c = i[o];
    if (a === void 0) switch (this.getSettings_().endingStart) {
      case Bh:
        r2 = t, a = 2 * e - n;
        break;
      case zh:
        r2 = i.length - 2, a = e + i[r2] - i[r2 + 1];
        break;
      default:
        r2 = t, a = n;
    }
    if (c === void 0) switch (this.getSettings_().endingEnd) {
      case Bh:
        o = t, c = 2 * n - e;
        break;
      case zh:
        o = 1, c = n + i[1] - i[0];
        break;
      default:
        o = t - 1, c = e;
    }
    let l = (n - e) * 0.5, h = this.valueSize;
    this._weightPrev = l / (e - a), this._weightNext = l / (c - n), this._offsetPrev = r2 * h, this._offsetNext = o * h;
  }
  interpolate_(t, e, n, i) {
    let r2 = this.resultBuffer, o = this.sampleValues, a = this.valueSize, c = t * a, l = c - a, h = this._offsetPrev, d = this._offsetNext, f = this._weightPrev, g = this._weightNext, _ = (n - e) / (i - e), v = _ * _, m = v * _, p = -f * m + 2 * f * v - f * _, w = (1 + f) * m + (-1.5 - 2 * f) * v + (-0.5 + f) * _ + 1, x = (-1 - g) * m + (1.5 + g) * v + 0.5 * _, b = g * m - g * v;
    for (let L = 0; L !== a; ++L) r2[L] = p * o[h + L] + w * o[l + L] + x * o[c + L] + b * o[d + L];
    return r2;
  }
};
r(vl, "CubicInterpolant");
var bo = vl;
var yl = class yl2 extends Ni {
  constructor(t, e, n, i) {
    super(t, e, n, i);
  }
  interpolate_(t, e, n, i) {
    let r2 = this.resultBuffer, o = this.sampleValues, a = this.valueSize, c = t * a, l = c - a, h = (n - e) / (i - e), d = 1 - h;
    for (let f = 0; f !== a; ++f) r2[f] = o[l + f] * d + o[c + f] * h;
    return r2;
  }
};
r(yl, "LinearInterpolant");
var Eo = yl;
var Ml = class Ml2 extends Ni {
  constructor(t, e, n, i) {
    super(t, e, n, i);
  }
  interpolate_(t) {
    return this.copySampleValue_(t - 1);
  }
};
r(Ml, "DiscreteInterpolant");
var wo = Ml;
var Sl = class Sl2 {
  constructor(t, e, n, i) {
    if (t === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (e === void 0 || e.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t);
    this.name = t, this.times = Zs(e, this.TimeBufferType), this.values = Zs(n, this.ValueBufferType), this.setInterpolation(i || this.DefaultInterpolation);
  }
  static toJSON(t) {
    let e = t.constructor, n;
    if (e.toJSON !== this.toJSON) n = e.toJSON(t);
    else {
      n = { name: t.name, times: Zs(t.times, Array), values: Zs(t.values, Array) };
      let i = t.getInterpolation();
      i !== t.DefaultInterpolation && (n.interpolation = i);
    }
    return n.type = t.ValueTypeName, n;
  }
  InterpolantFactoryMethodDiscrete(t) {
    return new wo(this.times, this.values, this.getValueSize(), t);
  }
  InterpolantFactoryMethodLinear(t) {
    return new Eo(this.times, this.values, this.getValueSize(), t);
  }
  InterpolantFactoryMethodSmooth(t) {
    return new bo(this.times, this.values, this.getValueSize(), t);
  }
  setInterpolation(t) {
    let e;
    switch (t) {
      case $s:
        e = this.InterpolantFactoryMethodDiscrete;
        break;
      case Ks:
        e = this.InterpolantFactoryMethodLinear;
        break;
      case ta:
        e = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (e === void 0) {
      let n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0) if (t !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation);
      else throw new Error(n);
      return console.warn("THREE.KeyframeTrack:", n), this;
    }
    return this.createInterpolant = e, this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return $s;
      case this.InterpolantFactoryMethodLinear:
        return Ks;
      case this.InterpolantFactoryMethodSmooth:
        return ta;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  shift(t) {
    if (t !== 0) {
      let e = this.times;
      for (let n = 0, i = e.length; n !== i; ++n) e[n] += t;
    }
    return this;
  }
  scale(t) {
    if (t !== 1) {
      let e = this.times;
      for (let n = 0, i = e.length; n !== i; ++n) e[n] *= t;
    }
    return this;
  }
  trim(t, e) {
    let n = this.times, i = n.length, r2 = 0, o = i - 1;
    for (; r2 !== i && n[r2] < t; ) ++r2;
    for (; o !== -1 && n[o] > e; ) --o;
    if (++o, r2 !== 0 || o !== i) {
      r2 >= o && (o = Math.max(o, 1), r2 = o - 1);
      let a = this.getValueSize();
      this.times = n.slice(r2, o), this.values = this.values.slice(r2 * a, o * a);
    }
    return this;
  }
  validate() {
    let t = true, e = this.getValueSize();
    e - Math.floor(e) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), t = false);
    let n = this.times, i = this.values, r2 = n.length;
    r2 === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), t = false);
    let o = null;
    for (let a = 0; a !== r2; a++) {
      let c = n[a];
      if (typeof c == "number" && isNaN(c)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, a, c), t = false;
        break;
      }
      if (o !== null && o > c) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, a, c, o), t = false;
        break;
      }
      o = c;
    }
    if (i !== void 0 && jx(i)) for (let a = 0, c = i.length; a !== c; ++a) {
      let l = i[a];
      if (isNaN(l)) {
        console.error("THREE.KeyframeTrack: Value is not a valid number.", this, a, l), t = false;
        break;
      }
    }
    return t;
  }
  optimize() {
    let t = this.times.slice(), e = this.values.slice(), n = this.getValueSize(), i = this.getInterpolation() === ta, r2 = t.length - 1, o = 1;
    for (let a = 1; a < r2; ++a) {
      let c = false, l = t[a], h = t[a + 1];
      if (l !== h && (a !== 1 || l !== t[0])) if (i) c = true;
      else {
        let d = a * n, f = d - n, g = d + n;
        for (let _ = 0; _ !== n; ++_) {
          let v = e[d + _];
          if (v !== e[f + _] || v !== e[g + _]) {
            c = true;
            break;
          }
        }
      }
      if (c) {
        if (a !== o) {
          t[o] = t[a];
          let d = a * n, f = o * n;
          for (let g = 0; g !== n; ++g) e[f + g] = e[d + g];
        }
        ++o;
      }
    }
    if (r2 > 0) {
      t[o] = t[r2];
      for (let a = r2 * n, c = o * n, l = 0; l !== n; ++l) e[c + l] = e[a + l];
      ++o;
    }
    return o !== t.length ? (this.times = t.slice(0, o), this.values = e.slice(0, o * n)) : (this.times = t, this.values = e), this;
  }
  clone() {
    let t = this.times.slice(), e = this.values.slice(), n = this.constructor, i = new n(this.name, t, e);
    return i.createInterpolant = this.createInterpolant, i;
  }
};
r(Sl, "KeyframeTrack");
var Ge = Sl;
Ge.prototype.TimeBufferType = Float32Array;
Ge.prototype.ValueBufferType = Float32Array;
Ge.prototype.DefaultInterpolation = Ks;
var bl = class bl2 extends Ge {
};
r(bl, "BooleanKeyframeTrack");
var Ln = bl;
Ln.prototype.ValueTypeName = "bool";
Ln.prototype.ValueBufferType = Array;
Ln.prototype.DefaultInterpolation = $s;
Ln.prototype.InterpolantFactoryMethodLinear = void 0;
Ln.prototype.InterpolantFactoryMethodSmooth = void 0;
var El = class El2 extends Ge {
};
r(El, "ColorKeyframeTrack");
var Er = El;
Er.prototype.ValueTypeName = "color";
var wl = class wl2 extends Ge {
};
r(wl, "NumberKeyframeTrack");
var Oi = wl;
Oi.prototype.ValueTypeName = "number";
var Al = class Al2 extends Ni {
  constructor(t, e, n, i) {
    super(t, e, n, i);
  }
  interpolate_(t, e, n, i) {
    let r2 = this.resultBuffer, o = this.sampleValues, a = this.valueSize, c = (n - e) / (i - e), l = t * a;
    for (let h = l + a; l !== h; l += 4) In.slerpFlat(r2, 0, o, l - a, o, l, c);
    return r2;
  }
};
r(Al, "QuaternionLinearInterpolant");
var Ao = Al;
var Tl = class Tl2 extends Ge {
  InterpolantFactoryMethodLinear(t) {
    return new Ao(this.times, this.values, this.getValueSize(), t);
  }
};
r(Tl, "QuaternionKeyframeTrack");
var jn = Tl;
jn.prototype.ValueTypeName = "quaternion";
jn.prototype.DefaultInterpolation = Ks;
jn.prototype.InterpolantFactoryMethodSmooth = void 0;
var Rl = class Rl2 extends Ge {
};
r(Rl, "StringKeyframeTrack");
var Un = Rl;
Un.prototype.ValueTypeName = "string";
Un.prototype.ValueBufferType = Array;
Un.prototype.DefaultInterpolation = $s;
Un.prototype.InterpolantFactoryMethodLinear = void 0;
Un.prototype.InterpolantFactoryMethodSmooth = void 0;
var Cl = class Cl2 extends Ge {
};
r(Cl, "VectorKeyframeTrack");
var Fi = Cl;
Fi.prototype.ValueTypeName = "vector";
var Pl = class Pl2 {
  constructor(t, e = -1, n, i = Qf) {
    this.name = t, this.tracks = n, this.duration = e, this.blendMode = i, this.uuid = Ve(), this.duration < 0 && this.resetDuration();
  }
  static parse(t) {
    let e = [], n = t.tracks, i = 1 / (t.fps || 1);
    for (let o = 0, a = n.length; o !== a; ++o) e.push(nv(n[o]).scale(i));
    let r2 = new this(t.name, t.duration, e, t.blendMode);
    return r2.uuid = t.uuid, r2;
  }
  static toJSON(t) {
    let e = [], n = t.tracks, i = { name: t.name, duration: t.duration, tracks: e, uuid: t.uuid, blendMode: t.blendMode };
    for (let r2 = 0, o = n.length; r2 !== o; ++r2) e.push(Ge.toJSON(n[r2]));
    return i;
  }
  static CreateFromMorphTargetSequence(t, e, n, i) {
    let r2 = e.length, o = [];
    for (let a = 0; a < r2; a++) {
      let c = [], l = [];
      c.push((a + r2 - 1) % r2, a, (a + 1) % r2), l.push(0, 1, 0);
      let h = tv(c);
      c = fd(c, 1, h), l = fd(l, 1, h), !i && c[0] === 0 && (c.push(r2), l.push(l[0])), o.push(new Oi(".morphTargetInfluences[" + e[a].name + "]", c, l).scale(1 / n));
    }
    return new this(t, -1, o);
  }
  static findByName(t, e) {
    let n = t;
    if (!Array.isArray(t)) {
      let i = t;
      n = i.geometry && i.geometry.animations || i.animations;
    }
    for (let i = 0; i < n.length; i++) if (n[i].name === e) return n[i];
    return null;
  }
  static CreateClipsFromMorphTargetSequences(t, e, n) {
    let i = {}, r2 = /^([\w-]*?)([\d]+)$/;
    for (let a = 0, c = t.length; a < c; a++) {
      let l = t[a], h = l.name.match(r2);
      if (h && h.length > 1) {
        let d = h[1], f = i[d];
        f || (i[d] = f = []), f.push(l);
      }
    }
    let o = [];
    for (let a in i) o.push(this.CreateFromMorphTargetSequence(a, i[a], e, n));
    return o;
  }
  static parseAnimation(t, e) {
    if (!t) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    let n = r(function(d, f, g, _, v) {
      if (g.length !== 0) {
        let m = [], p = [];
        nf(g, m, p, _), m.length !== 0 && v.push(new d(f, m, p));
      }
    }, "addNonemptyTrack"), i = [], r2 = t.name || "default", o = t.fps || 30, a = t.blendMode, c = t.length || -1, l = t.hierarchy || [];
    for (let d = 0; d < l.length; d++) {
      let f = l[d].keys;
      if (!(!f || f.length === 0)) if (f[0].morphTargets) {
        let g = {}, _;
        for (_ = 0; _ < f.length; _++) if (f[_].morphTargets) for (let v = 0; v < f[_].morphTargets.length; v++) g[f[_].morphTargets[v]] = -1;
        for (let v in g) {
          let m = [], p = [];
          for (let w = 0; w !== f[_].morphTargets.length; ++w) {
            let x = f[_];
            m.push(x.time), p.push(x.morphTarget === v ? 1 : 0);
          }
          i.push(new Oi(".morphTargetInfluence[" + v + "]", m, p));
        }
        c = g.length * o;
      } else {
        let g = ".bones[" + e[d].name + "]";
        n(Fi, g + ".position", f, "pos", i), n(jn, g + ".quaternion", f, "rot", i), n(Fi, g + ".scale", f, "scl", i);
      }
    }
    return i.length === 0 ? null : new this(r2, c, i, a);
  }
  resetDuration() {
    let t = this.tracks, e = 0;
    for (let n = 0, i = t.length; n !== i; ++n) {
      let r2 = this.tracks[n];
      e = Math.max(e, r2.times[r2.times.length - 1]);
    }
    return this.duration = e, this;
  }
  trim() {
    for (let t = 0; t < this.tracks.length; t++) this.tracks[t].trim(0, this.duration);
    return this;
  }
  validate() {
    let t = true;
    for (let e = 0; e < this.tracks.length; e++) t = t && this.tracks[e].validate();
    return t;
  }
  optimize() {
    for (let t = 0; t < this.tracks.length; t++) this.tracks[t].optimize();
    return this;
  }
  clone() {
    let t = [];
    for (let e = 0; e < this.tracks.length; e++) t.push(this.tracks[e].clone());
    return new this.constructor(this.name, this.duration, t, this.blendMode);
  }
  toJSON() {
    return this.constructor.toJSON(this);
  }
};
r(Pl, "AnimationClip");
var pd = Pl;
function ev(s) {
  switch (s.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return Oi;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return Fi;
    case "color":
      return Er;
    case "quaternion":
      return jn;
    case "bool":
    case "boolean":
      return Ln;
    case "string":
      return Un;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + s);
}
r(ev, "getTrackTypeForValueTypeName");
function nv(s) {
  if (s.type === void 0) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  let t = ev(s.type);
  if (s.times === void 0) {
    let e = [], n = [];
    nf(s.keys, e, n, "value"), s.times = e, s.values = n;
  }
  return t.parse !== void 0 ? t.parse(s) : new t(s.name, s.times, s.values, s.interpolation);
}
r(nv, "parseKeyframeTrack");
var wn = { enabled: false, files: {}, add: function(s, t) {
  this.enabled !== false && (this.files[s] = t);
}, get: function(s) {
  if (this.enabled !== false) return this.files[s];
}, remove: function(s) {
  delete this.files[s];
}, clear: function() {
  this.files = {};
} };
var Il = class Il2 {
  constructor(t, e, n) {
    let i = this, r2 = false, o = 0, a = 0, c, l = [];
    this.onStart = void 0, this.onLoad = t, this.onProgress = e, this.onError = n, this.itemStart = function(h) {
      a++, r2 === false && i.onStart !== void 0 && i.onStart(h, o, a), r2 = true;
    }, this.itemEnd = function(h) {
      o++, i.onProgress !== void 0 && i.onProgress(h, o, a), o === a && (r2 = false, i.onLoad !== void 0 && i.onLoad());
    }, this.itemError = function(h) {
      i.onError !== void 0 && i.onError(h);
    }, this.resolveURL = function(h) {
      return c ? c(h) : h;
    }, this.setURLModifier = function(h) {
      return c = h, this;
    }, this.addHandler = function(h, d) {
      return l.push(h, d), this;
    }, this.removeHandler = function(h) {
      let d = l.indexOf(h);
      return d !== -1 && l.splice(d, 2), this;
    }, this.getHandler = function(h) {
      for (let d = 0, f = l.length; d < f; d += 2) {
        let g = l[d], _ = l[d + 1];
        if (g.global && (g.lastIndex = 0), g.test(h)) return _;
      }
      return null;
    };
  }
};
r(Il, "LoadingManager");
var To = Il;
var iv = new To();
var Ll = class Ll2 {
  constructor(t) {
    this.manager = t !== void 0 ? t : iv, this.crossOrigin = "anonymous", this.withCredentials = false, this.path = "", this.resourcePath = "", this.requestHeader = {};
  }
  load() {
  }
  loadAsync(t, e) {
    let n = this;
    return new Promise(function(i, r2) {
      n.load(t, i, e, r2);
    });
  }
  parse() {
  }
  setCrossOrigin(t) {
    return this.crossOrigin = t, this;
  }
  setWithCredentials(t) {
    return this.withCredentials = t, this;
  }
  setPath(t) {
    return this.path = t, this;
  }
  setResourcePath(t) {
    return this.resourcePath = t, this;
  }
  setRequestHeader(t) {
    return this.requestHeader = t, this;
  }
};
r(Ll, "Loader");
var ti = Ll;
ti.DEFAULT_MATERIAL_NAME = "__DEFAULT";
var cn = {};
var Ul = class Ul2 extends Error {
  constructor(t, e) {
    super(t), this.response = e;
  }
};
r(Ul, "HttpError");
var Ro = Ul;
var Dl = class Dl2 extends ti {
  constructor(t) {
    super(t);
  }
  load(t, e, n, i) {
    t === void 0 && (t = ""), this.path !== void 0 && (t = this.path + t), t = this.manager.resolveURL(t);
    let r2 = wn.get(t);
    if (r2 !== void 0) return this.manager.itemStart(t), setTimeout(() => {
      e && e(r2), this.manager.itemEnd(t);
    }, 0), r2;
    if (cn[t] !== void 0) {
      cn[t].push({ onLoad: e, onProgress: n, onError: i });
      return;
    }
    cn[t] = [], cn[t].push({ onLoad: e, onProgress: n, onError: i });
    let o = new Request(t, { headers: new Headers(this.requestHeader), credentials: this.withCredentials ? "include" : "same-origin" }), a = this.mimeType, c = this.responseType;
    fetch(o).then((l) => {
      if (l.status === 200 || l.status === 0) {
        if (l.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || l.body === void 0 || l.body.getReader === void 0) return l;
        let h = cn[t], d = l.body.getReader(), f = l.headers.get("Content-Length") || l.headers.get("X-File-Size"), g = f ? parseInt(f) : 0, _ = g !== 0, v = 0, m = new ReadableStream({ start(p) {
          w();
          function w() {
            d.read().then(({ done: x, value: b }) => {
              if (x) p.close();
              else {
                v += b.byteLength;
                let L = new ProgressEvent("progress", { lengthComputable: _, loaded: v, total: g });
                for (let C = 0, R = h.length; C < R; C++) {
                  let D = h[C];
                  D.onProgress && D.onProgress(L);
                }
                p.enqueue(b), w();
              }
            });
          }
          r(w, "readData");
        } });
        return new Response(m);
      } else throw new Ro(`fetch for "${l.url}" responded with ${l.status}: ${l.statusText}`, l);
    }).then((l) => {
      switch (c) {
        case "arraybuffer":
          return l.arrayBuffer();
        case "blob":
          return l.blob();
        case "document":
          return l.text().then((h) => new DOMParser().parseFromString(h, a));
        case "json":
          return l.json();
        default:
          if (a === void 0) return l.text();
          {
            let d = /charset="?([^;"\s]*)"?/i.exec(a), f = d && d[1] ? d[1].toLowerCase() : void 0, g = new TextDecoder(f);
            return l.arrayBuffer().then((_) => g.decode(_));
          }
      }
    }).then((l) => {
      wn.add(t, l);
      let h = cn[t];
      delete cn[t];
      for (let d = 0, f = h.length; d < f; d++) {
        let g = h[d];
        g.onLoad && g.onLoad(l);
      }
    }).catch((l) => {
      let h = cn[t];
      if (h === void 0) throw this.manager.itemError(t), l;
      delete cn[t];
      for (let d = 0, f = h.length; d < f; d++) {
        let g = h[d];
        g.onError && g.onError(l);
      }
      this.manager.itemError(t);
    }).finally(() => {
      this.manager.itemEnd(t);
    }), this.manager.itemStart(t);
  }
  setResponseType(t) {
    return this.responseType = t, this;
  }
  setMimeType(t) {
    return this.mimeType = t, this;
  }
};
r(Dl, "FileLoader");
var md = Dl;
var Nl = class Nl2 extends ti {
  constructor(t) {
    super(t);
  }
  load(t, e, n, i) {
    this.path !== void 0 && (t = this.path + t), t = this.manager.resolveURL(t);
    let r2 = this, o = wn.get(t);
    if (o !== void 0) return r2.manager.itemStart(t), setTimeout(function() {
      e && e(o), r2.manager.itemEnd(t);
    }, 0), o;
    let a = is("img");
    function c() {
      h(), wn.add(t, this), e && e(this), r2.manager.itemEnd(t);
    }
    r(c, "onImageLoad");
    function l(d) {
      h(), i && i(d), r2.manager.itemError(t), r2.manager.itemEnd(t);
    }
    r(l, "onImageError");
    function h() {
      a.removeEventListener("load", c, false), a.removeEventListener("error", l, false);
    }
    return r(h, "removeEventListeners"), a.addEventListener("load", c, false), a.addEventListener("error", l, false), t.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (a.crossOrigin = this.crossOrigin), r2.manager.itemStart(t), a.src = t, a;
  }
};
r(Nl, "ImageLoader");
var Co = Nl;
var Ol = class Ol2 extends ti {
  constructor(t) {
    super(t);
  }
  load(t, e, n, i) {
    let r2 = new be(), o = new Co(this.manager);
    return o.setCrossOrigin(this.crossOrigin), o.setPath(this.path), o.load(t, function(a) {
      r2.image = a, r2.needsUpdate = true, e !== void 0 && e(r2);
    }, n, i), r2;
  }
};
r(Ol, "TextureLoader");
var gd = Ol;
var Fl = class Fl2 extends le {
  constructor(t, e = 1) {
    super(), this.isLight = true, this.type = "Light", this.color = new Vt(t), this.intensity = e;
  }
  dispose() {
  }
  copy(t, e) {
    return super.copy(t, e), this.color.copy(t.color), this.intensity = t.intensity, this;
  }
  toJSON(t) {
    let e = super.toJSON(t);
    return e.object.color = this.color.getHex(), e.object.intensity = this.intensity, this.groundColor !== void 0 && (e.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (e.object.distance = this.distance), this.angle !== void 0 && (e.object.angle = this.angle), this.decay !== void 0 && (e.object.decay = this.decay), this.penumbra !== void 0 && (e.object.penumbra = this.penumbra), this.shadow !== void 0 && (e.object.shadow = this.shadow.toJSON()), e;
  }
};
r(Fl, "Light");
var Bi = Fl;
var Da = new Ft();
var _d = new P();
var xd = new P();
var Bl = class Bl2 {
  constructor(t) {
    this.camera = t, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new lt(512, 512), this.map = null, this.mapPass = null, this.matrix = new Ft(), this.autoUpdate = true, this.needsUpdate = false, this._frustum = new Di(), this._frameExtents = new lt(1, 1), this._viewportCount = 1, this._viewports = [new $t(0, 0, 1, 1)];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(t) {
    let e = this.camera, n = this.matrix;
    _d.setFromMatrixPosition(t.matrixWorld), e.position.copy(_d), xd.setFromMatrixPosition(t.target.matrixWorld), e.lookAt(xd), e.updateMatrixWorld(), Da.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse), this._frustum.setFromProjectionMatrix(Da), n.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1), n.multiply(Da);
  }
  getViewport(t) {
    return this._viewports[t];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  copy(t) {
    return this.camera = t.camera.clone(), this.bias = t.bias, this.radius = t.radius, this.mapSize.copy(t.mapSize), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    let t = {};
    return this.bias !== 0 && (t.bias = this.bias), this.normalBias !== 0 && (t.normalBias = this.normalBias), this.radius !== 1 && (t.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (t.mapSize = this.mapSize.toArray()), t.camera = this.camera.toJSON(false).object, delete t.camera.matrix, t;
  }
};
r(Bl, "LightShadow");
var us = Bl;
var zl = class zl2 extends us {
  constructor() {
    super(new Te(50, 1, 0.5, 500)), this.isSpotLightShadow = true, this.focus = 1;
  }
  updateMatrices(t) {
    let e = this.camera, n = Li * 2 * t.angle * this.focus, i = this.mapSize.width / this.mapSize.height, r2 = t.distance || e.far;
    (n !== e.fov || i !== e.aspect || r2 !== e.far) && (e.fov = n, e.aspect = i, e.far = r2, e.updateProjectionMatrix()), super.updateMatrices(t);
  }
  copy(t) {
    return super.copy(t), this.focus = t.focus, this;
  }
};
r(zl, "SpotLightShadow");
var Po = zl;
var kl = class kl2 extends Bi {
  constructor(t, e, n = 0, i = Math.PI / 3, r2 = 0, o = 2) {
    super(t, e), this.isSpotLight = true, this.type = "SpotLight", this.position.copy(le.DEFAULT_UP), this.updateMatrix(), this.target = new le(), this.distance = n, this.angle = i, this.penumbra = r2, this.decay = o, this.map = null, this.shadow = new Po();
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(t) {
    this.intensity = t / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(t, e) {
    return super.copy(t, e), this.distance = t.distance, this.angle = t.angle, this.penumbra = t.penumbra, this.decay = t.decay, this.target = t.target.clone(), this.shadow = t.shadow.clone(), this;
  }
};
r(kl, "SpotLight");
var vd = kl;
var yd = new Ft();
var Ji = new P();
var Na = new P();
var Vl = class Vl2 extends us {
  constructor() {
    super(new Te(90, 1, 0.5, 500)), this.isPointLightShadow = true, this._frameExtents = new lt(4, 2), this._viewportCount = 6, this._viewports = [new $t(2, 1, 1, 1), new $t(0, 1, 1, 1), new $t(3, 1, 1, 1), new $t(1, 1, 1, 1), new $t(3, 0, 1, 1), new $t(1, 0, 1, 1)], this._cubeDirections = [new P(1, 0, 0), new P(-1, 0, 0), new P(0, 0, 1), new P(0, 0, -1), new P(0, 1, 0), new P(0, -1, 0)], this._cubeUps = [new P(0, 1, 0), new P(0, 1, 0), new P(0, 1, 0), new P(0, 1, 0), new P(0, 0, 1), new P(0, 0, -1)];
  }
  updateMatrices(t, e = 0) {
    let n = this.camera, i = this.matrix, r2 = t.distance || n.far;
    r2 !== n.far && (n.far = r2, n.updateProjectionMatrix()), Ji.setFromMatrixPosition(t.matrixWorld), n.position.copy(Ji), Na.copy(n.position), Na.add(this._cubeDirections[e]), n.up.copy(this._cubeUps[e]), n.lookAt(Na), n.updateMatrixWorld(), i.makeTranslation(-Ji.x, -Ji.y, -Ji.z), yd.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(yd);
  }
};
r(Vl, "PointLightShadow");
var Io = Vl;
var Hl = class Hl2 extends Bi {
  constructor(t, e, n = 0, i = 2) {
    super(t, e), this.isPointLight = true, this.type = "PointLight", this.distance = n, this.decay = i, this.shadow = new Io();
  }
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(t) {
    this.intensity = t / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(t, e) {
    return super.copy(t, e), this.distance = t.distance, this.decay = t.decay, this.shadow = t.shadow.clone(), this;
  }
};
r(Hl, "PointLight");
var Md = Hl;
var Gl = class Gl2 extends us {
  constructor() {
    super(new dr(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = true;
  }
};
r(Gl, "DirectionalLightShadow");
var Lo = Gl;
var Wl = class Wl2 extends Bi {
  constructor(t, e) {
    super(t, e), this.isDirectionalLight = true, this.type = "DirectionalLight", this.position.copy(le.DEFAULT_UP), this.updateMatrix(), this.target = new le(), this.shadow = new Lo();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(t) {
    return super.copy(t), this.target = t.target.clone(), this.shadow = t.shadow.clone(), this;
  }
};
r(Wl, "DirectionalLight");
var Sd = Wl;
var Xl = class Xl2 extends Bi {
  constructor(t, e) {
    super(t, e), this.isAmbientLight = true, this.type = "AmbientLight";
  }
};
r(Xl, "AmbientLight");
var bd = Xl;
var ql = class ql2 {
  static decodeText(t) {
    if (typeof TextDecoder < "u") return new TextDecoder().decode(t);
    let e = "";
    for (let n = 0, i = t.length; n < i; n++) e += String.fromCharCode(t[n]);
    try {
      return decodeURIComponent(escape(e));
    } catch {
      return e;
    }
  }
  static extractUrlBase(t) {
    let e = t.lastIndexOf("/");
    return e === -1 ? "./" : t.slice(0, e + 1);
  }
  static resolveURL(t, e) {
    return typeof t != "string" || t === "" ? "" : (/^https?:\/\//i.test(e) && /^\//.test(t) && (e = e.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(t) || /^data:.*,.*$/i.test(t) || /^blob:.*$/i.test(t) ? t : e + t);
  }
};
r(ql, "LoaderUtils");
var Ed = ql;
var Yl = class Yl2 extends ti {
  constructor(t) {
    super(t), this.isImageBitmapLoader = true, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" };
  }
  setOptions(t) {
    return this.options = t, this;
  }
  load(t, e, n, i) {
    t === void 0 && (t = ""), this.path !== void 0 && (t = this.path + t), t = this.manager.resolveURL(t);
    let r2 = this, o = wn.get(t);
    if (o !== void 0) {
      if (r2.manager.itemStart(t), o.then) {
        o.then((l) => {
          e && e(l), r2.manager.itemEnd(t);
        }).catch((l) => {
          i && i(l);
        });
        return;
      }
      return setTimeout(function() {
        e && e(o), r2.manager.itemEnd(t);
      }, 0), o;
    }
    let a = {};
    a.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", a.headers = this.requestHeader;
    let c = fetch(t, a).then(function(l) {
      return l.blob();
    }).then(function(l) {
      return createImageBitmap(l, Object.assign(r2.options, { colorSpaceConversion: "none" }));
    }).then(function(l) {
      return wn.add(t, l), e && e(l), r2.manager.itemEnd(t), l;
    }).catch(function(l) {
      i && i(l), wn.remove(t), r2.manager.itemError(t), r2.manager.itemEnd(t);
    });
    wn.add(t, c), r2.manager.itemStart(t);
  }
};
r(Yl, "ImageBitmapLoader");
var wd = Yl;
var Zl = class Zl2 {
  constructor(t = true) {
    this.autoStart = t, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = false;
  }
  start() {
    this.startTime = Td(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = true;
  }
  stop() {
    this.getElapsedTime(), this.running = false, this.autoStart = false;
  }
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  getDelta() {
    let t = 0;
    if (this.autoStart && !this.running) return this.start(), 0;
    if (this.running) {
      let e = Td();
      t = (e - this.oldTime) / 1e3, this.oldTime = e, this.elapsedTime += t;
    }
    return t;
  }
};
r(Zl, "Clock");
var Ad = Zl;
function Td() {
  return (typeof performance > "u" ? Date : performance).now();
}
r(Td, "now");
var Go = "\\[\\]\\.:\\/";
var sv = new RegExp("[" + Go + "]", "g");
var Wo = "[^" + Go + "]";
var rv = "[^" + Go.replace("\\.", "") + "]";
var av = /((?:WC+[\/:])*)/.source.replace("WC", Wo);
var ov = /(WCOD+)?/.source.replace("WCOD", rv);
var cv = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", Wo);
var lv = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", Wo);
var hv = new RegExp("^" + av + ov + cv + lv + "$");
var uv = ["material", "materials", "bones", "map"];
var Jl = class Jl2 {
  constructor(t, e, n) {
    let i = n || ne.parseTrackName(e);
    this._targetGroup = t, this._bindings = t.subscribe_(e, i);
  }
  getValue(t, e) {
    this.bind();
    let n = this._targetGroup.nCachedObjects_, i = this._bindings[n];
    i !== void 0 && i.getValue(t, e);
  }
  setValue(t, e) {
    let n = this._bindings;
    for (let i = this._targetGroup.nCachedObjects_, r2 = n.length; i !== r2; ++i) n[i].setValue(t, e);
  }
  bind() {
    let t = this._bindings;
    for (let e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e) t[e].bind();
  }
  unbind() {
    let t = this._bindings;
    for (let e = this._targetGroup.nCachedObjects_, n = t.length; e !== n; ++e) t[e].unbind();
  }
};
r(Jl, "Composite");
var Uo = Jl;
var Sn = class Sn2 {
  constructor(t, e, n) {
    this.path = e, this.parsedPath = n || Sn2.parseTrackName(e), this.node = Sn2.findNode(t, this.parsedPath.nodeName), this.rootNode = t, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
  static create(t, e, n) {
    return t && t.isAnimationObjectGroup ? new Sn2.Composite(t, e, n) : new Sn2(t, e, n);
  }
  static sanitizeNodeName(t) {
    return t.replace(/\s/g, "_").replace(sv, "");
  }
  static parseTrackName(t) {
    let e = hv.exec(t);
    if (e === null) throw new Error("PropertyBinding: Cannot parse trackName: " + t);
    let n = { nodeName: e[2], objectName: e[3], objectIndex: e[4], propertyName: e[5], propertyIndex: e[6] }, i = n.nodeName && n.nodeName.lastIndexOf(".");
    if (i !== void 0 && i !== -1) {
      let r2 = n.nodeName.substring(i + 1);
      uv.indexOf(r2) !== -1 && (n.nodeName = n.nodeName.substring(0, i), n.objectName = r2);
    }
    if (n.propertyName === null || n.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t);
    return n;
  }
  static findNode(t, e) {
    if (e === void 0 || e === "" || e === "." || e === -1 || e === t.name || e === t.uuid) return t;
    if (t.skeleton) {
      let n = t.skeleton.getBoneByName(e);
      if (n !== void 0) return n;
    }
    if (t.children) {
      let n = r(function(r2) {
        for (let o = 0; o < r2.length; o++) {
          let a = r2[o];
          if (a.name === e || a.uuid === e) return a;
          let c = n(a.children);
          if (c) return c;
        }
        return null;
      }, "searchNodeSubtree"), i = n(t.children);
      if (i) return i;
    }
    return null;
  }
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  _getValue_direct(t, e) {
    t[e] = this.targetObject[this.propertyName];
  }
  _getValue_array(t, e) {
    let n = this.resolvedProperty;
    for (let i = 0, r2 = n.length; i !== r2; ++i) t[e++] = n[i];
  }
  _getValue_arrayElement(t, e) {
    t[e] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(t, e) {
    this.resolvedProperty.toArray(t, e);
  }
  _setValue_direct(t, e) {
    this.targetObject[this.propertyName] = t[e];
  }
  _setValue_direct_setNeedsUpdate(t, e) {
    this.targetObject[this.propertyName] = t[e], this.targetObject.needsUpdate = true;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(t, e) {
    this.targetObject[this.propertyName] = t[e], this.targetObject.matrixWorldNeedsUpdate = true;
  }
  _setValue_array(t, e) {
    let n = this.resolvedProperty;
    for (let i = 0, r2 = n.length; i !== r2; ++i) n[i] = t[e++];
  }
  _setValue_array_setNeedsUpdate(t, e) {
    let n = this.resolvedProperty;
    for (let i = 0, r2 = n.length; i !== r2; ++i) n[i] = t[e++];
    this.targetObject.needsUpdate = true;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(t, e) {
    let n = this.resolvedProperty;
    for (let i = 0, r2 = n.length; i !== r2; ++i) n[i] = t[e++];
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  _setValue_arrayElement(t, e) {
    this.resolvedProperty[this.propertyIndex] = t[e];
  }
  _setValue_arrayElement_setNeedsUpdate(t, e) {
    this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.needsUpdate = true;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(t, e) {
    this.resolvedProperty[this.propertyIndex] = t[e], this.targetObject.matrixWorldNeedsUpdate = true;
  }
  _setValue_fromArray(t, e) {
    this.resolvedProperty.fromArray(t, e);
  }
  _setValue_fromArray_setNeedsUpdate(t, e) {
    this.resolvedProperty.fromArray(t, e), this.targetObject.needsUpdate = true;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(t, e) {
    this.resolvedProperty.fromArray(t, e), this.targetObject.matrixWorldNeedsUpdate = true;
  }
  _getValue_unbound(t, e) {
    this.bind(), this.getValue(t, e);
  }
  _setValue_unbound(t, e) {
    this.bind(), this.setValue(t, e);
  }
  bind() {
    let t = this.node, e = this.parsedPath, n = e.objectName, i = e.propertyName, r2 = e.propertyIndex;
    if (t || (t = Sn2.findNode(this.rootNode, e.nodeName), this.node = t), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !t) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (n) {
      let l = e.objectIndex;
      switch (n) {
        case "materials":
          if (!t.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!t.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          t = t.material.materials;
          break;
        case "bones":
          if (!t.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          t = t.skeleton.bones;
          for (let h = 0; h < t.length; h++) if (t[h].name === l) {
            l = h;
            break;
          }
          break;
        case "map":
          if ("map" in t) {
            t = t.map;
            break;
          }
          if (!t.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!t.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          t = t.material.map;
          break;
        default:
          if (t[n] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          t = t[n];
      }
      if (l !== void 0) {
        if (t[l] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t);
          return;
        }
        t = t[l];
      }
    }
    let o = t[i];
    if (o === void 0) {
      let l = e.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + l + "." + i + " but it wasn't found.", t);
      return;
    }
    let a = this.Versioning.None;
    this.targetObject = t, t.needsUpdate !== void 0 ? a = this.Versioning.NeedsUpdate : t.matrixWorldNeedsUpdate !== void 0 && (a = this.Versioning.MatrixWorldNeedsUpdate);
    let c = this.BindingType.Direct;
    if (r2 !== void 0) {
      if (i === "morphTargetInfluences") {
        if (!t.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!t.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        t.morphTargetDictionary[r2] !== void 0 && (r2 = t.morphTargetDictionary[r2]);
      }
      c = this.BindingType.ArrayElement, this.resolvedProperty = o, this.propertyIndex = r2;
    } else o.fromArray !== void 0 && o.toArray !== void 0 ? (c = this.BindingType.HasFromToArray, this.resolvedProperty = o) : Array.isArray(o) ? (c = this.BindingType.EntireArray, this.resolvedProperty = o) : this.propertyName = i;
    this.getValue = this.GetterByBindingType[c], this.setValue = this.SetterByBindingTypeAndVersioning[c][a];
  }
  unbind() {
    this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
};
r(Sn, "PropertyBinding");
var ne = Sn;
ne.Composite = Uo;
ne.prototype.BindingType = { Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3 };
ne.prototype.Versioning = { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 };
ne.prototype.GetterByBindingType = [ne.prototype._getValue_direct, ne.prototype._getValue_array, ne.prototype._getValue_arrayElement, ne.prototype._getValue_toArray];
ne.prototype.SetterByBindingTypeAndVersioning = [[ne.prototype._setValue_direct, ne.prototype._setValue_direct_setNeedsUpdate, ne.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [ne.prototype._setValue_array, ne.prototype._setValue_array_setNeedsUpdate, ne.prototype._setValue_array_setMatrixWorldNeedsUpdate], [ne.prototype._setValue_arrayElement, ne.prototype._setValue_arrayElement_setNeedsUpdate, ne.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [ne.prototype._setValue_fromArray, ne.prototype._setValue_fromArray_setNeedsUpdate, ne.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];
var xv = new Float32Array(1);
var zr = class zr2 {
  constructor(t) {
    this.value = t;
  }
  clone() {
    return new zr2(this.value.clone === void 0 ? this.value : this.value.clone());
  }
};
r(zr, "Uniform");
var Rd = zr;
var Cd = new Ft();
var $l = class $l2 {
  constructor(t, e, n = 0, i = 1 / 0) {
    this.ray = new Kn(t, e), this.near = n, this.far = i, this.camera = null, this.layers = new ss(), this.params = { Mesh: {}, Line: { threshold: 1 }, LOD: {}, Points: { threshold: 1 }, Sprite: {} };
  }
  set(t, e) {
    this.ray.set(t, e);
  }
  setFromCamera(t, e) {
    e.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(t.x, t.y, 0.5).unproject(e).sub(this.ray.origin).normalize(), this.camera = e) : e.isOrthographicCamera ? (this.ray.origin.set(t.x, t.y, (e.near + e.far) / (e.near - e.far)).unproject(e), this.ray.direction.set(0, 0, -1).transformDirection(e.matrixWorld), this.camera = e) : console.error("THREE.Raycaster: Unsupported camera type: " + e.type);
  }
  setFromXRController(t) {
    return Cd.identity().extractRotation(t.matrixWorld), this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(0, 0, -1).applyMatrix4(Cd), this;
  }
  intersectObject(t, e = true, n = []) {
    return Do(t, this, n, e), n.sort(Id), n;
  }
  intersectObjects(t, e = true, n = []) {
    for (let i = 0, r2 = t.length; i < r2; i++) Do(t[i], this, n, e);
    return n.sort(Id), n;
  }
};
r($l, "Raycaster");
var Pd = $l;
function Id(s, t) {
  return s.distance - t.distance;
}
r(Id, "ascSort");
function Do(s, t, e, n) {
  if (s.layers.test(t.layers) && s.raycast(t, e), n === true) {
    let i = s.children;
    for (let r2 = 0, o = i.length; r2 < o; r2++) Do(i[r2], t, e, true);
  }
}
r(Do, "intersect");
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: { revision: No } }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = No);

export {
  fv,
  Cn,
  un,
  ka,
  Ye,
  Va,
  ge,
  uh,
  Vi,
  Ce,
  Zr,
  Yn,
  ke,
  Oe,
  $s,
  Ks,
  pv,
  mv,
  gv,
  bn,
  Ke,
  Dn,
  _v,
  lt,
  Jt,
  sr,
  be,
  $t,
  In,
  P,
  Ie,
  Re,
  Ft,
  Je,
  le,
  Vt,
  je,
  ar,
  Se,
  Le,
  Me,
  rs,
  tn,
  lr,
  Te,
  Di,
  ur,
  dr,
  Mi,
  ao,
  oo,
  Ru,
  Cu,
  Pu,
  Ou,
  co,
  as,
  Bu,
  mr,
  Vu,
  Wu,
  ho,
  gr,
  $u,
  Ku,
  uo,
  ju,
  ed,
  nd,
  mo,
  br,
  sd,
  rd,
  vo,
  ld,
  hd,
  So,
  ud,
  dd,
  Ni,
  Oi,
  jn,
  Fi,
  pd,
  ti,
  md,
  gd,
  vd,
  Md,
  Sd,
  bd,
  Ed,
  wd,
  Ad,
  ne,
  Rd,
  Pd
};
//# sourceMappingURL=chunk-763QVDXZ.js.map
